
LP55231.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003b2c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08003cb4  08003cb4  00013cb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003d0c  08003d0c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003d0c  08003d0c  00013d0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003d14  08003d14  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003d14  08003d14  00013d14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003d18  08003d18  00013d18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003d1c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000120  2000000c  08003d28  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000012c  08003d28  0002012c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d002  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001b00  00000000  00000000  0002d03e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ba0  00000000  00000000  0002eb40  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000ab8  00000000  00000000  0002f6e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00009fda  00000000  00000000  00030198  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00009a02  00000000  00000000  0003a172  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e9eff  00000000  00000000  00043b74  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0012da73  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002fa0  00000000  00000000  0012daf0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003c9c 	.word	0x08003c9c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08003c9c 	.word	0x08003c9c

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b972 	b.w	80004d4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	4688      	mov	r8, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14b      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000216:	428a      	cmp	r2, r1
 8000218:	4615      	mov	r5, r2
 800021a:	d967      	bls.n	80002ec <__udivmoddi4+0xe4>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0720 	rsb	r7, r2, #32
 8000226:	fa01 f302 	lsl.w	r3, r1, r2
 800022a:	fa20 f707 	lsr.w	r7, r0, r7
 800022e:	4095      	lsls	r5, r2
 8000230:	ea47 0803 	orr.w	r8, r7, r3
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000240:	fa1f fc85 	uxth.w	ip, r5
 8000244:	fb0e 8817 	mls	r8, lr, r7, r8
 8000248:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024c:	fb07 f10c 	mul.w	r1, r7, ip
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18eb      	adds	r3, r5, r3
 8000256:	f107 30ff 	add.w	r0, r7, #4294967295
 800025a:	f080 811b 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8118 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000264:	3f02      	subs	r7, #2
 8000266:	442b      	add	r3, r5
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000270:	fb0e 3310 	mls	r3, lr, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fc0c 	mul.w	ip, r0, ip
 800027c:	45a4      	cmp	ip, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	192c      	adds	r4, r5, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295
 8000286:	f080 8107 	bcs.w	8000498 <__udivmoddi4+0x290>
 800028a:	45a4      	cmp	ip, r4
 800028c:	f240 8104 	bls.w	8000498 <__udivmoddi4+0x290>
 8000290:	3802      	subs	r0, #2
 8000292:	442c      	add	r4, r5
 8000294:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000298:	eba4 040c 	sub.w	r4, r4, ip
 800029c:	2700      	movs	r7, #0
 800029e:	b11e      	cbz	r6, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c6 4300 	strd	r4, r3, [r6]
 80002a8:	4639      	mov	r1, r7
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d909      	bls.n	80002c6 <__udivmoddi4+0xbe>
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	f000 80eb 	beq.w	800048e <__udivmoddi4+0x286>
 80002b8:	2700      	movs	r7, #0
 80002ba:	e9c6 0100 	strd	r0, r1, [r6]
 80002be:	4638      	mov	r0, r7
 80002c0:	4639      	mov	r1, r7
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	fab3 f783 	clz	r7, r3
 80002ca:	2f00      	cmp	r7, #0
 80002cc:	d147      	bne.n	800035e <__udivmoddi4+0x156>
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xd0>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 80fa 	bhi.w	80004cc <__udivmoddi4+0x2c4>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb61 0303 	sbc.w	r3, r1, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	4698      	mov	r8, r3
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d0e0      	beq.n	80002a8 <__udivmoddi4+0xa0>
 80002e6:	e9c6 4800 	strd	r4, r8, [r6]
 80002ea:	e7dd      	b.n	80002a8 <__udivmoddi4+0xa0>
 80002ec:	b902      	cbnz	r2, 80002f0 <__udivmoddi4+0xe8>
 80002ee:	deff      	udf	#255	; 0xff
 80002f0:	fab2 f282 	clz	r2, r2
 80002f4:	2a00      	cmp	r2, #0
 80002f6:	f040 808f 	bne.w	8000418 <__udivmoddi4+0x210>
 80002fa:	1b49      	subs	r1, r1, r5
 80002fc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000300:	fa1f f885 	uxth.w	r8, r5
 8000304:	2701      	movs	r7, #1
 8000306:	fbb1 fcfe 	udiv	ip, r1, lr
 800030a:	0c23      	lsrs	r3, r4, #16
 800030c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000310:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000314:	fb08 f10c 	mul.w	r1, r8, ip
 8000318:	4299      	cmp	r1, r3
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0x124>
 800031c:	18eb      	adds	r3, r5, r3
 800031e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x122>
 8000324:	4299      	cmp	r1, r3
 8000326:	f200 80cd 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 800032a:	4684      	mov	ip, r0
 800032c:	1a59      	subs	r1, r3, r1
 800032e:	b2a3      	uxth	r3, r4
 8000330:	fbb1 f0fe 	udiv	r0, r1, lr
 8000334:	fb0e 1410 	mls	r4, lr, r0, r1
 8000338:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800033c:	fb08 f800 	mul.w	r8, r8, r0
 8000340:	45a0      	cmp	r8, r4
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x14c>
 8000344:	192c      	adds	r4, r5, r4
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x14a>
 800034c:	45a0      	cmp	r8, r4
 800034e:	f200 80b6 	bhi.w	80004be <__udivmoddi4+0x2b6>
 8000352:	4618      	mov	r0, r3
 8000354:	eba4 0408 	sub.w	r4, r4, r8
 8000358:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800035c:	e79f      	b.n	800029e <__udivmoddi4+0x96>
 800035e:	f1c7 0c20 	rsb	ip, r7, #32
 8000362:	40bb      	lsls	r3, r7
 8000364:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000368:	ea4e 0e03 	orr.w	lr, lr, r3
 800036c:	fa01 f407 	lsl.w	r4, r1, r7
 8000370:	fa20 f50c 	lsr.w	r5, r0, ip
 8000374:	fa21 f30c 	lsr.w	r3, r1, ip
 8000378:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800037c:	4325      	orrs	r5, r4
 800037e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000382:	0c2c      	lsrs	r4, r5, #16
 8000384:	fb08 3319 	mls	r3, r8, r9, r3
 8000388:	fa1f fa8e 	uxth.w	sl, lr
 800038c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000390:	fb09 f40a 	mul.w	r4, r9, sl
 8000394:	429c      	cmp	r4, r3
 8000396:	fa02 f207 	lsl.w	r2, r2, r7
 800039a:	fa00 f107 	lsl.w	r1, r0, r7
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b0>
 80003a0:	eb1e 0303 	adds.w	r3, lr, r3
 80003a4:	f109 30ff 	add.w	r0, r9, #4294967295
 80003a8:	f080 8087 	bcs.w	80004ba <__udivmoddi4+0x2b2>
 80003ac:	429c      	cmp	r4, r3
 80003ae:	f240 8084 	bls.w	80004ba <__udivmoddi4+0x2b2>
 80003b2:	f1a9 0902 	sub.w	r9, r9, #2
 80003b6:	4473      	add	r3, lr
 80003b8:	1b1b      	subs	r3, r3, r4
 80003ba:	b2ad      	uxth	r5, r5
 80003bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80003c0:	fb08 3310 	mls	r3, r8, r0, r3
 80003c4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003cc:	45a2      	cmp	sl, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1da>
 80003d0:	eb1e 0404 	adds.w	r4, lr, r4
 80003d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d8:	d26b      	bcs.n	80004b2 <__udivmoddi4+0x2aa>
 80003da:	45a2      	cmp	sl, r4
 80003dc:	d969      	bls.n	80004b2 <__udivmoddi4+0x2aa>
 80003de:	3802      	subs	r0, #2
 80003e0:	4474      	add	r4, lr
 80003e2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003e6:	fba0 8902 	umull	r8, r9, r0, r2
 80003ea:	eba4 040a 	sub.w	r4, r4, sl
 80003ee:	454c      	cmp	r4, r9
 80003f0:	46c2      	mov	sl, r8
 80003f2:	464b      	mov	r3, r9
 80003f4:	d354      	bcc.n	80004a0 <__udivmoddi4+0x298>
 80003f6:	d051      	beq.n	800049c <__udivmoddi4+0x294>
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d069      	beq.n	80004d0 <__udivmoddi4+0x2c8>
 80003fc:	ebb1 050a 	subs.w	r5, r1, sl
 8000400:	eb64 0403 	sbc.w	r4, r4, r3
 8000404:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000408:	40fd      	lsrs	r5, r7
 800040a:	40fc      	lsrs	r4, r7
 800040c:	ea4c 0505 	orr.w	r5, ip, r5
 8000410:	e9c6 5400 	strd	r5, r4, [r6]
 8000414:	2700      	movs	r7, #0
 8000416:	e747      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000418:	f1c2 0320 	rsb	r3, r2, #32
 800041c:	fa20 f703 	lsr.w	r7, r0, r3
 8000420:	4095      	lsls	r5, r2
 8000422:	fa01 f002 	lsl.w	r0, r1, r2
 8000426:	fa21 f303 	lsr.w	r3, r1, r3
 800042a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800042e:	4338      	orrs	r0, r7
 8000430:	0c01      	lsrs	r1, r0, #16
 8000432:	fbb3 f7fe 	udiv	r7, r3, lr
 8000436:	fa1f f885 	uxth.w	r8, r5
 800043a:	fb0e 3317 	mls	r3, lr, r7, r3
 800043e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000442:	fb07 f308 	mul.w	r3, r7, r8
 8000446:	428b      	cmp	r3, r1
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d907      	bls.n	800045e <__udivmoddi4+0x256>
 800044e:	1869      	adds	r1, r5, r1
 8000450:	f107 3cff 	add.w	ip, r7, #4294967295
 8000454:	d22f      	bcs.n	80004b6 <__udivmoddi4+0x2ae>
 8000456:	428b      	cmp	r3, r1
 8000458:	d92d      	bls.n	80004b6 <__udivmoddi4+0x2ae>
 800045a:	3f02      	subs	r7, #2
 800045c:	4429      	add	r1, r5
 800045e:	1acb      	subs	r3, r1, r3
 8000460:	b281      	uxth	r1, r0
 8000462:	fbb3 f0fe 	udiv	r0, r3, lr
 8000466:	fb0e 3310 	mls	r3, lr, r0, r3
 800046a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046e:	fb00 f308 	mul.w	r3, r0, r8
 8000472:	428b      	cmp	r3, r1
 8000474:	d907      	bls.n	8000486 <__udivmoddi4+0x27e>
 8000476:	1869      	adds	r1, r5, r1
 8000478:	f100 3cff 	add.w	ip, r0, #4294967295
 800047c:	d217      	bcs.n	80004ae <__udivmoddi4+0x2a6>
 800047e:	428b      	cmp	r3, r1
 8000480:	d915      	bls.n	80004ae <__udivmoddi4+0x2a6>
 8000482:	3802      	subs	r0, #2
 8000484:	4429      	add	r1, r5
 8000486:	1ac9      	subs	r1, r1, r3
 8000488:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800048c:	e73b      	b.n	8000306 <__udivmoddi4+0xfe>
 800048e:	4637      	mov	r7, r6
 8000490:	4630      	mov	r0, r6
 8000492:	e709      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000494:	4607      	mov	r7, r0
 8000496:	e6e7      	b.n	8000268 <__udivmoddi4+0x60>
 8000498:	4618      	mov	r0, r3
 800049a:	e6fb      	b.n	8000294 <__udivmoddi4+0x8c>
 800049c:	4541      	cmp	r1, r8
 800049e:	d2ab      	bcs.n	80003f8 <__udivmoddi4+0x1f0>
 80004a0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004a4:	eb69 020e 	sbc.w	r2, r9, lr
 80004a8:	3801      	subs	r0, #1
 80004aa:	4613      	mov	r3, r2
 80004ac:	e7a4      	b.n	80003f8 <__udivmoddi4+0x1f0>
 80004ae:	4660      	mov	r0, ip
 80004b0:	e7e9      	b.n	8000486 <__udivmoddi4+0x27e>
 80004b2:	4618      	mov	r0, r3
 80004b4:	e795      	b.n	80003e2 <__udivmoddi4+0x1da>
 80004b6:	4667      	mov	r7, ip
 80004b8:	e7d1      	b.n	800045e <__udivmoddi4+0x256>
 80004ba:	4681      	mov	r9, r0
 80004bc:	e77c      	b.n	80003b8 <__udivmoddi4+0x1b0>
 80004be:	3802      	subs	r0, #2
 80004c0:	442c      	add	r4, r5
 80004c2:	e747      	b.n	8000354 <__udivmoddi4+0x14c>
 80004c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c8:	442b      	add	r3, r5
 80004ca:	e72f      	b.n	800032c <__udivmoddi4+0x124>
 80004cc:	4638      	mov	r0, r7
 80004ce:	e708      	b.n	80002e2 <__udivmoddi4+0xda>
 80004d0:	4637      	mov	r7, r6
 80004d2:	e6e9      	b.n	80002a8 <__udivmoddi4+0xa0>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <Reset>:

void WriteReg(uint8_t reg, uint8_t val){
	HAL_I2C_Mem_Write(&hi2c1, (uint16_t)(LP55231_ADDR<<1), reg, 1, &val, 1, 50);
}

void Reset(void){
 80004d8:	b580      	push	{r7, lr}
 80004da:	b086      	sub	sp, #24
 80004dc:	af04      	add	r7, sp, #16
  uint8_t config = 0xFF;
 80004de:	23ff      	movs	r3, #255	; 0xff
 80004e0:	71fb      	strb	r3, [r7, #7]
  HAL_I2C_Mem_Write(&hi2c1, (uint16_t)(LP55231_ADDR<<1), RESET, 1, &config, 1, 50);
 80004e2:	2332      	movs	r3, #50	; 0x32
 80004e4:	9302      	str	r3, [sp, #8]
 80004e6:	2301      	movs	r3, #1
 80004e8:	9301      	str	r3, [sp, #4]
 80004ea:	1dfb      	adds	r3, r7, #7
 80004ec:	9300      	str	r3, [sp, #0]
 80004ee:	2301      	movs	r3, #1
 80004f0:	223d      	movs	r2, #61	; 0x3d
 80004f2:	2164      	movs	r1, #100	; 0x64
 80004f4:	4803      	ldr	r0, [pc, #12]	; (8000504 <Reset+0x2c>)
 80004f6:	f000 ff7d 	bl	80013f4 <HAL_I2C_Mem_Write>
}
 80004fa:	bf00      	nop
 80004fc:	3708      	adds	r7, #8
 80004fe:	46bd      	mov	sp, r7
 8000500:	bd80      	pop	{r7, pc}
 8000502:	bf00      	nop
 8000504:	20000028 	.word	0x20000028

08000508 <Enable>:

void Enable(void){
 8000508:	b580      	push	{r7, lr}
 800050a:	b086      	sub	sp, #24
 800050c:	af04      	add	r7, sp, #16
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
 800050e:	2201      	movs	r2, #1
 8000510:	2108      	movs	r1, #8
 8000512:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000516:	f000 fec5 	bl	80012a4 <HAL_GPIO_WritePin>
  uint8_t config = CHIP_EN;
 800051a:	2340      	movs	r3, #64	; 0x40
 800051c:	71fb      	strb	r3, [r7, #7]
  HAL_I2C_Mem_Write(&hi2c1, (uint16_t)(LP55231_ADDR<<1), ENGINE_CNTRL_1, 1, &config, 1, 50);
 800051e:	2332      	movs	r3, #50	; 0x32
 8000520:	9302      	str	r3, [sp, #8]
 8000522:	2301      	movs	r3, #1
 8000524:	9301      	str	r3, [sp, #4]
 8000526:	1dfb      	adds	r3, r7, #7
 8000528:	9300      	str	r3, [sp, #0]
 800052a:	2301      	movs	r3, #1
 800052c:	2200      	movs	r2, #0
 800052e:	2164      	movs	r1, #100	; 0x64
 8000530:	4805      	ldr	r0, [pc, #20]	; (8000548 <Enable+0x40>)
 8000532:	f000 ff5f 	bl	80013f4 <HAL_I2C_Mem_Write>
  HAL_Delay(500);
 8000536:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800053a:	f000 fc03 	bl	8000d44 <HAL_Delay>
}
 800053e:	bf00      	nop
 8000540:	3708      	adds	r7, #8
 8000542:	46bd      	mov	sp, r7
 8000544:	bd80      	pop	{r7, pc}
 8000546:	bf00      	nop
 8000548:	20000028 	.word	0x20000028

0800054c <LP55231_Init>:

void LP55231_Init(void){
 800054c:	b580      	push	{r7, lr}
 800054e:	b086      	sub	sp, #24
 8000550:	af04      	add	r7, sp, #16
  // enable internal clock & charge pump & write auto increment
  uint8_t misc_config = EN_AUTO_INCR | CP_MODE_1 | CLK_DET_EN | INT_CLK_EN;
 8000552:	2353      	movs	r3, #83	; 0x53
 8000554:	71fb      	strb	r3, [r7, #7]
  HAL_I2C_Mem_Write(&hi2c1, (uint16_t)(LP55231_ADDR<<1), MISC, 1, &misc_config, 1, 50);
 8000556:	2332      	movs	r3, #50	; 0x32
 8000558:	9302      	str	r3, [sp, #8]
 800055a:	2301      	movs	r3, #1
 800055c:	9301      	str	r3, [sp, #4]
 800055e:	1dfb      	adds	r3, r7, #7
 8000560:	9300      	str	r3, [sp, #0]
 8000562:	2301      	movs	r3, #1
 8000564:	2236      	movs	r2, #54	; 0x36
 8000566:	2164      	movs	r1, #100	; 0x64
 8000568:	4803      	ldr	r0, [pc, #12]	; (8000578 <LP55231_Init+0x2c>)
 800056a:	f000 ff43 	bl	80013f4 <HAL_I2C_Mem_Write>
}
 800056e:	bf00      	nop
 8000570:	3708      	adds	r7, #8
 8000572:	46bd      	mov	sp, r7
 8000574:	bd80      	pop	{r7, pc}
 8000576:	bf00      	nop
 8000578:	20000028 	.word	0x20000028

0800057c <SetChannelPWM>:

enum lp_err_code SetChannelPWM(uint8_t channel, uint8_t value){
 800057c:	b580      	push	{r7, lr}
 800057e:	b088      	sub	sp, #32
 8000580:	af04      	add	r7, sp, #16
 8000582:	4603      	mov	r3, r0
 8000584:	460a      	mov	r2, r1
 8000586:	71fb      	strb	r3, [r7, #7]
 8000588:	4613      	mov	r3, r2
 800058a:	71bb      	strb	r3, [r7, #6]
  if(channel >= NumChannels)
 800058c:	2209      	movs	r2, #9
 800058e:	79fb      	ldrb	r3, [r7, #7]
 8000590:	4293      	cmp	r3, r2
 8000592:	d301      	bcc.n	8000598 <SetChannelPWM+0x1c>
  {
    return LP_ERR_INVALID_CHANNEL;
 8000594:	2301      	movs	r3, #1
 8000596:	e010      	b.n	80005ba <SetChannelPWM+0x3e>
  }

  uint8_t reg = (D1_PWM) + channel;
 8000598:	79fb      	ldrb	r3, [r7, #7]
 800059a:	3316      	adds	r3, #22
 800059c:	73fb      	strb	r3, [r7, #15]

//  WriteReg(REG_D1_PWM + channel, value);
  HAL_I2C_Mem_Write(&hi2c1, (uint16_t)(LP55231_ADDR<<1), reg, 1, &value, 1, 50);
 800059e:	7bfb      	ldrb	r3, [r7, #15]
 80005a0:	b29a      	uxth	r2, r3
 80005a2:	2332      	movs	r3, #50	; 0x32
 80005a4:	9302      	str	r3, [sp, #8]
 80005a6:	2301      	movs	r3, #1
 80005a8:	9301      	str	r3, [sp, #4]
 80005aa:	1dbb      	adds	r3, r7, #6
 80005ac:	9300      	str	r3, [sp, #0]
 80005ae:	2301      	movs	r3, #1
 80005b0:	2164      	movs	r1, #100	; 0x64
 80005b2:	4804      	ldr	r0, [pc, #16]	; (80005c4 <SetChannelPWM+0x48>)
 80005b4:	f000 ff1e 	bl	80013f4 <HAL_I2C_Mem_Write>
  return LP_ERR_NONE;
 80005b8:	2300      	movs	r3, #0
}
 80005ba:	4618      	mov	r0, r3
 80005bc:	3710      	adds	r7, #16
 80005be:	46bd      	mov	sp, r7
 80005c0:	bd80      	pop	{r7, pc}
 80005c2:	bf00      	nop
 80005c4:	20000028 	.word	0x20000028

080005c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005c8:	b590      	push	{r4, r7, lr}
 80005ca:	b083      	sub	sp, #12
 80005cc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ce:	f000 fb41 	bl	8000c54 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005d2:	f000 f845 	bl	8000660 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005d6:	f000 f927 	bl	8000828 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005da:	f000 f8f5 	bl	80007c8 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80005de:	f000 f8b3 	bl	8000748 <MX_I2C1_Init>
//  HAL_StatusTypeDef chip_init_status = LP55231_Init();
//  HAL_Delay(1000);
//  HAL_StatusTypeDef op_ctrl_status = OP_Ctrl();
//  HAL_StatusTypeDef dx_pwm_status = Dx_PWM();

  Reset();
 80005e2:	f7ff ff79 	bl	80004d8 <Reset>
  Enable();
 80005e6:	f7ff ff8f 	bl	8000508 <Enable>
//  LP55231_Init();
//  HAL_Delay(500);
  LP55231_Init();
 80005ea:	f7ff ffaf 	bl	800054c <LP55231_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  sprintf(g_msg, "Hello World");
 80005ee:	4a1a      	ldr	r2, [pc, #104]	; (8000658 <main+0x90>)
 80005f0:	4b1a      	ldr	r3, [pc, #104]	; (800065c <main+0x94>)
 80005f2:	4614      	mov	r4, r2
 80005f4:	cb07      	ldmia	r3!, {r0, r1, r2}
 80005f6:	6020      	str	r0, [r4, #0]
 80005f8:	6061      	str	r1, [r4, #4]
 80005fa:	60a2      	str	r2, [r4, #8]
	  output_string(g_msg, strlen(g_msg));
 80005fc:	4816      	ldr	r0, [pc, #88]	; (8000658 <main+0x90>)
 80005fe:	f7ff fde3 	bl	80001c8 <strlen>
 8000602:	4603      	mov	r3, r0
 8000604:	4619      	mov	r1, r3
 8000606:	4814      	ldr	r0, [pc, #80]	; (8000658 <main+0x90>)
 8000608:	f000 f9b6 	bl	8000978 <output_string>
	  for(int i=0; i<NumChannels; i++){
 800060c:	2300      	movs	r3, #0
 800060e:	607b      	str	r3, [r7, #4]
 8000610:	e01c      	b.n	800064c <main+0x84>
		  for(int j=0; j<255; j=j+5){
 8000612:	2300      	movs	r3, #0
 8000614:	603b      	str	r3, [r7, #0]
 8000616:	e00d      	b.n	8000634 <main+0x6c>
			  SetChannelPWM(i, j);
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	b2db      	uxtb	r3, r3
 800061c:	683a      	ldr	r2, [r7, #0]
 800061e:	b2d2      	uxtb	r2, r2
 8000620:	4611      	mov	r1, r2
 8000622:	4618      	mov	r0, r3
 8000624:	f7ff ffaa 	bl	800057c <SetChannelPWM>
			  HAL_Delay(10);
 8000628:	200a      	movs	r0, #10
 800062a:	f000 fb8b 	bl	8000d44 <HAL_Delay>
		  for(int j=0; j<255; j=j+5){
 800062e:	683b      	ldr	r3, [r7, #0]
 8000630:	3305      	adds	r3, #5
 8000632:	603b      	str	r3, [r7, #0]
 8000634:	683b      	ldr	r3, [r7, #0]
 8000636:	2bfe      	cmp	r3, #254	; 0xfe
 8000638:	ddee      	ble.n	8000618 <main+0x50>
		  }
		  SetChannelPWM(i, 0);
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	b2db      	uxtb	r3, r3
 800063e:	2100      	movs	r1, #0
 8000640:	4618      	mov	r0, r3
 8000642:	f7ff ff9b 	bl	800057c <SetChannelPWM>
	  for(int i=0; i<NumChannels; i++){
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	3301      	adds	r3, #1
 800064a:	607b      	str	r3, [r7, #4]
 800064c:	2309      	movs	r3, #9
 800064e:	461a      	mov	r2, r3
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	4293      	cmp	r3, r2
 8000654:	dbdd      	blt.n	8000612 <main+0x4a>
	  sprintf(g_msg, "Hello World");
 8000656:	e7ca      	b.n	80005ee <main+0x26>
 8000658:	20000074 	.word	0x20000074
 800065c:	08003cb4 	.word	0x08003cb4

08000660 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b0b8      	sub	sp, #224	; 0xe0
 8000664:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000666:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800066a:	2244      	movs	r2, #68	; 0x44
 800066c:	2100      	movs	r1, #0
 800066e:	4618      	mov	r0, r3
 8000670:	f003 fb0c 	bl	8003c8c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000674:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000678:	2200      	movs	r2, #0
 800067a:	601a      	str	r2, [r3, #0]
 800067c:	605a      	str	r2, [r3, #4]
 800067e:	609a      	str	r2, [r3, #8]
 8000680:	60da      	str	r2, [r3, #12]
 8000682:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000684:	463b      	mov	r3, r7
 8000686:	2288      	movs	r2, #136	; 0x88
 8000688:	2100      	movs	r1, #0
 800068a:	4618      	mov	r0, r3
 800068c:	f003 fafe 	bl	8003c8c <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000690:	2301      	movs	r3, #1
 8000692:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000696:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800069a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800069e:	2302      	movs	r3, #2
 80006a0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006a4:	2303      	movs	r3, #3
 80006a6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 80006aa:	2301      	movs	r3, #1
 80006ac:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 20;
 80006b0:	2314      	movs	r3, #20
 80006b2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80006b6:	2307      	movs	r3, #7
 80006b8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80006bc:	2302      	movs	r3, #2
 80006be:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80006c2:	2302      	movs	r3, #2
 80006c4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006c8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80006cc:	4618      	mov	r0, r3
 80006ce:	f001 fa69 	bl	8001ba4 <HAL_RCC_OscConfig>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d001      	beq.n	80006dc <SystemClock_Config+0x7c>
  {
    Error_Handler();
 80006d8:	f000 f96a 	bl	80009b0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006dc:	230f      	movs	r3, #15
 80006de:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006e2:	2303      	movs	r3, #3
 80006e4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006e8:	2300      	movs	r3, #0
 80006ea:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006ee:	2300      	movs	r3, #0
 80006f0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006f4:	2300      	movs	r3, #0
 80006f6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80006fa:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80006fe:	2104      	movs	r1, #4
 8000700:	4618      	mov	r0, r3
 8000702:	f001 fe35 	bl	8002370 <HAL_RCC_ClockConfig>
 8000706:	4603      	mov	r3, r0
 8000708:	2b00      	cmp	r3, #0
 800070a:	d001      	beq.n	8000710 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 800070c:	f000 f950 	bl	80009b0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1;
 8000710:	2342      	movs	r3, #66	; 0x42
 8000712:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000714:	2300      	movs	r3, #0
 8000716:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000718:	2300      	movs	r3, #0
 800071a:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800071c:	463b      	mov	r3, r7
 800071e:	4618      	mov	r0, r3
 8000720:	f002 f82a 	bl	8002778 <HAL_RCCEx_PeriphCLKConfig>
 8000724:	4603      	mov	r3, r0
 8000726:	2b00      	cmp	r3, #0
 8000728:	d001      	beq.n	800072e <SystemClock_Config+0xce>
  {
    Error_Handler();
 800072a:	f000 f941 	bl	80009b0 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800072e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000732:	f001 f9e1 	bl	8001af8 <HAL_PWREx_ControlVoltageScaling>
 8000736:	4603      	mov	r3, r0
 8000738:	2b00      	cmp	r3, #0
 800073a:	d001      	beq.n	8000740 <SystemClock_Config+0xe0>
  {
    Error_Handler();
 800073c:	f000 f938 	bl	80009b0 <Error_Handler>
  }
}
 8000740:	bf00      	nop
 8000742:	37e0      	adds	r7, #224	; 0xe0
 8000744:	46bd      	mov	sp, r7
 8000746:	bd80      	pop	{r7, pc}

08000748 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800074c:	4b1b      	ldr	r3, [pc, #108]	; (80007bc <MX_I2C1_Init+0x74>)
 800074e:	4a1c      	ldr	r2, [pc, #112]	; (80007c0 <MX_I2C1_Init+0x78>)
 8000750:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 8000752:	4b1a      	ldr	r3, [pc, #104]	; (80007bc <MX_I2C1_Init+0x74>)
 8000754:	4a1b      	ldr	r2, [pc, #108]	; (80007c4 <MX_I2C1_Init+0x7c>)
 8000756:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000758:	4b18      	ldr	r3, [pc, #96]	; (80007bc <MX_I2C1_Init+0x74>)
 800075a:	2200      	movs	r2, #0
 800075c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800075e:	4b17      	ldr	r3, [pc, #92]	; (80007bc <MX_I2C1_Init+0x74>)
 8000760:	2201      	movs	r2, #1
 8000762:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000764:	4b15      	ldr	r3, [pc, #84]	; (80007bc <MX_I2C1_Init+0x74>)
 8000766:	2200      	movs	r2, #0
 8000768:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800076a:	4b14      	ldr	r3, [pc, #80]	; (80007bc <MX_I2C1_Init+0x74>)
 800076c:	2200      	movs	r2, #0
 800076e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000770:	4b12      	ldr	r3, [pc, #72]	; (80007bc <MX_I2C1_Init+0x74>)
 8000772:	2200      	movs	r2, #0
 8000774:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000776:	4b11      	ldr	r3, [pc, #68]	; (80007bc <MX_I2C1_Init+0x74>)
 8000778:	2200      	movs	r2, #0
 800077a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800077c:	4b0f      	ldr	r3, [pc, #60]	; (80007bc <MX_I2C1_Init+0x74>)
 800077e:	2200      	movs	r2, #0
 8000780:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000782:	480e      	ldr	r0, [pc, #56]	; (80007bc <MX_I2C1_Init+0x74>)
 8000784:	f000 fda6 	bl	80012d4 <HAL_I2C_Init>
 8000788:	4603      	mov	r3, r0
 800078a:	2b00      	cmp	r3, #0
 800078c:	d001      	beq.n	8000792 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800078e:	f000 f90f 	bl	80009b0 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000792:	2100      	movs	r1, #0
 8000794:	4809      	ldr	r0, [pc, #36]	; (80007bc <MX_I2C1_Init+0x74>)
 8000796:	f001 f909 	bl	80019ac <HAL_I2CEx_ConfigAnalogFilter>
 800079a:	4603      	mov	r3, r0
 800079c:	2b00      	cmp	r3, #0
 800079e:	d001      	beq.n	80007a4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80007a0:	f000 f906 	bl	80009b0 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80007a4:	2100      	movs	r1, #0
 80007a6:	4805      	ldr	r0, [pc, #20]	; (80007bc <MX_I2C1_Init+0x74>)
 80007a8:	f001 f94b 	bl	8001a42 <HAL_I2CEx_ConfigDigitalFilter>
 80007ac:	4603      	mov	r3, r0
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d001      	beq.n	80007b6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80007b2:	f000 f8fd 	bl	80009b0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80007b6:	bf00      	nop
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	bf00      	nop
 80007bc:	20000028 	.word	0x20000028
 80007c0:	40005400 	.word	0x40005400
 80007c4:	10909cec 	.word	0x10909cec

080007c8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007cc:	4b14      	ldr	r3, [pc, #80]	; (8000820 <MX_USART2_UART_Init+0x58>)
 80007ce:	4a15      	ldr	r2, [pc, #84]	; (8000824 <MX_USART2_UART_Init+0x5c>)
 80007d0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007d2:	4b13      	ldr	r3, [pc, #76]	; (8000820 <MX_USART2_UART_Init+0x58>)
 80007d4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007d8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007da:	4b11      	ldr	r3, [pc, #68]	; (8000820 <MX_USART2_UART_Init+0x58>)
 80007dc:	2200      	movs	r2, #0
 80007de:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007e0:	4b0f      	ldr	r3, [pc, #60]	; (8000820 <MX_USART2_UART_Init+0x58>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007e6:	4b0e      	ldr	r3, [pc, #56]	; (8000820 <MX_USART2_UART_Init+0x58>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007ec:	4b0c      	ldr	r3, [pc, #48]	; (8000820 <MX_USART2_UART_Init+0x58>)
 80007ee:	220c      	movs	r2, #12
 80007f0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007f2:	4b0b      	ldr	r3, [pc, #44]	; (8000820 <MX_USART2_UART_Init+0x58>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007f8:	4b09      	ldr	r3, [pc, #36]	; (8000820 <MX_USART2_UART_Init+0x58>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007fe:	4b08      	ldr	r3, [pc, #32]	; (8000820 <MX_USART2_UART_Init+0x58>)
 8000800:	2200      	movs	r2, #0
 8000802:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000804:	4b06      	ldr	r3, [pc, #24]	; (8000820 <MX_USART2_UART_Init+0x58>)
 8000806:	2200      	movs	r2, #0
 8000808:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800080a:	4805      	ldr	r0, [pc, #20]	; (8000820 <MX_USART2_UART_Init+0x58>)
 800080c:	f002 fc64 	bl	80030d8 <HAL_UART_Init>
 8000810:	4603      	mov	r3, r0
 8000812:	2b00      	cmp	r3, #0
 8000814:	d001      	beq.n	800081a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000816:	f000 f8cb 	bl	80009b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800081a:	bf00      	nop
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	200000a8 	.word	0x200000a8
 8000824:	40004400 	.word	0x40004400

08000828 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b08c      	sub	sp, #48	; 0x30
 800082c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800082e:	f107 031c 	add.w	r3, r7, #28
 8000832:	2200      	movs	r2, #0
 8000834:	601a      	str	r2, [r3, #0]
 8000836:	605a      	str	r2, [r3, #4]
 8000838:	609a      	str	r2, [r3, #8]
 800083a:	60da      	str	r2, [r3, #12]
 800083c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800083e:	4b4b      	ldr	r3, [pc, #300]	; (800096c <MX_GPIO_Init+0x144>)
 8000840:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000842:	4a4a      	ldr	r2, [pc, #296]	; (800096c <MX_GPIO_Init+0x144>)
 8000844:	f043 0304 	orr.w	r3, r3, #4
 8000848:	64d3      	str	r3, [r2, #76]	; 0x4c
 800084a:	4b48      	ldr	r3, [pc, #288]	; (800096c <MX_GPIO_Init+0x144>)
 800084c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800084e:	f003 0304 	and.w	r3, r3, #4
 8000852:	61bb      	str	r3, [r7, #24]
 8000854:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000856:	4b45      	ldr	r3, [pc, #276]	; (800096c <MX_GPIO_Init+0x144>)
 8000858:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800085a:	4a44      	ldr	r2, [pc, #272]	; (800096c <MX_GPIO_Init+0x144>)
 800085c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000860:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000862:	4b42      	ldr	r3, [pc, #264]	; (800096c <MX_GPIO_Init+0x144>)
 8000864:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000866:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800086a:	617b      	str	r3, [r7, #20]
 800086c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800086e:	4b3f      	ldr	r3, [pc, #252]	; (800096c <MX_GPIO_Init+0x144>)
 8000870:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000872:	4a3e      	ldr	r2, [pc, #248]	; (800096c <MX_GPIO_Init+0x144>)
 8000874:	f043 0301 	orr.w	r3, r3, #1
 8000878:	64d3      	str	r3, [r2, #76]	; 0x4c
 800087a:	4b3c      	ldr	r3, [pc, #240]	; (800096c <MX_GPIO_Init+0x144>)
 800087c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800087e:	f003 0301 	and.w	r3, r3, #1
 8000882:	613b      	str	r3, [r7, #16]
 8000884:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000886:	4b39      	ldr	r3, [pc, #228]	; (800096c <MX_GPIO_Init+0x144>)
 8000888:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800088a:	4a38      	ldr	r2, [pc, #224]	; (800096c <MX_GPIO_Init+0x144>)
 800088c:	f043 0302 	orr.w	r3, r3, #2
 8000890:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000892:	4b36      	ldr	r3, [pc, #216]	; (800096c <MX_GPIO_Init+0x144>)
 8000894:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000896:	f003 0302 	and.w	r3, r3, #2
 800089a:	60fb      	str	r3, [r7, #12]
 800089c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800089e:	4b33      	ldr	r3, [pc, #204]	; (800096c <MX_GPIO_Init+0x144>)
 80008a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008a2:	4a32      	ldr	r2, [pc, #200]	; (800096c <MX_GPIO_Init+0x144>)
 80008a4:	f043 0310 	orr.w	r3, r3, #16
 80008a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008aa:	4b30      	ldr	r3, [pc, #192]	; (800096c <MX_GPIO_Init+0x144>)
 80008ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ae:	f003 0310 	and.w	r3, r3, #16
 80008b2:	60bb      	str	r3, [r7, #8]
 80008b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008b6:	4b2d      	ldr	r3, [pc, #180]	; (800096c <MX_GPIO_Init+0x144>)
 80008b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ba:	4a2c      	ldr	r2, [pc, #176]	; (800096c <MX_GPIO_Init+0x144>)
 80008bc:	f043 0308 	orr.w	r3, r3, #8
 80008c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008c2:	4b2a      	ldr	r3, [pc, #168]	; (800096c <MX_GPIO_Init+0x144>)
 80008c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008c6:	f003 0308 	and.w	r3, r3, #8
 80008ca:	607b      	str	r3, [r7, #4]
 80008cc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 80008ce:	2200      	movs	r2, #0
 80008d0:	2108      	movs	r1, #8
 80008d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008d6:	f000 fce5 	bl	80012a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD_R_GPIO_Port, LD_R_Pin, GPIO_PIN_RESET);
 80008da:	2200      	movs	r2, #0
 80008dc:	2104      	movs	r1, #4
 80008de:	4824      	ldr	r0, [pc, #144]	; (8000970 <MX_GPIO_Init+0x148>)
 80008e0:	f000 fce0 	bl	80012a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD_G_GPIO_Port, LD_G_Pin, GPIO_PIN_RESET);
 80008e4:	2200      	movs	r2, #0
 80008e6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008ea:	4822      	ldr	r0, [pc, #136]	; (8000974 <MX_GPIO_Init+0x14c>)
 80008ec:	f000 fcda 	bl	80012a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : JOY_CENTER_Pin JOY_LEFT_Pin JOY_RIGHT_Pin JOY_DOWN_Pin */
  GPIO_InitStruct.Pin = JOY_CENTER_Pin|JOY_LEFT_Pin|JOY_RIGHT_Pin|JOY_DOWN_Pin;
 80008f0:	2327      	movs	r3, #39	; 0x27
 80008f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008f4:	2300      	movs	r3, #0
 80008f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80008f8:	2302      	movs	r3, #2
 80008fa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008fc:	f107 031c 	add.w	r3, r7, #28
 8000900:	4619      	mov	r1, r3
 8000902:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000906:	f000 fb25 	bl	8000f54 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 800090a:	2308      	movs	r3, #8
 800090c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800090e:	2301      	movs	r3, #1
 8000910:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000912:	2300      	movs	r3, #0
 8000914:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000916:	2300      	movs	r3, #0
 8000918:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800091a:	f107 031c 	add.w	r3, r7, #28
 800091e:	4619      	mov	r1, r3
 8000920:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000924:	f000 fb16 	bl	8000f54 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD_R_Pin */
  GPIO_InitStruct.Pin = LD_R_Pin;
 8000928:	2304      	movs	r3, #4
 800092a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800092c:	2301      	movs	r3, #1
 800092e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000930:	2301      	movs	r3, #1
 8000932:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000934:	2303      	movs	r3, #3
 8000936:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD_R_GPIO_Port, &GPIO_InitStruct);
 8000938:	f107 031c 	add.w	r3, r7, #28
 800093c:	4619      	mov	r1, r3
 800093e:	480c      	ldr	r0, [pc, #48]	; (8000970 <MX_GPIO_Init+0x148>)
 8000940:	f000 fb08 	bl	8000f54 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD_G_Pin */
  GPIO_InitStruct.Pin = LD_G_Pin;
 8000944:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000948:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800094a:	2301      	movs	r3, #1
 800094c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800094e:	2301      	movs	r3, #1
 8000950:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000952:	2303      	movs	r3, #3
 8000954:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD_G_GPIO_Port, &GPIO_InitStruct);
 8000956:	f107 031c 	add.w	r3, r7, #28
 800095a:	4619      	mov	r1, r3
 800095c:	4805      	ldr	r0, [pc, #20]	; (8000974 <MX_GPIO_Init+0x14c>)
 800095e:	f000 faf9 	bl	8000f54 <HAL_GPIO_Init>

}
 8000962:	bf00      	nop
 8000964:	3730      	adds	r7, #48	; 0x30
 8000966:	46bd      	mov	sp, r7
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	40021000 	.word	0x40021000
 8000970:	48000400 	.word	0x48000400
 8000974:	48001000 	.word	0x48001000

08000978 <output_string>:
* @param output: The message to transmit.
* @param size: Size of message.
* @retval None
*/
void output_string(char output[], int size)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b082      	sub	sp, #8
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
 8000980:	6039      	str	r1, [r7, #0]
  HAL_UART_Transmit(&huart2, (uint8_t *)NEWLINE_STRING, sizeof(NEWLINE_STRING), 1000);
 8000982:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000986:	2203      	movs	r2, #3
 8000988:	4907      	ldr	r1, [pc, #28]	; (80009a8 <output_string+0x30>)
 800098a:	4808      	ldr	r0, [pc, #32]	; (80009ac <output_string+0x34>)
 800098c:	f002 fbf2 	bl	8003174 <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart2, (uint8_t *)output, size, 1000);
 8000990:	683b      	ldr	r3, [r7, #0]
 8000992:	b29a      	uxth	r2, r3
 8000994:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000998:	6879      	ldr	r1, [r7, #4]
 800099a:	4804      	ldr	r0, [pc, #16]	; (80009ac <output_string+0x34>)
 800099c:	f002 fbea 	bl	8003174 <HAL_UART_Transmit>
}
 80009a0:	bf00      	nop
 80009a2:	3708      	adds	r7, #8
 80009a4:	46bd      	mov	sp, r7
 80009a6:	bd80      	pop	{r7, pc}
 80009a8:	08003cc0 	.word	0x08003cc0
 80009ac:	200000a8 	.word	0x200000a8

080009b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009b0:	b480      	push	{r7}
 80009b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80009b4:	bf00      	nop
 80009b6:	46bd      	mov	sp, r7
 80009b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009bc:	4770      	bx	lr
	...

080009c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009c0:	b480      	push	{r7}
 80009c2:	b083      	sub	sp, #12
 80009c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009c6:	4b0f      	ldr	r3, [pc, #60]	; (8000a04 <HAL_MspInit+0x44>)
 80009c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009ca:	4a0e      	ldr	r2, [pc, #56]	; (8000a04 <HAL_MspInit+0x44>)
 80009cc:	f043 0301 	orr.w	r3, r3, #1
 80009d0:	6613      	str	r3, [r2, #96]	; 0x60
 80009d2:	4b0c      	ldr	r3, [pc, #48]	; (8000a04 <HAL_MspInit+0x44>)
 80009d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009d6:	f003 0301 	and.w	r3, r3, #1
 80009da:	607b      	str	r3, [r7, #4]
 80009dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009de:	4b09      	ldr	r3, [pc, #36]	; (8000a04 <HAL_MspInit+0x44>)
 80009e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009e2:	4a08      	ldr	r2, [pc, #32]	; (8000a04 <HAL_MspInit+0x44>)
 80009e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009e8:	6593      	str	r3, [r2, #88]	; 0x58
 80009ea:	4b06      	ldr	r3, [pc, #24]	; (8000a04 <HAL_MspInit+0x44>)
 80009ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009f2:	603b      	str	r3, [r7, #0]
 80009f4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009f6:	bf00      	nop
 80009f8:	370c      	adds	r7, #12
 80009fa:	46bd      	mov	sp, r7
 80009fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop
 8000a04:	40021000 	.word	0x40021000

08000a08 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b08a      	sub	sp, #40	; 0x28
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a10:	f107 0314 	add.w	r3, r7, #20
 8000a14:	2200      	movs	r2, #0
 8000a16:	601a      	str	r2, [r3, #0]
 8000a18:	605a      	str	r2, [r3, #4]
 8000a1a:	609a      	str	r2, [r3, #8]
 8000a1c:	60da      	str	r2, [r3, #12]
 8000a1e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	4a17      	ldr	r2, [pc, #92]	; (8000a84 <HAL_I2C_MspInit+0x7c>)
 8000a26:	4293      	cmp	r3, r2
 8000a28:	d127      	bne.n	8000a7a <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a2a:	4b17      	ldr	r3, [pc, #92]	; (8000a88 <HAL_I2C_MspInit+0x80>)
 8000a2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a2e:	4a16      	ldr	r2, [pc, #88]	; (8000a88 <HAL_I2C_MspInit+0x80>)
 8000a30:	f043 0302 	orr.w	r3, r3, #2
 8000a34:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a36:	4b14      	ldr	r3, [pc, #80]	; (8000a88 <HAL_I2C_MspInit+0x80>)
 8000a38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a3a:	f003 0302 	and.w	r3, r3, #2
 8000a3e:	613b      	str	r3, [r7, #16]
 8000a40:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000a42:	23c0      	movs	r3, #192	; 0xc0
 8000a44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a46:	2312      	movs	r3, #18
 8000a48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a4a:	2301      	movs	r3, #1
 8000a4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a4e:	2303      	movs	r3, #3
 8000a50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a52:	2304      	movs	r3, #4
 8000a54:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a56:	f107 0314 	add.w	r3, r7, #20
 8000a5a:	4619      	mov	r1, r3
 8000a5c:	480b      	ldr	r0, [pc, #44]	; (8000a8c <HAL_I2C_MspInit+0x84>)
 8000a5e:	f000 fa79 	bl	8000f54 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a62:	4b09      	ldr	r3, [pc, #36]	; (8000a88 <HAL_I2C_MspInit+0x80>)
 8000a64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a66:	4a08      	ldr	r2, [pc, #32]	; (8000a88 <HAL_I2C_MspInit+0x80>)
 8000a68:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a6c:	6593      	str	r3, [r2, #88]	; 0x58
 8000a6e:	4b06      	ldr	r3, [pc, #24]	; (8000a88 <HAL_I2C_MspInit+0x80>)
 8000a70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a72:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a76:	60fb      	str	r3, [r7, #12]
 8000a78:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000a7a:	bf00      	nop
 8000a7c:	3728      	adds	r7, #40	; 0x28
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop
 8000a84:	40005400 	.word	0x40005400
 8000a88:	40021000 	.word	0x40021000
 8000a8c:	48000400 	.word	0x48000400

08000a90 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b08a      	sub	sp, #40	; 0x28
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a98:	f107 0314 	add.w	r3, r7, #20
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	601a      	str	r2, [r3, #0]
 8000aa0:	605a      	str	r2, [r3, #4]
 8000aa2:	609a      	str	r2, [r3, #8]
 8000aa4:	60da      	str	r2, [r3, #12]
 8000aa6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	4a1f      	ldr	r2, [pc, #124]	; (8000b2c <HAL_UART_MspInit+0x9c>)
 8000aae:	4293      	cmp	r3, r2
 8000ab0:	d137      	bne.n	8000b22 <HAL_UART_MspInit+0x92>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ab2:	4b1f      	ldr	r3, [pc, #124]	; (8000b30 <HAL_UART_MspInit+0xa0>)
 8000ab4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ab6:	4a1e      	ldr	r2, [pc, #120]	; (8000b30 <HAL_UART_MspInit+0xa0>)
 8000ab8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000abc:	6593      	str	r3, [r2, #88]	; 0x58
 8000abe:	4b1c      	ldr	r3, [pc, #112]	; (8000b30 <HAL_UART_MspInit+0xa0>)
 8000ac0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ac2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ac6:	613b      	str	r3, [r7, #16]
 8000ac8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000aca:	4b19      	ldr	r3, [pc, #100]	; (8000b30 <HAL_UART_MspInit+0xa0>)
 8000acc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ace:	4a18      	ldr	r2, [pc, #96]	; (8000b30 <HAL_UART_MspInit+0xa0>)
 8000ad0:	f043 0308 	orr.w	r3, r3, #8
 8000ad4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ad6:	4b16      	ldr	r3, [pc, #88]	; (8000b30 <HAL_UART_MspInit+0xa0>)
 8000ad8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ada:	f003 0308 	and.w	r3, r3, #8
 8000ade:	60fb      	str	r3, [r7, #12]
 8000ae0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin;
 8000ae2:	2320      	movs	r3, #32
 8000ae4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ae6:	2302      	movs	r3, #2
 8000ae8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000aea:	2301      	movs	r3, #1
 8000aec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aee:	2303      	movs	r3, #3
 8000af0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000af2:	2307      	movs	r3, #7
 8000af4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(USART_TX_GPIO_Port, &GPIO_InitStruct);
 8000af6:	f107 0314 	add.w	r3, r7, #20
 8000afa:	4619      	mov	r1, r3
 8000afc:	480d      	ldr	r0, [pc, #52]	; (8000b34 <HAL_UART_MspInit+0xa4>)
 8000afe:	f000 fa29 	bl	8000f54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000b02:	2340      	movs	r3, #64	; 0x40
 8000b04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b06:	2302      	movs	r3, #2
 8000b08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b0e:	2303      	movs	r3, #3
 8000b10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b12:	2307      	movs	r3, #7
 8000b14:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b16:	f107 0314 	add.w	r3, r7, #20
 8000b1a:	4619      	mov	r1, r3
 8000b1c:	4805      	ldr	r0, [pc, #20]	; (8000b34 <HAL_UART_MspInit+0xa4>)
 8000b1e:	f000 fa19 	bl	8000f54 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b22:	bf00      	nop
 8000b24:	3728      	adds	r7, #40	; 0x28
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	40004400 	.word	0x40004400
 8000b30:	40021000 	.word	0x40021000
 8000b34:	48000c00 	.word	0x48000c00

08000b38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000b3c:	bf00      	nop
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b44:	4770      	bx	lr

08000b46 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b46:	b480      	push	{r7}
 8000b48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b4a:	e7fe      	b.n	8000b4a <HardFault_Handler+0x4>

08000b4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b50:	e7fe      	b.n	8000b50 <MemManage_Handler+0x4>

08000b52 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b52:	b480      	push	{r7}
 8000b54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b56:	e7fe      	b.n	8000b56 <BusFault_Handler+0x4>

08000b58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b5c:	e7fe      	b.n	8000b5c <UsageFault_Handler+0x4>

08000b5e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b5e:	b480      	push	{r7}
 8000b60:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b62:	bf00      	nop
 8000b64:	46bd      	mov	sp, r7
 8000b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6a:	4770      	bx	lr

08000b6c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b70:	bf00      	nop
 8000b72:	46bd      	mov	sp, r7
 8000b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b78:	4770      	bx	lr

08000b7a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b7a:	b480      	push	{r7}
 8000b7c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b7e:	bf00      	nop
 8000b80:	46bd      	mov	sp, r7
 8000b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b86:	4770      	bx	lr

08000b88 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b8c:	f000 f8bc 	bl	8000d08 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b90:	bf00      	nop
 8000b92:	bd80      	pop	{r7, pc}

08000b94 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b98:	4b17      	ldr	r3, [pc, #92]	; (8000bf8 <SystemInit+0x64>)
 8000b9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b9e:	4a16      	ldr	r2, [pc, #88]	; (8000bf8 <SystemInit+0x64>)
 8000ba0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ba4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000ba8:	4b14      	ldr	r3, [pc, #80]	; (8000bfc <SystemInit+0x68>)
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	4a13      	ldr	r2, [pc, #76]	; (8000bfc <SystemInit+0x68>)
 8000bae:	f043 0301 	orr.w	r3, r3, #1
 8000bb2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000bb4:	4b11      	ldr	r3, [pc, #68]	; (8000bfc <SystemInit+0x68>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000bba:	4b10      	ldr	r3, [pc, #64]	; (8000bfc <SystemInit+0x68>)
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	4a0f      	ldr	r2, [pc, #60]	; (8000bfc <SystemInit+0x68>)
 8000bc0:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000bc4:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000bc8:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000bca:	4b0c      	ldr	r3, [pc, #48]	; (8000bfc <SystemInit+0x68>)
 8000bcc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000bd0:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000bd2:	4b0a      	ldr	r3, [pc, #40]	; (8000bfc <SystemInit+0x68>)
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	4a09      	ldr	r2, [pc, #36]	; (8000bfc <SystemInit+0x68>)
 8000bd8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000bdc:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000bde:	4b07      	ldr	r3, [pc, #28]	; (8000bfc <SystemInit+0x68>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000be4:	4b04      	ldr	r3, [pc, #16]	; (8000bf8 <SystemInit+0x64>)
 8000be6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000bea:	609a      	str	r2, [r3, #8]
#endif
}
 8000bec:	bf00      	nop
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop
 8000bf8:	e000ed00 	.word	0xe000ed00
 8000bfc:	40021000 	.word	0x40021000

08000c00 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000c00:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c38 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000c04:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000c06:	e003      	b.n	8000c10 <LoopCopyDataInit>

08000c08 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000c08:	4b0c      	ldr	r3, [pc, #48]	; (8000c3c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000c0a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000c0c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000c0e:	3104      	adds	r1, #4

08000c10 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000c10:	480b      	ldr	r0, [pc, #44]	; (8000c40 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000c12:	4b0c      	ldr	r3, [pc, #48]	; (8000c44 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000c14:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000c16:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000c18:	d3f6      	bcc.n	8000c08 <CopyDataInit>
	ldr	r2, =_sbss
 8000c1a:	4a0b      	ldr	r2, [pc, #44]	; (8000c48 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000c1c:	e002      	b.n	8000c24 <LoopFillZerobss>

08000c1e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000c1e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000c20:	f842 3b04 	str.w	r3, [r2], #4

08000c24 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000c24:	4b09      	ldr	r3, [pc, #36]	; (8000c4c <LoopForever+0x16>)
	cmp	r2, r3
 8000c26:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000c28:	d3f9      	bcc.n	8000c1e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000c2a:	f7ff ffb3 	bl	8000b94 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c2e:	f003 f809 	bl	8003c44 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c32:	f7ff fcc9 	bl	80005c8 <main>

08000c36 <LoopForever>:

LoopForever:
    b LoopForever
 8000c36:	e7fe      	b.n	8000c36 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000c38:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8000c3c:	08003d1c 	.word	0x08003d1c
	ldr	r0, =_sdata
 8000c40:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000c44:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8000c48:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8000c4c:	2000012c 	.word	0x2000012c

08000c50 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c50:	e7fe      	b.n	8000c50 <ADC1_2_IRQHandler>
	...

08000c54 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b082      	sub	sp, #8
 8000c58:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c5e:	4b0c      	ldr	r3, [pc, #48]	; (8000c90 <HAL_Init+0x3c>)
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	4a0b      	ldr	r2, [pc, #44]	; (8000c90 <HAL_Init+0x3c>)
 8000c64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c68:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c6a:	2003      	movs	r0, #3
 8000c6c:	f000 f93e 	bl	8000eec <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c70:	2000      	movs	r0, #0
 8000c72:	f000 f80f 	bl	8000c94 <HAL_InitTick>
 8000c76:	4603      	mov	r3, r0
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d002      	beq.n	8000c82 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000c7c:	2301      	movs	r3, #1
 8000c7e:	71fb      	strb	r3, [r7, #7]
 8000c80:	e001      	b.n	8000c86 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000c82:	f7ff fe9d 	bl	80009c0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c86:	79fb      	ldrb	r3, [r7, #7]
}
 8000c88:	4618      	mov	r0, r3
 8000c8a:	3708      	adds	r7, #8
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bd80      	pop	{r7, pc}
 8000c90:	40022000 	.word	0x40022000

08000c94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b084      	sub	sp, #16
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000ca0:	4b16      	ldr	r3, [pc, #88]	; (8000cfc <HAL_InitTick+0x68>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d022      	beq.n	8000cee <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000ca8:	4b15      	ldr	r3, [pc, #84]	; (8000d00 <HAL_InitTick+0x6c>)
 8000caa:	681a      	ldr	r2, [r3, #0]
 8000cac:	4b13      	ldr	r3, [pc, #76]	; (8000cfc <HAL_InitTick+0x68>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000cb4:	fbb1 f3f3 	udiv	r3, r1, r3
 8000cb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	f000 f93c 	bl	8000f3a <HAL_SYSTICK_Config>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d10f      	bne.n	8000ce8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	2b0f      	cmp	r3, #15
 8000ccc:	d809      	bhi.n	8000ce2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cce:	2200      	movs	r2, #0
 8000cd0:	6879      	ldr	r1, [r7, #4]
 8000cd2:	f04f 30ff 	mov.w	r0, #4294967295
 8000cd6:	f000 f914 	bl	8000f02 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000cda:	4a0a      	ldr	r2, [pc, #40]	; (8000d04 <HAL_InitTick+0x70>)
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	6013      	str	r3, [r2, #0]
 8000ce0:	e007      	b.n	8000cf2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000ce2:	2301      	movs	r3, #1
 8000ce4:	73fb      	strb	r3, [r7, #15]
 8000ce6:	e004      	b.n	8000cf2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000ce8:	2301      	movs	r3, #1
 8000cea:	73fb      	strb	r3, [r7, #15]
 8000cec:	e001      	b.n	8000cf2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000cee:	2301      	movs	r3, #1
 8000cf0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000cf2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	3710      	adds	r7, #16
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bd80      	pop	{r7, pc}
 8000cfc:	20000008 	.word	0x20000008
 8000d00:	20000000 	.word	0x20000000
 8000d04:	20000004 	.word	0x20000004

08000d08 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d0c:	4b05      	ldr	r3, [pc, #20]	; (8000d24 <HAL_IncTick+0x1c>)
 8000d0e:	681a      	ldr	r2, [r3, #0]
 8000d10:	4b05      	ldr	r3, [pc, #20]	; (8000d28 <HAL_IncTick+0x20>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	4413      	add	r3, r2
 8000d16:	4a03      	ldr	r2, [pc, #12]	; (8000d24 <HAL_IncTick+0x1c>)
 8000d18:	6013      	str	r3, [r2, #0]
}
 8000d1a:	bf00      	nop
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d22:	4770      	bx	lr
 8000d24:	20000128 	.word	0x20000128
 8000d28:	20000008 	.word	0x20000008

08000d2c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0
  return uwTick;
 8000d30:	4b03      	ldr	r3, [pc, #12]	; (8000d40 <HAL_GetTick+0x14>)
 8000d32:	681b      	ldr	r3, [r3, #0]
}
 8000d34:	4618      	mov	r0, r3
 8000d36:	46bd      	mov	sp, r7
 8000d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3c:	4770      	bx	lr
 8000d3e:	bf00      	nop
 8000d40:	20000128 	.word	0x20000128

08000d44 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b084      	sub	sp, #16
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d4c:	f7ff ffee 	bl	8000d2c <HAL_GetTick>
 8000d50:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d56:	68fb      	ldr	r3, [r7, #12]
 8000d58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d5c:	d004      	beq.n	8000d68 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d5e:	4b09      	ldr	r3, [pc, #36]	; (8000d84 <HAL_Delay+0x40>)
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	68fa      	ldr	r2, [r7, #12]
 8000d64:	4413      	add	r3, r2
 8000d66:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000d68:	bf00      	nop
 8000d6a:	f7ff ffdf 	bl	8000d2c <HAL_GetTick>
 8000d6e:	4602      	mov	r2, r0
 8000d70:	68bb      	ldr	r3, [r7, #8]
 8000d72:	1ad3      	subs	r3, r2, r3
 8000d74:	68fa      	ldr	r2, [r7, #12]
 8000d76:	429a      	cmp	r2, r3
 8000d78:	d8f7      	bhi.n	8000d6a <HAL_Delay+0x26>
  {
  }
}
 8000d7a:	bf00      	nop
 8000d7c:	3710      	adds	r7, #16
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	20000008 	.word	0x20000008

08000d88 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	b085      	sub	sp, #20
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	f003 0307 	and.w	r3, r3, #7
 8000d96:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d98:	4b0c      	ldr	r3, [pc, #48]	; (8000dcc <__NVIC_SetPriorityGrouping+0x44>)
 8000d9a:	68db      	ldr	r3, [r3, #12]
 8000d9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d9e:	68ba      	ldr	r2, [r7, #8]
 8000da0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000da4:	4013      	ands	r3, r2
 8000da6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000dac:	68bb      	ldr	r3, [r7, #8]
 8000dae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000db0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000db4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000db8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dba:	4a04      	ldr	r2, [pc, #16]	; (8000dcc <__NVIC_SetPriorityGrouping+0x44>)
 8000dbc:	68bb      	ldr	r3, [r7, #8]
 8000dbe:	60d3      	str	r3, [r2, #12]
}
 8000dc0:	bf00      	nop
 8000dc2:	3714      	adds	r7, #20
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dca:	4770      	bx	lr
 8000dcc:	e000ed00 	.word	0xe000ed00

08000dd0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000dd4:	4b04      	ldr	r3, [pc, #16]	; (8000de8 <__NVIC_GetPriorityGrouping+0x18>)
 8000dd6:	68db      	ldr	r3, [r3, #12]
 8000dd8:	0a1b      	lsrs	r3, r3, #8
 8000dda:	f003 0307 	and.w	r3, r3, #7
}
 8000dde:	4618      	mov	r0, r3
 8000de0:	46bd      	mov	sp, r7
 8000de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de6:	4770      	bx	lr
 8000de8:	e000ed00 	.word	0xe000ed00

08000dec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000dec:	b480      	push	{r7}
 8000dee:	b083      	sub	sp, #12
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	4603      	mov	r3, r0
 8000df4:	6039      	str	r1, [r7, #0]
 8000df6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000df8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	db0a      	blt.n	8000e16 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e00:	683b      	ldr	r3, [r7, #0]
 8000e02:	b2da      	uxtb	r2, r3
 8000e04:	490c      	ldr	r1, [pc, #48]	; (8000e38 <__NVIC_SetPriority+0x4c>)
 8000e06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e0a:	0112      	lsls	r2, r2, #4
 8000e0c:	b2d2      	uxtb	r2, r2
 8000e0e:	440b      	add	r3, r1
 8000e10:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e14:	e00a      	b.n	8000e2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e16:	683b      	ldr	r3, [r7, #0]
 8000e18:	b2da      	uxtb	r2, r3
 8000e1a:	4908      	ldr	r1, [pc, #32]	; (8000e3c <__NVIC_SetPriority+0x50>)
 8000e1c:	79fb      	ldrb	r3, [r7, #7]
 8000e1e:	f003 030f 	and.w	r3, r3, #15
 8000e22:	3b04      	subs	r3, #4
 8000e24:	0112      	lsls	r2, r2, #4
 8000e26:	b2d2      	uxtb	r2, r2
 8000e28:	440b      	add	r3, r1
 8000e2a:	761a      	strb	r2, [r3, #24]
}
 8000e2c:	bf00      	nop
 8000e2e:	370c      	adds	r7, #12
 8000e30:	46bd      	mov	sp, r7
 8000e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e36:	4770      	bx	lr
 8000e38:	e000e100 	.word	0xe000e100
 8000e3c:	e000ed00 	.word	0xe000ed00

08000e40 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e40:	b480      	push	{r7}
 8000e42:	b089      	sub	sp, #36	; 0x24
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	60f8      	str	r0, [r7, #12]
 8000e48:	60b9      	str	r1, [r7, #8]
 8000e4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	f003 0307 	and.w	r3, r3, #7
 8000e52:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e54:	69fb      	ldr	r3, [r7, #28]
 8000e56:	f1c3 0307 	rsb	r3, r3, #7
 8000e5a:	2b04      	cmp	r3, #4
 8000e5c:	bf28      	it	cs
 8000e5e:	2304      	movcs	r3, #4
 8000e60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e62:	69fb      	ldr	r3, [r7, #28]
 8000e64:	3304      	adds	r3, #4
 8000e66:	2b06      	cmp	r3, #6
 8000e68:	d902      	bls.n	8000e70 <NVIC_EncodePriority+0x30>
 8000e6a:	69fb      	ldr	r3, [r7, #28]
 8000e6c:	3b03      	subs	r3, #3
 8000e6e:	e000      	b.n	8000e72 <NVIC_EncodePriority+0x32>
 8000e70:	2300      	movs	r3, #0
 8000e72:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e74:	f04f 32ff 	mov.w	r2, #4294967295
 8000e78:	69bb      	ldr	r3, [r7, #24]
 8000e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7e:	43da      	mvns	r2, r3
 8000e80:	68bb      	ldr	r3, [r7, #8]
 8000e82:	401a      	ands	r2, r3
 8000e84:	697b      	ldr	r3, [r7, #20]
 8000e86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e88:	f04f 31ff 	mov.w	r1, #4294967295
 8000e8c:	697b      	ldr	r3, [r7, #20]
 8000e8e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e92:	43d9      	mvns	r1, r3
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e98:	4313      	orrs	r3, r2
         );
}
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	3724      	adds	r7, #36	; 0x24
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea4:	4770      	bx	lr
	...

08000ea8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b082      	sub	sp, #8
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	3b01      	subs	r3, #1
 8000eb4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000eb8:	d301      	bcc.n	8000ebe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000eba:	2301      	movs	r3, #1
 8000ebc:	e00f      	b.n	8000ede <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ebe:	4a0a      	ldr	r2, [pc, #40]	; (8000ee8 <SysTick_Config+0x40>)
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	3b01      	subs	r3, #1
 8000ec4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ec6:	210f      	movs	r1, #15
 8000ec8:	f04f 30ff 	mov.w	r0, #4294967295
 8000ecc:	f7ff ff8e 	bl	8000dec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ed0:	4b05      	ldr	r3, [pc, #20]	; (8000ee8 <SysTick_Config+0x40>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ed6:	4b04      	ldr	r3, [pc, #16]	; (8000ee8 <SysTick_Config+0x40>)
 8000ed8:	2207      	movs	r2, #7
 8000eda:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000edc:	2300      	movs	r3, #0
}
 8000ede:	4618      	mov	r0, r3
 8000ee0:	3708      	adds	r7, #8
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	e000e010 	.word	0xe000e010

08000eec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b082      	sub	sp, #8
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ef4:	6878      	ldr	r0, [r7, #4]
 8000ef6:	f7ff ff47 	bl	8000d88 <__NVIC_SetPriorityGrouping>
}
 8000efa:	bf00      	nop
 8000efc:	3708      	adds	r7, #8
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}

08000f02 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f02:	b580      	push	{r7, lr}
 8000f04:	b086      	sub	sp, #24
 8000f06:	af00      	add	r7, sp, #0
 8000f08:	4603      	mov	r3, r0
 8000f0a:	60b9      	str	r1, [r7, #8]
 8000f0c:	607a      	str	r2, [r7, #4]
 8000f0e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000f10:	2300      	movs	r3, #0
 8000f12:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000f14:	f7ff ff5c 	bl	8000dd0 <__NVIC_GetPriorityGrouping>
 8000f18:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f1a:	687a      	ldr	r2, [r7, #4]
 8000f1c:	68b9      	ldr	r1, [r7, #8]
 8000f1e:	6978      	ldr	r0, [r7, #20]
 8000f20:	f7ff ff8e 	bl	8000e40 <NVIC_EncodePriority>
 8000f24:	4602      	mov	r2, r0
 8000f26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f2a:	4611      	mov	r1, r2
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	f7ff ff5d 	bl	8000dec <__NVIC_SetPriority>
}
 8000f32:	bf00      	nop
 8000f34:	3718      	adds	r7, #24
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}

08000f3a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f3a:	b580      	push	{r7, lr}
 8000f3c:	b082      	sub	sp, #8
 8000f3e:	af00      	add	r7, sp, #0
 8000f40:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f42:	6878      	ldr	r0, [r7, #4]
 8000f44:	f7ff ffb0 	bl	8000ea8 <SysTick_Config>
 8000f48:	4603      	mov	r3, r0
}
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	3708      	adds	r7, #8
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}
	...

08000f54 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f54:	b480      	push	{r7}
 8000f56:	b087      	sub	sp, #28
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
 8000f5c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f62:	e17f      	b.n	8001264 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	681a      	ldr	r2, [r3, #0]
 8000f68:	2101      	movs	r1, #1
 8000f6a:	697b      	ldr	r3, [r7, #20]
 8000f6c:	fa01 f303 	lsl.w	r3, r1, r3
 8000f70:	4013      	ands	r3, r2
 8000f72:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	f000 8171 	beq.w	800125e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	685b      	ldr	r3, [r3, #4]
 8000f80:	2b01      	cmp	r3, #1
 8000f82:	d00b      	beq.n	8000f9c <HAL_GPIO_Init+0x48>
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	685b      	ldr	r3, [r3, #4]
 8000f88:	2b02      	cmp	r3, #2
 8000f8a:	d007      	beq.n	8000f9c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f90:	2b11      	cmp	r3, #17
 8000f92:	d003      	beq.n	8000f9c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	685b      	ldr	r3, [r3, #4]
 8000f98:	2b12      	cmp	r3, #18
 8000f9a:	d130      	bne.n	8000ffe <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	689b      	ldr	r3, [r3, #8]
 8000fa0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000fa2:	697b      	ldr	r3, [r7, #20]
 8000fa4:	005b      	lsls	r3, r3, #1
 8000fa6:	2203      	movs	r2, #3
 8000fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fac:	43db      	mvns	r3, r3
 8000fae:	693a      	ldr	r2, [r7, #16]
 8000fb0:	4013      	ands	r3, r2
 8000fb2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	68da      	ldr	r2, [r3, #12]
 8000fb8:	697b      	ldr	r3, [r7, #20]
 8000fba:	005b      	lsls	r3, r3, #1
 8000fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc0:	693a      	ldr	r2, [r7, #16]
 8000fc2:	4313      	orrs	r3, r2
 8000fc4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	693a      	ldr	r2, [r7, #16]
 8000fca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	685b      	ldr	r3, [r3, #4]
 8000fd0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000fd2:	2201      	movs	r2, #1
 8000fd4:	697b      	ldr	r3, [r7, #20]
 8000fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fda:	43db      	mvns	r3, r3
 8000fdc:	693a      	ldr	r2, [r7, #16]
 8000fde:	4013      	ands	r3, r2
 8000fe0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	685b      	ldr	r3, [r3, #4]
 8000fe6:	091b      	lsrs	r3, r3, #4
 8000fe8:	f003 0201 	and.w	r2, r3, #1
 8000fec:	697b      	ldr	r3, [r7, #20]
 8000fee:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff2:	693a      	ldr	r2, [r7, #16]
 8000ff4:	4313      	orrs	r3, r2
 8000ff6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	693a      	ldr	r2, [r7, #16]
 8000ffc:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000ffe:	683b      	ldr	r3, [r7, #0]
 8001000:	685b      	ldr	r3, [r3, #4]
 8001002:	f003 0303 	and.w	r3, r3, #3
 8001006:	2b03      	cmp	r3, #3
 8001008:	d118      	bne.n	800103c <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800100e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001010:	2201      	movs	r2, #1
 8001012:	697b      	ldr	r3, [r7, #20]
 8001014:	fa02 f303 	lsl.w	r3, r2, r3
 8001018:	43db      	mvns	r3, r3
 800101a:	693a      	ldr	r2, [r7, #16]
 800101c:	4013      	ands	r3, r2
 800101e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	685b      	ldr	r3, [r3, #4]
 8001024:	08db      	lsrs	r3, r3, #3
 8001026:	f003 0201 	and.w	r2, r3, #1
 800102a:	697b      	ldr	r3, [r7, #20]
 800102c:	fa02 f303 	lsl.w	r3, r2, r3
 8001030:	693a      	ldr	r2, [r7, #16]
 8001032:	4313      	orrs	r3, r2
 8001034:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	693a      	ldr	r2, [r7, #16]
 800103a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	68db      	ldr	r3, [r3, #12]
 8001040:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001042:	697b      	ldr	r3, [r7, #20]
 8001044:	005b      	lsls	r3, r3, #1
 8001046:	2203      	movs	r2, #3
 8001048:	fa02 f303 	lsl.w	r3, r2, r3
 800104c:	43db      	mvns	r3, r3
 800104e:	693a      	ldr	r2, [r7, #16]
 8001050:	4013      	ands	r3, r2
 8001052:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	689a      	ldr	r2, [r3, #8]
 8001058:	697b      	ldr	r3, [r7, #20]
 800105a:	005b      	lsls	r3, r3, #1
 800105c:	fa02 f303 	lsl.w	r3, r2, r3
 8001060:	693a      	ldr	r2, [r7, #16]
 8001062:	4313      	orrs	r3, r2
 8001064:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	693a      	ldr	r2, [r7, #16]
 800106a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	685b      	ldr	r3, [r3, #4]
 8001070:	2b02      	cmp	r3, #2
 8001072:	d003      	beq.n	800107c <HAL_GPIO_Init+0x128>
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	685b      	ldr	r3, [r3, #4]
 8001078:	2b12      	cmp	r3, #18
 800107a:	d123      	bne.n	80010c4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800107c:	697b      	ldr	r3, [r7, #20]
 800107e:	08da      	lsrs	r2, r3, #3
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	3208      	adds	r2, #8
 8001084:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001088:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800108a:	697b      	ldr	r3, [r7, #20]
 800108c:	f003 0307 	and.w	r3, r3, #7
 8001090:	009b      	lsls	r3, r3, #2
 8001092:	220f      	movs	r2, #15
 8001094:	fa02 f303 	lsl.w	r3, r2, r3
 8001098:	43db      	mvns	r3, r3
 800109a:	693a      	ldr	r2, [r7, #16]
 800109c:	4013      	ands	r3, r2
 800109e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	691a      	ldr	r2, [r3, #16]
 80010a4:	697b      	ldr	r3, [r7, #20]
 80010a6:	f003 0307 	and.w	r3, r3, #7
 80010aa:	009b      	lsls	r3, r3, #2
 80010ac:	fa02 f303 	lsl.w	r3, r2, r3
 80010b0:	693a      	ldr	r2, [r7, #16]
 80010b2:	4313      	orrs	r3, r2
 80010b4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80010b6:	697b      	ldr	r3, [r7, #20]
 80010b8:	08da      	lsrs	r2, r3, #3
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	3208      	adds	r2, #8
 80010be:	6939      	ldr	r1, [r7, #16]
 80010c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80010ca:	697b      	ldr	r3, [r7, #20]
 80010cc:	005b      	lsls	r3, r3, #1
 80010ce:	2203      	movs	r2, #3
 80010d0:	fa02 f303 	lsl.w	r3, r2, r3
 80010d4:	43db      	mvns	r3, r3
 80010d6:	693a      	ldr	r2, [r7, #16]
 80010d8:	4013      	ands	r3, r2
 80010da:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	685b      	ldr	r3, [r3, #4]
 80010e0:	f003 0203 	and.w	r2, r3, #3
 80010e4:	697b      	ldr	r3, [r7, #20]
 80010e6:	005b      	lsls	r3, r3, #1
 80010e8:	fa02 f303 	lsl.w	r3, r2, r3
 80010ec:	693a      	ldr	r2, [r7, #16]
 80010ee:	4313      	orrs	r3, r2
 80010f0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	693a      	ldr	r2, [r7, #16]
 80010f6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001100:	2b00      	cmp	r3, #0
 8001102:	f000 80ac 	beq.w	800125e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001106:	4b5e      	ldr	r3, [pc, #376]	; (8001280 <HAL_GPIO_Init+0x32c>)
 8001108:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800110a:	4a5d      	ldr	r2, [pc, #372]	; (8001280 <HAL_GPIO_Init+0x32c>)
 800110c:	f043 0301 	orr.w	r3, r3, #1
 8001110:	6613      	str	r3, [r2, #96]	; 0x60
 8001112:	4b5b      	ldr	r3, [pc, #364]	; (8001280 <HAL_GPIO_Init+0x32c>)
 8001114:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001116:	f003 0301 	and.w	r3, r3, #1
 800111a:	60bb      	str	r3, [r7, #8]
 800111c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800111e:	4a59      	ldr	r2, [pc, #356]	; (8001284 <HAL_GPIO_Init+0x330>)
 8001120:	697b      	ldr	r3, [r7, #20]
 8001122:	089b      	lsrs	r3, r3, #2
 8001124:	3302      	adds	r3, #2
 8001126:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800112a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800112c:	697b      	ldr	r3, [r7, #20]
 800112e:	f003 0303 	and.w	r3, r3, #3
 8001132:	009b      	lsls	r3, r3, #2
 8001134:	220f      	movs	r2, #15
 8001136:	fa02 f303 	lsl.w	r3, r2, r3
 800113a:	43db      	mvns	r3, r3
 800113c:	693a      	ldr	r2, [r7, #16]
 800113e:	4013      	ands	r3, r2
 8001140:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001148:	d025      	beq.n	8001196 <HAL_GPIO_Init+0x242>
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	4a4e      	ldr	r2, [pc, #312]	; (8001288 <HAL_GPIO_Init+0x334>)
 800114e:	4293      	cmp	r3, r2
 8001150:	d01f      	beq.n	8001192 <HAL_GPIO_Init+0x23e>
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	4a4d      	ldr	r2, [pc, #308]	; (800128c <HAL_GPIO_Init+0x338>)
 8001156:	4293      	cmp	r3, r2
 8001158:	d019      	beq.n	800118e <HAL_GPIO_Init+0x23a>
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	4a4c      	ldr	r2, [pc, #304]	; (8001290 <HAL_GPIO_Init+0x33c>)
 800115e:	4293      	cmp	r3, r2
 8001160:	d013      	beq.n	800118a <HAL_GPIO_Init+0x236>
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	4a4b      	ldr	r2, [pc, #300]	; (8001294 <HAL_GPIO_Init+0x340>)
 8001166:	4293      	cmp	r3, r2
 8001168:	d00d      	beq.n	8001186 <HAL_GPIO_Init+0x232>
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	4a4a      	ldr	r2, [pc, #296]	; (8001298 <HAL_GPIO_Init+0x344>)
 800116e:	4293      	cmp	r3, r2
 8001170:	d007      	beq.n	8001182 <HAL_GPIO_Init+0x22e>
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	4a49      	ldr	r2, [pc, #292]	; (800129c <HAL_GPIO_Init+0x348>)
 8001176:	4293      	cmp	r3, r2
 8001178:	d101      	bne.n	800117e <HAL_GPIO_Init+0x22a>
 800117a:	2306      	movs	r3, #6
 800117c:	e00c      	b.n	8001198 <HAL_GPIO_Init+0x244>
 800117e:	2307      	movs	r3, #7
 8001180:	e00a      	b.n	8001198 <HAL_GPIO_Init+0x244>
 8001182:	2305      	movs	r3, #5
 8001184:	e008      	b.n	8001198 <HAL_GPIO_Init+0x244>
 8001186:	2304      	movs	r3, #4
 8001188:	e006      	b.n	8001198 <HAL_GPIO_Init+0x244>
 800118a:	2303      	movs	r3, #3
 800118c:	e004      	b.n	8001198 <HAL_GPIO_Init+0x244>
 800118e:	2302      	movs	r3, #2
 8001190:	e002      	b.n	8001198 <HAL_GPIO_Init+0x244>
 8001192:	2301      	movs	r3, #1
 8001194:	e000      	b.n	8001198 <HAL_GPIO_Init+0x244>
 8001196:	2300      	movs	r3, #0
 8001198:	697a      	ldr	r2, [r7, #20]
 800119a:	f002 0203 	and.w	r2, r2, #3
 800119e:	0092      	lsls	r2, r2, #2
 80011a0:	4093      	lsls	r3, r2
 80011a2:	693a      	ldr	r2, [r7, #16]
 80011a4:	4313      	orrs	r3, r2
 80011a6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80011a8:	4936      	ldr	r1, [pc, #216]	; (8001284 <HAL_GPIO_Init+0x330>)
 80011aa:	697b      	ldr	r3, [r7, #20]
 80011ac:	089b      	lsrs	r3, r3, #2
 80011ae:	3302      	adds	r3, #2
 80011b0:	693a      	ldr	r2, [r7, #16]
 80011b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80011b6:	4b3a      	ldr	r3, [pc, #232]	; (80012a0 <HAL_GPIO_Init+0x34c>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	43db      	mvns	r3, r3
 80011c0:	693a      	ldr	r2, [r7, #16]
 80011c2:	4013      	ands	r3, r2
 80011c4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	685b      	ldr	r3, [r3, #4]
 80011ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d003      	beq.n	80011da <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80011d2:	693a      	ldr	r2, [r7, #16]
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	4313      	orrs	r3, r2
 80011d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80011da:	4a31      	ldr	r2, [pc, #196]	; (80012a0 <HAL_GPIO_Init+0x34c>)
 80011dc:	693b      	ldr	r3, [r7, #16]
 80011de:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80011e0:	4b2f      	ldr	r3, [pc, #188]	; (80012a0 <HAL_GPIO_Init+0x34c>)
 80011e2:	685b      	ldr	r3, [r3, #4]
 80011e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	43db      	mvns	r3, r3
 80011ea:	693a      	ldr	r2, [r7, #16]
 80011ec:	4013      	ands	r3, r2
 80011ee:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	685b      	ldr	r3, [r3, #4]
 80011f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d003      	beq.n	8001204 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80011fc:	693a      	ldr	r2, [r7, #16]
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	4313      	orrs	r3, r2
 8001202:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001204:	4a26      	ldr	r2, [pc, #152]	; (80012a0 <HAL_GPIO_Init+0x34c>)
 8001206:	693b      	ldr	r3, [r7, #16]
 8001208:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800120a:	4b25      	ldr	r3, [pc, #148]	; (80012a0 <HAL_GPIO_Init+0x34c>)
 800120c:	689b      	ldr	r3, [r3, #8]
 800120e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	43db      	mvns	r3, r3
 8001214:	693a      	ldr	r2, [r7, #16]
 8001216:	4013      	ands	r3, r2
 8001218:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	685b      	ldr	r3, [r3, #4]
 800121e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001222:	2b00      	cmp	r3, #0
 8001224:	d003      	beq.n	800122e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001226:	693a      	ldr	r2, [r7, #16]
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	4313      	orrs	r3, r2
 800122c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800122e:	4a1c      	ldr	r2, [pc, #112]	; (80012a0 <HAL_GPIO_Init+0x34c>)
 8001230:	693b      	ldr	r3, [r7, #16]
 8001232:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001234:	4b1a      	ldr	r3, [pc, #104]	; (80012a0 <HAL_GPIO_Init+0x34c>)
 8001236:	68db      	ldr	r3, [r3, #12]
 8001238:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	43db      	mvns	r3, r3
 800123e:	693a      	ldr	r2, [r7, #16]
 8001240:	4013      	ands	r3, r2
 8001242:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	685b      	ldr	r3, [r3, #4]
 8001248:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800124c:	2b00      	cmp	r3, #0
 800124e:	d003      	beq.n	8001258 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001250:	693a      	ldr	r2, [r7, #16]
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	4313      	orrs	r3, r2
 8001256:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001258:	4a11      	ldr	r2, [pc, #68]	; (80012a0 <HAL_GPIO_Init+0x34c>)
 800125a:	693b      	ldr	r3, [r7, #16]
 800125c:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800125e:	697b      	ldr	r3, [r7, #20]
 8001260:	3301      	adds	r3, #1
 8001262:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	681a      	ldr	r2, [r3, #0]
 8001268:	697b      	ldr	r3, [r7, #20]
 800126a:	fa22 f303 	lsr.w	r3, r2, r3
 800126e:	2b00      	cmp	r3, #0
 8001270:	f47f ae78 	bne.w	8000f64 <HAL_GPIO_Init+0x10>
  }
}
 8001274:	bf00      	nop
 8001276:	371c      	adds	r7, #28
 8001278:	46bd      	mov	sp, r7
 800127a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127e:	4770      	bx	lr
 8001280:	40021000 	.word	0x40021000
 8001284:	40010000 	.word	0x40010000
 8001288:	48000400 	.word	0x48000400
 800128c:	48000800 	.word	0x48000800
 8001290:	48000c00 	.word	0x48000c00
 8001294:	48001000 	.word	0x48001000
 8001298:	48001400 	.word	0x48001400
 800129c:	48001800 	.word	0x48001800
 80012a0:	40010400 	.word	0x40010400

080012a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012a4:	b480      	push	{r7}
 80012a6:	b083      	sub	sp, #12
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
 80012ac:	460b      	mov	r3, r1
 80012ae:	807b      	strh	r3, [r7, #2]
 80012b0:	4613      	mov	r3, r2
 80012b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80012b4:	787b      	ldrb	r3, [r7, #1]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d003      	beq.n	80012c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80012ba:	887a      	ldrh	r2, [r7, #2]
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80012c0:	e002      	b.n	80012c8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80012c2:	887a      	ldrh	r2, [r7, #2]
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80012c8:	bf00      	nop
 80012ca:	370c      	adds	r7, #12
 80012cc:	46bd      	mov	sp, r7
 80012ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d2:	4770      	bx	lr

080012d4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b082      	sub	sp, #8
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d101      	bne.n	80012e6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80012e2:	2301      	movs	r3, #1
 80012e4:	e081      	b.n	80013ea <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80012ec:	b2db      	uxtb	r3, r3
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d106      	bne.n	8001300 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	2200      	movs	r2, #0
 80012f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80012fa:	6878      	ldr	r0, [r7, #4]
 80012fc:	f7ff fb84 	bl	8000a08 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	2224      	movs	r2, #36	; 0x24
 8001304:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	681a      	ldr	r2, [r3, #0]
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f022 0201 	bic.w	r2, r2, #1
 8001316:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	685a      	ldr	r2, [r3, #4]
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001324:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	689a      	ldr	r2, [r3, #8]
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001334:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	68db      	ldr	r3, [r3, #12]
 800133a:	2b01      	cmp	r3, #1
 800133c:	d107      	bne.n	800134e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	689a      	ldr	r2, [r3, #8]
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800134a:	609a      	str	r2, [r3, #8]
 800134c:	e006      	b.n	800135c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	689a      	ldr	r2, [r3, #8]
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800135a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	68db      	ldr	r3, [r3, #12]
 8001360:	2b02      	cmp	r3, #2
 8001362:	d104      	bne.n	800136e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800136c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	685b      	ldr	r3, [r3, #4]
 8001374:	687a      	ldr	r2, [r7, #4]
 8001376:	6812      	ldr	r2, [r2, #0]
 8001378:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800137c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001380:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	68da      	ldr	r2, [r3, #12]
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001390:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	691a      	ldr	r2, [r3, #16]
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	695b      	ldr	r3, [r3, #20]
 800139a:	ea42 0103 	orr.w	r1, r2, r3
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	699b      	ldr	r3, [r3, #24]
 80013a2:	021a      	lsls	r2, r3, #8
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	430a      	orrs	r2, r1
 80013aa:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	69d9      	ldr	r1, [r3, #28]
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	6a1a      	ldr	r2, [r3, #32]
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	430a      	orrs	r2, r1
 80013ba:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	681a      	ldr	r2, [r3, #0]
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f042 0201 	orr.w	r2, r2, #1
 80013ca:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	2200      	movs	r2, #0
 80013d0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	2220      	movs	r2, #32
 80013d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	2200      	movs	r2, #0
 80013de:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	2200      	movs	r2, #0
 80013e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80013e8:	2300      	movs	r3, #0
}
 80013ea:	4618      	mov	r0, r3
 80013ec:	3708      	adds	r7, #8
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}
	...

080013f4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b088      	sub	sp, #32
 80013f8:	af02      	add	r7, sp, #8
 80013fa:	60f8      	str	r0, [r7, #12]
 80013fc:	4608      	mov	r0, r1
 80013fe:	4611      	mov	r1, r2
 8001400:	461a      	mov	r2, r3
 8001402:	4603      	mov	r3, r0
 8001404:	817b      	strh	r3, [r7, #10]
 8001406:	460b      	mov	r3, r1
 8001408:	813b      	strh	r3, [r7, #8]
 800140a:	4613      	mov	r3, r2
 800140c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001414:	b2db      	uxtb	r3, r3
 8001416:	2b20      	cmp	r3, #32
 8001418:	f040 80f9 	bne.w	800160e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800141c:	6a3b      	ldr	r3, [r7, #32]
 800141e:	2b00      	cmp	r3, #0
 8001420:	d002      	beq.n	8001428 <HAL_I2C_Mem_Write+0x34>
 8001422:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001424:	2b00      	cmp	r3, #0
 8001426:	d105      	bne.n	8001434 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800142e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001430:	2301      	movs	r3, #1
 8001432:	e0ed      	b.n	8001610 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800143a:	2b01      	cmp	r3, #1
 800143c:	d101      	bne.n	8001442 <HAL_I2C_Mem_Write+0x4e>
 800143e:	2302      	movs	r3, #2
 8001440:	e0e6      	b.n	8001610 <HAL_I2C_Mem_Write+0x21c>
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	2201      	movs	r2, #1
 8001446:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800144a:	f7ff fc6f 	bl	8000d2c <HAL_GetTick>
 800144e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001450:	697b      	ldr	r3, [r7, #20]
 8001452:	9300      	str	r3, [sp, #0]
 8001454:	2319      	movs	r3, #25
 8001456:	2201      	movs	r2, #1
 8001458:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800145c:	68f8      	ldr	r0, [r7, #12]
 800145e:	f000 f955 	bl	800170c <I2C_WaitOnFlagUntilTimeout>
 8001462:	4603      	mov	r3, r0
 8001464:	2b00      	cmp	r3, #0
 8001466:	d001      	beq.n	800146c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8001468:	2301      	movs	r3, #1
 800146a:	e0d1      	b.n	8001610 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	2221      	movs	r2, #33	; 0x21
 8001470:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	2240      	movs	r2, #64	; 0x40
 8001478:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	2200      	movs	r2, #0
 8001480:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	6a3a      	ldr	r2, [r7, #32]
 8001486:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800148c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	2200      	movs	r2, #0
 8001492:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001494:	88f8      	ldrh	r0, [r7, #6]
 8001496:	893a      	ldrh	r2, [r7, #8]
 8001498:	8979      	ldrh	r1, [r7, #10]
 800149a:	697b      	ldr	r3, [r7, #20]
 800149c:	9301      	str	r3, [sp, #4]
 800149e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014a0:	9300      	str	r3, [sp, #0]
 80014a2:	4603      	mov	r3, r0
 80014a4:	68f8      	ldr	r0, [r7, #12]
 80014a6:	f000 f8b9 	bl	800161c <I2C_RequestMemoryWrite>
 80014aa:	4603      	mov	r3, r0
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d005      	beq.n	80014bc <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	2200      	movs	r2, #0
 80014b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80014b8:	2301      	movs	r3, #1
 80014ba:	e0a9      	b.n	8001610 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80014c0:	b29b      	uxth	r3, r3
 80014c2:	2bff      	cmp	r3, #255	; 0xff
 80014c4:	d90e      	bls.n	80014e4 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	22ff      	movs	r2, #255	; 0xff
 80014ca:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80014d0:	b2da      	uxtb	r2, r3
 80014d2:	8979      	ldrh	r1, [r7, #10]
 80014d4:	2300      	movs	r3, #0
 80014d6:	9300      	str	r3, [sp, #0]
 80014d8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80014dc:	68f8      	ldr	r0, [r7, #12]
 80014de:	f000 fa37 	bl	8001950 <I2C_TransferConfig>
 80014e2:	e00f      	b.n	8001504 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80014e8:	b29a      	uxth	r2, r3
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80014f2:	b2da      	uxtb	r2, r3
 80014f4:	8979      	ldrh	r1, [r7, #10]
 80014f6:	2300      	movs	r3, #0
 80014f8:	9300      	str	r3, [sp, #0]
 80014fa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80014fe:	68f8      	ldr	r0, [r7, #12]
 8001500:	f000 fa26 	bl	8001950 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001504:	697a      	ldr	r2, [r7, #20]
 8001506:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001508:	68f8      	ldr	r0, [r7, #12]
 800150a:	f000 f93f 	bl	800178c <I2C_WaitOnTXISFlagUntilTimeout>
 800150e:	4603      	mov	r3, r0
 8001510:	2b00      	cmp	r3, #0
 8001512:	d001      	beq.n	8001518 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8001514:	2301      	movs	r3, #1
 8001516:	e07b      	b.n	8001610 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800151c:	781a      	ldrb	r2, [r3, #0]
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001528:	1c5a      	adds	r2, r3, #1
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001532:	b29b      	uxth	r3, r3
 8001534:	3b01      	subs	r3, #1
 8001536:	b29a      	uxth	r2, r3
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001540:	3b01      	subs	r3, #1
 8001542:	b29a      	uxth	r2, r3
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800154c:	b29b      	uxth	r3, r3
 800154e:	2b00      	cmp	r3, #0
 8001550:	d034      	beq.n	80015bc <HAL_I2C_Mem_Write+0x1c8>
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001556:	2b00      	cmp	r3, #0
 8001558:	d130      	bne.n	80015bc <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800155a:	697b      	ldr	r3, [r7, #20]
 800155c:	9300      	str	r3, [sp, #0]
 800155e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001560:	2200      	movs	r2, #0
 8001562:	2180      	movs	r1, #128	; 0x80
 8001564:	68f8      	ldr	r0, [r7, #12]
 8001566:	f000 f8d1 	bl	800170c <I2C_WaitOnFlagUntilTimeout>
 800156a:	4603      	mov	r3, r0
 800156c:	2b00      	cmp	r3, #0
 800156e:	d001      	beq.n	8001574 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8001570:	2301      	movs	r3, #1
 8001572:	e04d      	b.n	8001610 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001578:	b29b      	uxth	r3, r3
 800157a:	2bff      	cmp	r3, #255	; 0xff
 800157c:	d90e      	bls.n	800159c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	22ff      	movs	r2, #255	; 0xff
 8001582:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001588:	b2da      	uxtb	r2, r3
 800158a:	8979      	ldrh	r1, [r7, #10]
 800158c:	2300      	movs	r3, #0
 800158e:	9300      	str	r3, [sp, #0]
 8001590:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001594:	68f8      	ldr	r0, [r7, #12]
 8001596:	f000 f9db 	bl	8001950 <I2C_TransferConfig>
 800159a:	e00f      	b.n	80015bc <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015a0:	b29a      	uxth	r2, r3
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015aa:	b2da      	uxtb	r2, r3
 80015ac:	8979      	ldrh	r1, [r7, #10]
 80015ae:	2300      	movs	r3, #0
 80015b0:	9300      	str	r3, [sp, #0]
 80015b2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80015b6:	68f8      	ldr	r0, [r7, #12]
 80015b8:	f000 f9ca 	bl	8001950 <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015c0:	b29b      	uxth	r3, r3
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d19e      	bne.n	8001504 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80015c6:	697a      	ldr	r2, [r7, #20]
 80015c8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80015ca:	68f8      	ldr	r0, [r7, #12]
 80015cc:	f000 f91e 	bl	800180c <I2C_WaitOnSTOPFlagUntilTimeout>
 80015d0:	4603      	mov	r3, r0
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d001      	beq.n	80015da <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80015d6:	2301      	movs	r3, #1
 80015d8:	e01a      	b.n	8001610 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	2220      	movs	r2, #32
 80015e0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	6859      	ldr	r1, [r3, #4]
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	681a      	ldr	r2, [r3, #0]
 80015ec:	4b0a      	ldr	r3, [pc, #40]	; (8001618 <HAL_I2C_Mem_Write+0x224>)
 80015ee:	400b      	ands	r3, r1
 80015f0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	2220      	movs	r2, #32
 80015f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	2200      	movs	r2, #0
 80015fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	2200      	movs	r2, #0
 8001606:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800160a:	2300      	movs	r3, #0
 800160c:	e000      	b.n	8001610 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800160e:	2302      	movs	r3, #2
  }
}
 8001610:	4618      	mov	r0, r3
 8001612:	3718      	adds	r7, #24
 8001614:	46bd      	mov	sp, r7
 8001616:	bd80      	pop	{r7, pc}
 8001618:	fe00e800 	.word	0xfe00e800

0800161c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b086      	sub	sp, #24
 8001620:	af02      	add	r7, sp, #8
 8001622:	60f8      	str	r0, [r7, #12]
 8001624:	4608      	mov	r0, r1
 8001626:	4611      	mov	r1, r2
 8001628:	461a      	mov	r2, r3
 800162a:	4603      	mov	r3, r0
 800162c:	817b      	strh	r3, [r7, #10]
 800162e:	460b      	mov	r3, r1
 8001630:	813b      	strh	r3, [r7, #8]
 8001632:	4613      	mov	r3, r2
 8001634:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001636:	88fb      	ldrh	r3, [r7, #6]
 8001638:	b2da      	uxtb	r2, r3
 800163a:	8979      	ldrh	r1, [r7, #10]
 800163c:	4b20      	ldr	r3, [pc, #128]	; (80016c0 <I2C_RequestMemoryWrite+0xa4>)
 800163e:	9300      	str	r3, [sp, #0]
 8001640:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001644:	68f8      	ldr	r0, [r7, #12]
 8001646:	f000 f983 	bl	8001950 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800164a:	69fa      	ldr	r2, [r7, #28]
 800164c:	69b9      	ldr	r1, [r7, #24]
 800164e:	68f8      	ldr	r0, [r7, #12]
 8001650:	f000 f89c 	bl	800178c <I2C_WaitOnTXISFlagUntilTimeout>
 8001654:	4603      	mov	r3, r0
 8001656:	2b00      	cmp	r3, #0
 8001658:	d001      	beq.n	800165e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800165a:	2301      	movs	r3, #1
 800165c:	e02c      	b.n	80016b8 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800165e:	88fb      	ldrh	r3, [r7, #6]
 8001660:	2b01      	cmp	r3, #1
 8001662:	d105      	bne.n	8001670 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001664:	893b      	ldrh	r3, [r7, #8]
 8001666:	b2da      	uxtb	r2, r3
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	629a      	str	r2, [r3, #40]	; 0x28
 800166e:	e015      	b.n	800169c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001670:	893b      	ldrh	r3, [r7, #8]
 8001672:	0a1b      	lsrs	r3, r3, #8
 8001674:	b29b      	uxth	r3, r3
 8001676:	b2da      	uxtb	r2, r3
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800167e:	69fa      	ldr	r2, [r7, #28]
 8001680:	69b9      	ldr	r1, [r7, #24]
 8001682:	68f8      	ldr	r0, [r7, #12]
 8001684:	f000 f882 	bl	800178c <I2C_WaitOnTXISFlagUntilTimeout>
 8001688:	4603      	mov	r3, r0
 800168a:	2b00      	cmp	r3, #0
 800168c:	d001      	beq.n	8001692 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800168e:	2301      	movs	r3, #1
 8001690:	e012      	b.n	80016b8 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001692:	893b      	ldrh	r3, [r7, #8]
 8001694:	b2da      	uxtb	r2, r3
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800169c:	69fb      	ldr	r3, [r7, #28]
 800169e:	9300      	str	r3, [sp, #0]
 80016a0:	69bb      	ldr	r3, [r7, #24]
 80016a2:	2200      	movs	r2, #0
 80016a4:	2180      	movs	r1, #128	; 0x80
 80016a6:	68f8      	ldr	r0, [r7, #12]
 80016a8:	f000 f830 	bl	800170c <I2C_WaitOnFlagUntilTimeout>
 80016ac:	4603      	mov	r3, r0
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d001      	beq.n	80016b6 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80016b2:	2301      	movs	r3, #1
 80016b4:	e000      	b.n	80016b8 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80016b6:	2300      	movs	r3, #0
}
 80016b8:	4618      	mov	r0, r3
 80016ba:	3710      	adds	r7, #16
 80016bc:	46bd      	mov	sp, r7
 80016be:	bd80      	pop	{r7, pc}
 80016c0:	80002000 	.word	0x80002000

080016c4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80016c4:	b480      	push	{r7}
 80016c6:	b083      	sub	sp, #12
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	699b      	ldr	r3, [r3, #24]
 80016d2:	f003 0302 	and.w	r3, r3, #2
 80016d6:	2b02      	cmp	r3, #2
 80016d8:	d103      	bne.n	80016e2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	2200      	movs	r2, #0
 80016e0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	699b      	ldr	r3, [r3, #24]
 80016e8:	f003 0301 	and.w	r3, r3, #1
 80016ec:	2b01      	cmp	r3, #1
 80016ee:	d007      	beq.n	8001700 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	699a      	ldr	r2, [r3, #24]
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f042 0201 	orr.w	r2, r2, #1
 80016fe:	619a      	str	r2, [r3, #24]
  }
}
 8001700:	bf00      	nop
 8001702:	370c      	adds	r7, #12
 8001704:	46bd      	mov	sp, r7
 8001706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170a:	4770      	bx	lr

0800170c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b084      	sub	sp, #16
 8001710:	af00      	add	r7, sp, #0
 8001712:	60f8      	str	r0, [r7, #12]
 8001714:	60b9      	str	r1, [r7, #8]
 8001716:	603b      	str	r3, [r7, #0]
 8001718:	4613      	mov	r3, r2
 800171a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800171c:	e022      	b.n	8001764 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001724:	d01e      	beq.n	8001764 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001726:	f7ff fb01 	bl	8000d2c <HAL_GetTick>
 800172a:	4602      	mov	r2, r0
 800172c:	69bb      	ldr	r3, [r7, #24]
 800172e:	1ad3      	subs	r3, r2, r3
 8001730:	683a      	ldr	r2, [r7, #0]
 8001732:	429a      	cmp	r2, r3
 8001734:	d302      	bcc.n	800173c <I2C_WaitOnFlagUntilTimeout+0x30>
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	2b00      	cmp	r3, #0
 800173a:	d113      	bne.n	8001764 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001740:	f043 0220 	orr.w	r2, r3, #32
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	2220      	movs	r2, #32
 800174c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	2200      	movs	r2, #0
 8001754:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	2200      	movs	r2, #0
 800175c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8001760:	2301      	movs	r3, #1
 8001762:	e00f      	b.n	8001784 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	699a      	ldr	r2, [r3, #24]
 800176a:	68bb      	ldr	r3, [r7, #8]
 800176c:	4013      	ands	r3, r2
 800176e:	68ba      	ldr	r2, [r7, #8]
 8001770:	429a      	cmp	r2, r3
 8001772:	bf0c      	ite	eq
 8001774:	2301      	moveq	r3, #1
 8001776:	2300      	movne	r3, #0
 8001778:	b2db      	uxtb	r3, r3
 800177a:	461a      	mov	r2, r3
 800177c:	79fb      	ldrb	r3, [r7, #7]
 800177e:	429a      	cmp	r2, r3
 8001780:	d0cd      	beq.n	800171e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001782:	2300      	movs	r3, #0
}
 8001784:	4618      	mov	r0, r3
 8001786:	3710      	adds	r7, #16
 8001788:	46bd      	mov	sp, r7
 800178a:	bd80      	pop	{r7, pc}

0800178c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b084      	sub	sp, #16
 8001790:	af00      	add	r7, sp, #0
 8001792:	60f8      	str	r0, [r7, #12]
 8001794:	60b9      	str	r1, [r7, #8]
 8001796:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001798:	e02c      	b.n	80017f4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800179a:	687a      	ldr	r2, [r7, #4]
 800179c:	68b9      	ldr	r1, [r7, #8]
 800179e:	68f8      	ldr	r0, [r7, #12]
 80017a0:	f000 f870 	bl	8001884 <I2C_IsAcknowledgeFailed>
 80017a4:	4603      	mov	r3, r0
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d001      	beq.n	80017ae <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80017aa:	2301      	movs	r3, #1
 80017ac:	e02a      	b.n	8001804 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80017ae:	68bb      	ldr	r3, [r7, #8]
 80017b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017b4:	d01e      	beq.n	80017f4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80017b6:	f7ff fab9 	bl	8000d2c <HAL_GetTick>
 80017ba:	4602      	mov	r2, r0
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	1ad3      	subs	r3, r2, r3
 80017c0:	68ba      	ldr	r2, [r7, #8]
 80017c2:	429a      	cmp	r2, r3
 80017c4:	d302      	bcc.n	80017cc <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80017c6:	68bb      	ldr	r3, [r7, #8]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d113      	bne.n	80017f4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017d0:	f043 0220 	orr.w	r2, r3, #32
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	2220      	movs	r2, #32
 80017dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	2200      	movs	r2, #0
 80017e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	2200      	movs	r2, #0
 80017ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80017f0:	2301      	movs	r3, #1
 80017f2:	e007      	b.n	8001804 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	699b      	ldr	r3, [r3, #24]
 80017fa:	f003 0302 	and.w	r3, r3, #2
 80017fe:	2b02      	cmp	r3, #2
 8001800:	d1cb      	bne.n	800179a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001802:	2300      	movs	r3, #0
}
 8001804:	4618      	mov	r0, r3
 8001806:	3710      	adds	r7, #16
 8001808:	46bd      	mov	sp, r7
 800180a:	bd80      	pop	{r7, pc}

0800180c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b084      	sub	sp, #16
 8001810:	af00      	add	r7, sp, #0
 8001812:	60f8      	str	r0, [r7, #12]
 8001814:	60b9      	str	r1, [r7, #8]
 8001816:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001818:	e028      	b.n	800186c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800181a:	687a      	ldr	r2, [r7, #4]
 800181c:	68b9      	ldr	r1, [r7, #8]
 800181e:	68f8      	ldr	r0, [r7, #12]
 8001820:	f000 f830 	bl	8001884 <I2C_IsAcknowledgeFailed>
 8001824:	4603      	mov	r3, r0
 8001826:	2b00      	cmp	r3, #0
 8001828:	d001      	beq.n	800182e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800182a:	2301      	movs	r3, #1
 800182c:	e026      	b.n	800187c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800182e:	f7ff fa7d 	bl	8000d2c <HAL_GetTick>
 8001832:	4602      	mov	r2, r0
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	1ad3      	subs	r3, r2, r3
 8001838:	68ba      	ldr	r2, [r7, #8]
 800183a:	429a      	cmp	r2, r3
 800183c:	d302      	bcc.n	8001844 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800183e:	68bb      	ldr	r3, [r7, #8]
 8001840:	2b00      	cmp	r3, #0
 8001842:	d113      	bne.n	800186c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001848:	f043 0220 	orr.w	r2, r3, #32
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	2220      	movs	r2, #32
 8001854:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	2200      	movs	r2, #0
 800185c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	2200      	movs	r2, #0
 8001864:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8001868:	2301      	movs	r3, #1
 800186a:	e007      	b.n	800187c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	699b      	ldr	r3, [r3, #24]
 8001872:	f003 0320 	and.w	r3, r3, #32
 8001876:	2b20      	cmp	r3, #32
 8001878:	d1cf      	bne.n	800181a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800187a:	2300      	movs	r3, #0
}
 800187c:	4618      	mov	r0, r3
 800187e:	3710      	adds	r7, #16
 8001880:	46bd      	mov	sp, r7
 8001882:	bd80      	pop	{r7, pc}

08001884 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b084      	sub	sp, #16
 8001888:	af00      	add	r7, sp, #0
 800188a:	60f8      	str	r0, [r7, #12]
 800188c:	60b9      	str	r1, [r7, #8]
 800188e:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	699b      	ldr	r3, [r3, #24]
 8001896:	f003 0310 	and.w	r3, r3, #16
 800189a:	2b10      	cmp	r3, #16
 800189c:	d151      	bne.n	8001942 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800189e:	e022      	b.n	80018e6 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80018a0:	68bb      	ldr	r3, [r7, #8]
 80018a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018a6:	d01e      	beq.n	80018e6 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80018a8:	f7ff fa40 	bl	8000d2c <HAL_GetTick>
 80018ac:	4602      	mov	r2, r0
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	1ad3      	subs	r3, r2, r3
 80018b2:	68ba      	ldr	r2, [r7, #8]
 80018b4:	429a      	cmp	r2, r3
 80018b6:	d302      	bcc.n	80018be <I2C_IsAcknowledgeFailed+0x3a>
 80018b8:	68bb      	ldr	r3, [r7, #8]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d113      	bne.n	80018e6 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018c2:	f043 0220 	orr.w	r2, r3, #32
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	2220      	movs	r2, #32
 80018ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	2200      	movs	r2, #0
 80018d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	2200      	movs	r2, #0
 80018de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80018e2:	2301      	movs	r3, #1
 80018e4:	e02e      	b.n	8001944 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	699b      	ldr	r3, [r3, #24]
 80018ec:	f003 0320 	and.w	r3, r3, #32
 80018f0:	2b20      	cmp	r3, #32
 80018f2:	d1d5      	bne.n	80018a0 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	2210      	movs	r2, #16
 80018fa:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	2220      	movs	r2, #32
 8001902:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001904:	68f8      	ldr	r0, [r7, #12]
 8001906:	f7ff fedd 	bl	80016c4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	6859      	ldr	r1, [r3, #4]
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	681a      	ldr	r2, [r3, #0]
 8001914:	4b0d      	ldr	r3, [pc, #52]	; (800194c <I2C_IsAcknowledgeFailed+0xc8>)
 8001916:	400b      	ands	r3, r1
 8001918:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800191e:	f043 0204 	orr.w	r2, r3, #4
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	2220      	movs	r2, #32
 800192a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	2200      	movs	r2, #0
 8001932:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	2200      	movs	r2, #0
 800193a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800193e:	2301      	movs	r3, #1
 8001940:	e000      	b.n	8001944 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8001942:	2300      	movs	r3, #0
}
 8001944:	4618      	mov	r0, r3
 8001946:	3710      	adds	r7, #16
 8001948:	46bd      	mov	sp, r7
 800194a:	bd80      	pop	{r7, pc}
 800194c:	fe00e800 	.word	0xfe00e800

08001950 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8001950:	b480      	push	{r7}
 8001952:	b085      	sub	sp, #20
 8001954:	af00      	add	r7, sp, #0
 8001956:	60f8      	str	r0, [r7, #12]
 8001958:	607b      	str	r3, [r7, #4]
 800195a:	460b      	mov	r3, r1
 800195c:	817b      	strh	r3, [r7, #10]
 800195e:	4613      	mov	r3, r2
 8001960:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	685a      	ldr	r2, [r3, #4]
 8001968:	69bb      	ldr	r3, [r7, #24]
 800196a:	0d5b      	lsrs	r3, r3, #21
 800196c:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8001970:	4b0d      	ldr	r3, [pc, #52]	; (80019a8 <I2C_TransferConfig+0x58>)
 8001972:	430b      	orrs	r3, r1
 8001974:	43db      	mvns	r3, r3
 8001976:	ea02 0103 	and.w	r1, r2, r3
 800197a:	897b      	ldrh	r3, [r7, #10]
 800197c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001980:	7a7b      	ldrb	r3, [r7, #9]
 8001982:	041b      	lsls	r3, r3, #16
 8001984:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8001988:	431a      	orrs	r2, r3
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	431a      	orrs	r2, r3
 800198e:	69bb      	ldr	r3, [r7, #24]
 8001990:	431a      	orrs	r2, r3
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	430a      	orrs	r2, r1
 8001998:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800199a:	bf00      	nop
 800199c:	3714      	adds	r7, #20
 800199e:	46bd      	mov	sp, r7
 80019a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a4:	4770      	bx	lr
 80019a6:	bf00      	nop
 80019a8:	03ff63ff 	.word	0x03ff63ff

080019ac <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80019ac:	b480      	push	{r7}
 80019ae:	b083      	sub	sp, #12
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
 80019b4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80019bc:	b2db      	uxtb	r3, r3
 80019be:	2b20      	cmp	r3, #32
 80019c0:	d138      	bne.n	8001a34 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80019c8:	2b01      	cmp	r3, #1
 80019ca:	d101      	bne.n	80019d0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80019cc:	2302      	movs	r3, #2
 80019ce:	e032      	b.n	8001a36 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	2201      	movs	r2, #1
 80019d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	2224      	movs	r2, #36	; 0x24
 80019dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	681a      	ldr	r2, [r3, #0]
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f022 0201 	bic.w	r2, r2, #1
 80019ee:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	681a      	ldr	r2, [r3, #0]
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80019fe:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	6819      	ldr	r1, [r3, #0]
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	683a      	ldr	r2, [r7, #0]
 8001a0c:	430a      	orrs	r2, r1
 8001a0e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	681a      	ldr	r2, [r3, #0]
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f042 0201 	orr.w	r2, r2, #1
 8001a1e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2220      	movs	r2, #32
 8001a24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001a30:	2300      	movs	r3, #0
 8001a32:	e000      	b.n	8001a36 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001a34:	2302      	movs	r3, #2
  }
}
 8001a36:	4618      	mov	r0, r3
 8001a38:	370c      	adds	r7, #12
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a40:	4770      	bx	lr

08001a42 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001a42:	b480      	push	{r7}
 8001a44:	b085      	sub	sp, #20
 8001a46:	af00      	add	r7, sp, #0
 8001a48:	6078      	str	r0, [r7, #4]
 8001a4a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001a52:	b2db      	uxtb	r3, r3
 8001a54:	2b20      	cmp	r3, #32
 8001a56:	d139      	bne.n	8001acc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001a5e:	2b01      	cmp	r3, #1
 8001a60:	d101      	bne.n	8001a66 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001a62:	2302      	movs	r3, #2
 8001a64:	e033      	b.n	8001ace <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	2201      	movs	r2, #1
 8001a6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	2224      	movs	r2, #36	; 0x24
 8001a72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	681a      	ldr	r2, [r3, #0]
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f022 0201 	bic.w	r2, r2, #1
 8001a84:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001a94:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	021b      	lsls	r3, r3, #8
 8001a9a:	68fa      	ldr	r2, [r7, #12]
 8001a9c:	4313      	orrs	r3, r2
 8001a9e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	68fa      	ldr	r2, [r7, #12]
 8001aa6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	681a      	ldr	r2, [r3, #0]
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f042 0201 	orr.w	r2, r2, #1
 8001ab6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	2220      	movs	r2, #32
 8001abc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	e000      	b.n	8001ace <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001acc:	2302      	movs	r3, #2
  }
}
 8001ace:	4618      	mov	r0, r3
 8001ad0:	3714      	adds	r7, #20
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad8:	4770      	bx	lr
	...

08001adc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001adc:	b480      	push	{r7}
 8001ade:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001ae0:	4b04      	ldr	r3, [pc, #16]	; (8001af4 <HAL_PWREx_GetVoltageRange+0x18>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001ae8:	4618      	mov	r0, r3
 8001aea:	46bd      	mov	sp, r7
 8001aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af0:	4770      	bx	lr
 8001af2:	bf00      	nop
 8001af4:	40007000 	.word	0x40007000

08001af8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001af8:	b480      	push	{r7}
 8001afa:	b085      	sub	sp, #20
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001b06:	d130      	bne.n	8001b6a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001b08:	4b23      	ldr	r3, [pc, #140]	; (8001b98 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001b10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001b14:	d038      	beq.n	8001b88 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b16:	4b20      	ldr	r3, [pc, #128]	; (8001b98 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001b1e:	4a1e      	ldr	r2, [pc, #120]	; (8001b98 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b20:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b24:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001b26:	4b1d      	ldr	r3, [pc, #116]	; (8001b9c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	2232      	movs	r2, #50	; 0x32
 8001b2c:	fb02 f303 	mul.w	r3, r2, r3
 8001b30:	4a1b      	ldr	r2, [pc, #108]	; (8001ba0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001b32:	fba2 2303 	umull	r2, r3, r2, r3
 8001b36:	0c9b      	lsrs	r3, r3, #18
 8001b38:	3301      	adds	r3, #1
 8001b3a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001b3c:	e002      	b.n	8001b44 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	3b01      	subs	r3, #1
 8001b42:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001b44:	4b14      	ldr	r3, [pc, #80]	; (8001b98 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b46:	695b      	ldr	r3, [r3, #20]
 8001b48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b50:	d102      	bne.n	8001b58 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d1f2      	bne.n	8001b3e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001b58:	4b0f      	ldr	r3, [pc, #60]	; (8001b98 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b5a:	695b      	ldr	r3, [r3, #20]
 8001b5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b60:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b64:	d110      	bne.n	8001b88 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001b66:	2303      	movs	r3, #3
 8001b68:	e00f      	b.n	8001b8a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001b6a:	4b0b      	ldr	r3, [pc, #44]	; (8001b98 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001b72:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b76:	d007      	beq.n	8001b88 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001b78:	4b07      	ldr	r3, [pc, #28]	; (8001b98 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001b80:	4a05      	ldr	r2, [pc, #20]	; (8001b98 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b82:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b86:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001b88:	2300      	movs	r3, #0
}
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	3714      	adds	r7, #20
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b94:	4770      	bx	lr
 8001b96:	bf00      	nop
 8001b98:	40007000 	.word	0x40007000
 8001b9c:	20000000 	.word	0x20000000
 8001ba0:	431bde83 	.word	0x431bde83

08001ba4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b088      	sub	sp, #32
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d101      	bne.n	8001bb6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	e3d4      	b.n	8002360 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001bb6:	4ba1      	ldr	r3, [pc, #644]	; (8001e3c <HAL_RCC_OscConfig+0x298>)
 8001bb8:	689b      	ldr	r3, [r3, #8]
 8001bba:	f003 030c 	and.w	r3, r3, #12
 8001bbe:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001bc0:	4b9e      	ldr	r3, [pc, #632]	; (8001e3c <HAL_RCC_OscConfig+0x298>)
 8001bc2:	68db      	ldr	r3, [r3, #12]
 8001bc4:	f003 0303 	and.w	r3, r3, #3
 8001bc8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f003 0310 	and.w	r3, r3, #16
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	f000 80e4 	beq.w	8001da0 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001bd8:	69bb      	ldr	r3, [r7, #24]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d007      	beq.n	8001bee <HAL_RCC_OscConfig+0x4a>
 8001bde:	69bb      	ldr	r3, [r7, #24]
 8001be0:	2b0c      	cmp	r3, #12
 8001be2:	f040 808b 	bne.w	8001cfc <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001be6:	697b      	ldr	r3, [r7, #20]
 8001be8:	2b01      	cmp	r3, #1
 8001bea:	f040 8087 	bne.w	8001cfc <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001bee:	4b93      	ldr	r3, [pc, #588]	; (8001e3c <HAL_RCC_OscConfig+0x298>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f003 0302 	and.w	r3, r3, #2
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d005      	beq.n	8001c06 <HAL_RCC_OscConfig+0x62>
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	699b      	ldr	r3, [r3, #24]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d101      	bne.n	8001c06 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001c02:	2301      	movs	r3, #1
 8001c04:	e3ac      	b.n	8002360 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	6a1a      	ldr	r2, [r3, #32]
 8001c0a:	4b8c      	ldr	r3, [pc, #560]	; (8001e3c <HAL_RCC_OscConfig+0x298>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f003 0308 	and.w	r3, r3, #8
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d004      	beq.n	8001c20 <HAL_RCC_OscConfig+0x7c>
 8001c16:	4b89      	ldr	r3, [pc, #548]	; (8001e3c <HAL_RCC_OscConfig+0x298>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001c1e:	e005      	b.n	8001c2c <HAL_RCC_OscConfig+0x88>
 8001c20:	4b86      	ldr	r3, [pc, #536]	; (8001e3c <HAL_RCC_OscConfig+0x298>)
 8001c22:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c26:	091b      	lsrs	r3, r3, #4
 8001c28:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001c2c:	4293      	cmp	r3, r2
 8001c2e:	d223      	bcs.n	8001c78 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6a1b      	ldr	r3, [r3, #32]
 8001c34:	4618      	mov	r0, r3
 8001c36:	f000 fd3f 	bl	80026b8 <RCC_SetFlashLatencyFromMSIRange>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d001      	beq.n	8001c44 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001c40:	2301      	movs	r3, #1
 8001c42:	e38d      	b.n	8002360 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c44:	4b7d      	ldr	r3, [pc, #500]	; (8001e3c <HAL_RCC_OscConfig+0x298>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4a7c      	ldr	r2, [pc, #496]	; (8001e3c <HAL_RCC_OscConfig+0x298>)
 8001c4a:	f043 0308 	orr.w	r3, r3, #8
 8001c4e:	6013      	str	r3, [r2, #0]
 8001c50:	4b7a      	ldr	r3, [pc, #488]	; (8001e3c <HAL_RCC_OscConfig+0x298>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	6a1b      	ldr	r3, [r3, #32]
 8001c5c:	4977      	ldr	r1, [pc, #476]	; (8001e3c <HAL_RCC_OscConfig+0x298>)
 8001c5e:	4313      	orrs	r3, r2
 8001c60:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c62:	4b76      	ldr	r3, [pc, #472]	; (8001e3c <HAL_RCC_OscConfig+0x298>)
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	69db      	ldr	r3, [r3, #28]
 8001c6e:	021b      	lsls	r3, r3, #8
 8001c70:	4972      	ldr	r1, [pc, #456]	; (8001e3c <HAL_RCC_OscConfig+0x298>)
 8001c72:	4313      	orrs	r3, r2
 8001c74:	604b      	str	r3, [r1, #4]
 8001c76:	e025      	b.n	8001cc4 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c78:	4b70      	ldr	r3, [pc, #448]	; (8001e3c <HAL_RCC_OscConfig+0x298>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4a6f      	ldr	r2, [pc, #444]	; (8001e3c <HAL_RCC_OscConfig+0x298>)
 8001c7e:	f043 0308 	orr.w	r3, r3, #8
 8001c82:	6013      	str	r3, [r2, #0]
 8001c84:	4b6d      	ldr	r3, [pc, #436]	; (8001e3c <HAL_RCC_OscConfig+0x298>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6a1b      	ldr	r3, [r3, #32]
 8001c90:	496a      	ldr	r1, [pc, #424]	; (8001e3c <HAL_RCC_OscConfig+0x298>)
 8001c92:	4313      	orrs	r3, r2
 8001c94:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c96:	4b69      	ldr	r3, [pc, #420]	; (8001e3c <HAL_RCC_OscConfig+0x298>)
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	69db      	ldr	r3, [r3, #28]
 8001ca2:	021b      	lsls	r3, r3, #8
 8001ca4:	4965      	ldr	r1, [pc, #404]	; (8001e3c <HAL_RCC_OscConfig+0x298>)
 8001ca6:	4313      	orrs	r3, r2
 8001ca8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001caa:	69bb      	ldr	r3, [r7, #24]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d109      	bne.n	8001cc4 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6a1b      	ldr	r3, [r3, #32]
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	f000 fcff 	bl	80026b8 <RCC_SetFlashLatencyFromMSIRange>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d001      	beq.n	8001cc4 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001cc0:	2301      	movs	r3, #1
 8001cc2:	e34d      	b.n	8002360 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001cc4:	f000 fc36 	bl	8002534 <HAL_RCC_GetSysClockFreq>
 8001cc8:	4601      	mov	r1, r0
 8001cca:	4b5c      	ldr	r3, [pc, #368]	; (8001e3c <HAL_RCC_OscConfig+0x298>)
 8001ccc:	689b      	ldr	r3, [r3, #8]
 8001cce:	091b      	lsrs	r3, r3, #4
 8001cd0:	f003 030f 	and.w	r3, r3, #15
 8001cd4:	4a5a      	ldr	r2, [pc, #360]	; (8001e40 <HAL_RCC_OscConfig+0x29c>)
 8001cd6:	5cd3      	ldrb	r3, [r2, r3]
 8001cd8:	f003 031f 	and.w	r3, r3, #31
 8001cdc:	fa21 f303 	lsr.w	r3, r1, r3
 8001ce0:	4a58      	ldr	r2, [pc, #352]	; (8001e44 <HAL_RCC_OscConfig+0x2a0>)
 8001ce2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001ce4:	4b58      	ldr	r3, [pc, #352]	; (8001e48 <HAL_RCC_OscConfig+0x2a4>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4618      	mov	r0, r3
 8001cea:	f7fe ffd3 	bl	8000c94 <HAL_InitTick>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001cf2:	7bfb      	ldrb	r3, [r7, #15]
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d052      	beq.n	8001d9e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001cf8:	7bfb      	ldrb	r3, [r7, #15]
 8001cfa:	e331      	b.n	8002360 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	699b      	ldr	r3, [r3, #24]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d032      	beq.n	8001d6a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001d04:	4b4d      	ldr	r3, [pc, #308]	; (8001e3c <HAL_RCC_OscConfig+0x298>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4a4c      	ldr	r2, [pc, #304]	; (8001e3c <HAL_RCC_OscConfig+0x298>)
 8001d0a:	f043 0301 	orr.w	r3, r3, #1
 8001d0e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001d10:	f7ff f80c 	bl	8000d2c <HAL_GetTick>
 8001d14:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001d16:	e008      	b.n	8001d2a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001d18:	f7ff f808 	bl	8000d2c <HAL_GetTick>
 8001d1c:	4602      	mov	r2, r0
 8001d1e:	693b      	ldr	r3, [r7, #16]
 8001d20:	1ad3      	subs	r3, r2, r3
 8001d22:	2b02      	cmp	r3, #2
 8001d24:	d901      	bls.n	8001d2a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001d26:	2303      	movs	r3, #3
 8001d28:	e31a      	b.n	8002360 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001d2a:	4b44      	ldr	r3, [pc, #272]	; (8001e3c <HAL_RCC_OscConfig+0x298>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f003 0302 	and.w	r3, r3, #2
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d0f0      	beq.n	8001d18 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001d36:	4b41      	ldr	r3, [pc, #260]	; (8001e3c <HAL_RCC_OscConfig+0x298>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4a40      	ldr	r2, [pc, #256]	; (8001e3c <HAL_RCC_OscConfig+0x298>)
 8001d3c:	f043 0308 	orr.w	r3, r3, #8
 8001d40:	6013      	str	r3, [r2, #0]
 8001d42:	4b3e      	ldr	r3, [pc, #248]	; (8001e3c <HAL_RCC_OscConfig+0x298>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	6a1b      	ldr	r3, [r3, #32]
 8001d4e:	493b      	ldr	r1, [pc, #236]	; (8001e3c <HAL_RCC_OscConfig+0x298>)
 8001d50:	4313      	orrs	r3, r2
 8001d52:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001d54:	4b39      	ldr	r3, [pc, #228]	; (8001e3c <HAL_RCC_OscConfig+0x298>)
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	69db      	ldr	r3, [r3, #28]
 8001d60:	021b      	lsls	r3, r3, #8
 8001d62:	4936      	ldr	r1, [pc, #216]	; (8001e3c <HAL_RCC_OscConfig+0x298>)
 8001d64:	4313      	orrs	r3, r2
 8001d66:	604b      	str	r3, [r1, #4]
 8001d68:	e01a      	b.n	8001da0 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001d6a:	4b34      	ldr	r3, [pc, #208]	; (8001e3c <HAL_RCC_OscConfig+0x298>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	4a33      	ldr	r2, [pc, #204]	; (8001e3c <HAL_RCC_OscConfig+0x298>)
 8001d70:	f023 0301 	bic.w	r3, r3, #1
 8001d74:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001d76:	f7fe ffd9 	bl	8000d2c <HAL_GetTick>
 8001d7a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001d7c:	e008      	b.n	8001d90 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001d7e:	f7fe ffd5 	bl	8000d2c <HAL_GetTick>
 8001d82:	4602      	mov	r2, r0
 8001d84:	693b      	ldr	r3, [r7, #16]
 8001d86:	1ad3      	subs	r3, r2, r3
 8001d88:	2b02      	cmp	r3, #2
 8001d8a:	d901      	bls.n	8001d90 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001d8c:	2303      	movs	r3, #3
 8001d8e:	e2e7      	b.n	8002360 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001d90:	4b2a      	ldr	r3, [pc, #168]	; (8001e3c <HAL_RCC_OscConfig+0x298>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f003 0302 	and.w	r3, r3, #2
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d1f0      	bne.n	8001d7e <HAL_RCC_OscConfig+0x1da>
 8001d9c:	e000      	b.n	8001da0 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001d9e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f003 0301 	and.w	r3, r3, #1
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d074      	beq.n	8001e96 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001dac:	69bb      	ldr	r3, [r7, #24]
 8001dae:	2b08      	cmp	r3, #8
 8001db0:	d005      	beq.n	8001dbe <HAL_RCC_OscConfig+0x21a>
 8001db2:	69bb      	ldr	r3, [r7, #24]
 8001db4:	2b0c      	cmp	r3, #12
 8001db6:	d10e      	bne.n	8001dd6 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001db8:	697b      	ldr	r3, [r7, #20]
 8001dba:	2b03      	cmp	r3, #3
 8001dbc:	d10b      	bne.n	8001dd6 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001dbe:	4b1f      	ldr	r3, [pc, #124]	; (8001e3c <HAL_RCC_OscConfig+0x298>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d064      	beq.n	8001e94 <HAL_RCC_OscConfig+0x2f0>
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	685b      	ldr	r3, [r3, #4]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d160      	bne.n	8001e94 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	e2c4      	b.n	8002360 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	685b      	ldr	r3, [r3, #4]
 8001dda:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001dde:	d106      	bne.n	8001dee <HAL_RCC_OscConfig+0x24a>
 8001de0:	4b16      	ldr	r3, [pc, #88]	; (8001e3c <HAL_RCC_OscConfig+0x298>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4a15      	ldr	r2, [pc, #84]	; (8001e3c <HAL_RCC_OscConfig+0x298>)
 8001de6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001dea:	6013      	str	r3, [r2, #0]
 8001dec:	e01d      	b.n	8001e2a <HAL_RCC_OscConfig+0x286>
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001df6:	d10c      	bne.n	8001e12 <HAL_RCC_OscConfig+0x26e>
 8001df8:	4b10      	ldr	r3, [pc, #64]	; (8001e3c <HAL_RCC_OscConfig+0x298>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4a0f      	ldr	r2, [pc, #60]	; (8001e3c <HAL_RCC_OscConfig+0x298>)
 8001dfe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e02:	6013      	str	r3, [r2, #0]
 8001e04:	4b0d      	ldr	r3, [pc, #52]	; (8001e3c <HAL_RCC_OscConfig+0x298>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4a0c      	ldr	r2, [pc, #48]	; (8001e3c <HAL_RCC_OscConfig+0x298>)
 8001e0a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e0e:	6013      	str	r3, [r2, #0]
 8001e10:	e00b      	b.n	8001e2a <HAL_RCC_OscConfig+0x286>
 8001e12:	4b0a      	ldr	r3, [pc, #40]	; (8001e3c <HAL_RCC_OscConfig+0x298>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	4a09      	ldr	r2, [pc, #36]	; (8001e3c <HAL_RCC_OscConfig+0x298>)
 8001e18:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e1c:	6013      	str	r3, [r2, #0]
 8001e1e:	4b07      	ldr	r3, [pc, #28]	; (8001e3c <HAL_RCC_OscConfig+0x298>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4a06      	ldr	r2, [pc, #24]	; (8001e3c <HAL_RCC_OscConfig+0x298>)
 8001e24:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e28:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	685b      	ldr	r3, [r3, #4]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d01c      	beq.n	8001e6c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e32:	f7fe ff7b 	bl	8000d2c <HAL_GetTick>
 8001e36:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e38:	e011      	b.n	8001e5e <HAL_RCC_OscConfig+0x2ba>
 8001e3a:	bf00      	nop
 8001e3c:	40021000 	.word	0x40021000
 8001e40:	08003cc4 	.word	0x08003cc4
 8001e44:	20000000 	.word	0x20000000
 8001e48:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e4c:	f7fe ff6e 	bl	8000d2c <HAL_GetTick>
 8001e50:	4602      	mov	r2, r0
 8001e52:	693b      	ldr	r3, [r7, #16]
 8001e54:	1ad3      	subs	r3, r2, r3
 8001e56:	2b64      	cmp	r3, #100	; 0x64
 8001e58:	d901      	bls.n	8001e5e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001e5a:	2303      	movs	r3, #3
 8001e5c:	e280      	b.n	8002360 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e5e:	4baf      	ldr	r3, [pc, #700]	; (800211c <HAL_RCC_OscConfig+0x578>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d0f0      	beq.n	8001e4c <HAL_RCC_OscConfig+0x2a8>
 8001e6a:	e014      	b.n	8001e96 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e6c:	f7fe ff5e 	bl	8000d2c <HAL_GetTick>
 8001e70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001e72:	e008      	b.n	8001e86 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e74:	f7fe ff5a 	bl	8000d2c <HAL_GetTick>
 8001e78:	4602      	mov	r2, r0
 8001e7a:	693b      	ldr	r3, [r7, #16]
 8001e7c:	1ad3      	subs	r3, r2, r3
 8001e7e:	2b64      	cmp	r3, #100	; 0x64
 8001e80:	d901      	bls.n	8001e86 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001e82:	2303      	movs	r3, #3
 8001e84:	e26c      	b.n	8002360 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001e86:	4ba5      	ldr	r3, [pc, #660]	; (800211c <HAL_RCC_OscConfig+0x578>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d1f0      	bne.n	8001e74 <HAL_RCC_OscConfig+0x2d0>
 8001e92:	e000      	b.n	8001e96 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e94:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f003 0302 	and.w	r3, r3, #2
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d060      	beq.n	8001f64 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001ea2:	69bb      	ldr	r3, [r7, #24]
 8001ea4:	2b04      	cmp	r3, #4
 8001ea6:	d005      	beq.n	8001eb4 <HAL_RCC_OscConfig+0x310>
 8001ea8:	69bb      	ldr	r3, [r7, #24]
 8001eaa:	2b0c      	cmp	r3, #12
 8001eac:	d119      	bne.n	8001ee2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001eae:	697b      	ldr	r3, [r7, #20]
 8001eb0:	2b02      	cmp	r3, #2
 8001eb2:	d116      	bne.n	8001ee2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001eb4:	4b99      	ldr	r3, [pc, #612]	; (800211c <HAL_RCC_OscConfig+0x578>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d005      	beq.n	8001ecc <HAL_RCC_OscConfig+0x328>
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	68db      	ldr	r3, [r3, #12]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d101      	bne.n	8001ecc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001ec8:	2301      	movs	r3, #1
 8001eca:	e249      	b.n	8002360 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ecc:	4b93      	ldr	r3, [pc, #588]	; (800211c <HAL_RCC_OscConfig+0x578>)
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	691b      	ldr	r3, [r3, #16]
 8001ed8:	061b      	lsls	r3, r3, #24
 8001eda:	4990      	ldr	r1, [pc, #576]	; (800211c <HAL_RCC_OscConfig+0x578>)
 8001edc:	4313      	orrs	r3, r2
 8001ede:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ee0:	e040      	b.n	8001f64 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	68db      	ldr	r3, [r3, #12]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d023      	beq.n	8001f32 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001eea:	4b8c      	ldr	r3, [pc, #560]	; (800211c <HAL_RCC_OscConfig+0x578>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4a8b      	ldr	r2, [pc, #556]	; (800211c <HAL_RCC_OscConfig+0x578>)
 8001ef0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ef4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ef6:	f7fe ff19 	bl	8000d2c <HAL_GetTick>
 8001efa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001efc:	e008      	b.n	8001f10 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001efe:	f7fe ff15 	bl	8000d2c <HAL_GetTick>
 8001f02:	4602      	mov	r2, r0
 8001f04:	693b      	ldr	r3, [r7, #16]
 8001f06:	1ad3      	subs	r3, r2, r3
 8001f08:	2b02      	cmp	r3, #2
 8001f0a:	d901      	bls.n	8001f10 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001f0c:	2303      	movs	r3, #3
 8001f0e:	e227      	b.n	8002360 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f10:	4b82      	ldr	r3, [pc, #520]	; (800211c <HAL_RCC_OscConfig+0x578>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d0f0      	beq.n	8001efe <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f1c:	4b7f      	ldr	r3, [pc, #508]	; (800211c <HAL_RCC_OscConfig+0x578>)
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	691b      	ldr	r3, [r3, #16]
 8001f28:	061b      	lsls	r3, r3, #24
 8001f2a:	497c      	ldr	r1, [pc, #496]	; (800211c <HAL_RCC_OscConfig+0x578>)
 8001f2c:	4313      	orrs	r3, r2
 8001f2e:	604b      	str	r3, [r1, #4]
 8001f30:	e018      	b.n	8001f64 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f32:	4b7a      	ldr	r3, [pc, #488]	; (800211c <HAL_RCC_OscConfig+0x578>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4a79      	ldr	r2, [pc, #484]	; (800211c <HAL_RCC_OscConfig+0x578>)
 8001f38:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001f3c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f3e:	f7fe fef5 	bl	8000d2c <HAL_GetTick>
 8001f42:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001f44:	e008      	b.n	8001f58 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f46:	f7fe fef1 	bl	8000d2c <HAL_GetTick>
 8001f4a:	4602      	mov	r2, r0
 8001f4c:	693b      	ldr	r3, [r7, #16]
 8001f4e:	1ad3      	subs	r3, r2, r3
 8001f50:	2b02      	cmp	r3, #2
 8001f52:	d901      	bls.n	8001f58 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001f54:	2303      	movs	r3, #3
 8001f56:	e203      	b.n	8002360 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001f58:	4b70      	ldr	r3, [pc, #448]	; (800211c <HAL_RCC_OscConfig+0x578>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d1f0      	bne.n	8001f46 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f003 0308 	and.w	r3, r3, #8
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d03c      	beq.n	8001fea <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	695b      	ldr	r3, [r3, #20]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d01c      	beq.n	8001fb2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f78:	4b68      	ldr	r3, [pc, #416]	; (800211c <HAL_RCC_OscConfig+0x578>)
 8001f7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f7e:	4a67      	ldr	r2, [pc, #412]	; (800211c <HAL_RCC_OscConfig+0x578>)
 8001f80:	f043 0301 	orr.w	r3, r3, #1
 8001f84:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f88:	f7fe fed0 	bl	8000d2c <HAL_GetTick>
 8001f8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001f8e:	e008      	b.n	8001fa2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f90:	f7fe fecc 	bl	8000d2c <HAL_GetTick>
 8001f94:	4602      	mov	r2, r0
 8001f96:	693b      	ldr	r3, [r7, #16]
 8001f98:	1ad3      	subs	r3, r2, r3
 8001f9a:	2b02      	cmp	r3, #2
 8001f9c:	d901      	bls.n	8001fa2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001f9e:	2303      	movs	r3, #3
 8001fa0:	e1de      	b.n	8002360 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001fa2:	4b5e      	ldr	r3, [pc, #376]	; (800211c <HAL_RCC_OscConfig+0x578>)
 8001fa4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001fa8:	f003 0302 	and.w	r3, r3, #2
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d0ef      	beq.n	8001f90 <HAL_RCC_OscConfig+0x3ec>
 8001fb0:	e01b      	b.n	8001fea <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001fb2:	4b5a      	ldr	r3, [pc, #360]	; (800211c <HAL_RCC_OscConfig+0x578>)
 8001fb4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001fb8:	4a58      	ldr	r2, [pc, #352]	; (800211c <HAL_RCC_OscConfig+0x578>)
 8001fba:	f023 0301 	bic.w	r3, r3, #1
 8001fbe:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fc2:	f7fe feb3 	bl	8000d2c <HAL_GetTick>
 8001fc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001fc8:	e008      	b.n	8001fdc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fca:	f7fe feaf 	bl	8000d2c <HAL_GetTick>
 8001fce:	4602      	mov	r2, r0
 8001fd0:	693b      	ldr	r3, [r7, #16]
 8001fd2:	1ad3      	subs	r3, r2, r3
 8001fd4:	2b02      	cmp	r3, #2
 8001fd6:	d901      	bls.n	8001fdc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001fd8:	2303      	movs	r3, #3
 8001fda:	e1c1      	b.n	8002360 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001fdc:	4b4f      	ldr	r3, [pc, #316]	; (800211c <HAL_RCC_OscConfig+0x578>)
 8001fde:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001fe2:	f003 0302 	and.w	r3, r3, #2
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d1ef      	bne.n	8001fca <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f003 0304 	and.w	r3, r3, #4
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	f000 80a6 	beq.w	8002144 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001ffc:	4b47      	ldr	r3, [pc, #284]	; (800211c <HAL_RCC_OscConfig+0x578>)
 8001ffe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002000:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002004:	2b00      	cmp	r3, #0
 8002006:	d10d      	bne.n	8002024 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002008:	4b44      	ldr	r3, [pc, #272]	; (800211c <HAL_RCC_OscConfig+0x578>)
 800200a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800200c:	4a43      	ldr	r2, [pc, #268]	; (800211c <HAL_RCC_OscConfig+0x578>)
 800200e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002012:	6593      	str	r3, [r2, #88]	; 0x58
 8002014:	4b41      	ldr	r3, [pc, #260]	; (800211c <HAL_RCC_OscConfig+0x578>)
 8002016:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002018:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800201c:	60bb      	str	r3, [r7, #8]
 800201e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002020:	2301      	movs	r3, #1
 8002022:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002024:	4b3e      	ldr	r3, [pc, #248]	; (8002120 <HAL_RCC_OscConfig+0x57c>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800202c:	2b00      	cmp	r3, #0
 800202e:	d118      	bne.n	8002062 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002030:	4b3b      	ldr	r3, [pc, #236]	; (8002120 <HAL_RCC_OscConfig+0x57c>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4a3a      	ldr	r2, [pc, #232]	; (8002120 <HAL_RCC_OscConfig+0x57c>)
 8002036:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800203a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800203c:	f7fe fe76 	bl	8000d2c <HAL_GetTick>
 8002040:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002042:	e008      	b.n	8002056 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002044:	f7fe fe72 	bl	8000d2c <HAL_GetTick>
 8002048:	4602      	mov	r2, r0
 800204a:	693b      	ldr	r3, [r7, #16]
 800204c:	1ad3      	subs	r3, r2, r3
 800204e:	2b02      	cmp	r3, #2
 8002050:	d901      	bls.n	8002056 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002052:	2303      	movs	r3, #3
 8002054:	e184      	b.n	8002360 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002056:	4b32      	ldr	r3, [pc, #200]	; (8002120 <HAL_RCC_OscConfig+0x57c>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800205e:	2b00      	cmp	r3, #0
 8002060:	d0f0      	beq.n	8002044 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	689b      	ldr	r3, [r3, #8]
 8002066:	2b01      	cmp	r3, #1
 8002068:	d108      	bne.n	800207c <HAL_RCC_OscConfig+0x4d8>
 800206a:	4b2c      	ldr	r3, [pc, #176]	; (800211c <HAL_RCC_OscConfig+0x578>)
 800206c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002070:	4a2a      	ldr	r2, [pc, #168]	; (800211c <HAL_RCC_OscConfig+0x578>)
 8002072:	f043 0301 	orr.w	r3, r3, #1
 8002076:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800207a:	e024      	b.n	80020c6 <HAL_RCC_OscConfig+0x522>
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	689b      	ldr	r3, [r3, #8]
 8002080:	2b05      	cmp	r3, #5
 8002082:	d110      	bne.n	80020a6 <HAL_RCC_OscConfig+0x502>
 8002084:	4b25      	ldr	r3, [pc, #148]	; (800211c <HAL_RCC_OscConfig+0x578>)
 8002086:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800208a:	4a24      	ldr	r2, [pc, #144]	; (800211c <HAL_RCC_OscConfig+0x578>)
 800208c:	f043 0304 	orr.w	r3, r3, #4
 8002090:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002094:	4b21      	ldr	r3, [pc, #132]	; (800211c <HAL_RCC_OscConfig+0x578>)
 8002096:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800209a:	4a20      	ldr	r2, [pc, #128]	; (800211c <HAL_RCC_OscConfig+0x578>)
 800209c:	f043 0301 	orr.w	r3, r3, #1
 80020a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80020a4:	e00f      	b.n	80020c6 <HAL_RCC_OscConfig+0x522>
 80020a6:	4b1d      	ldr	r3, [pc, #116]	; (800211c <HAL_RCC_OscConfig+0x578>)
 80020a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020ac:	4a1b      	ldr	r2, [pc, #108]	; (800211c <HAL_RCC_OscConfig+0x578>)
 80020ae:	f023 0301 	bic.w	r3, r3, #1
 80020b2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80020b6:	4b19      	ldr	r3, [pc, #100]	; (800211c <HAL_RCC_OscConfig+0x578>)
 80020b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020bc:	4a17      	ldr	r2, [pc, #92]	; (800211c <HAL_RCC_OscConfig+0x578>)
 80020be:	f023 0304 	bic.w	r3, r3, #4
 80020c2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	689b      	ldr	r3, [r3, #8]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d016      	beq.n	80020fc <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020ce:	f7fe fe2d 	bl	8000d2c <HAL_GetTick>
 80020d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020d4:	e00a      	b.n	80020ec <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020d6:	f7fe fe29 	bl	8000d2c <HAL_GetTick>
 80020da:	4602      	mov	r2, r0
 80020dc:	693b      	ldr	r3, [r7, #16]
 80020de:	1ad3      	subs	r3, r2, r3
 80020e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80020e4:	4293      	cmp	r3, r2
 80020e6:	d901      	bls.n	80020ec <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80020e8:	2303      	movs	r3, #3
 80020ea:	e139      	b.n	8002360 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020ec:	4b0b      	ldr	r3, [pc, #44]	; (800211c <HAL_RCC_OscConfig+0x578>)
 80020ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020f2:	f003 0302 	and.w	r3, r3, #2
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d0ed      	beq.n	80020d6 <HAL_RCC_OscConfig+0x532>
 80020fa:	e01a      	b.n	8002132 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020fc:	f7fe fe16 	bl	8000d2c <HAL_GetTick>
 8002100:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002102:	e00f      	b.n	8002124 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002104:	f7fe fe12 	bl	8000d2c <HAL_GetTick>
 8002108:	4602      	mov	r2, r0
 800210a:	693b      	ldr	r3, [r7, #16]
 800210c:	1ad3      	subs	r3, r2, r3
 800210e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002112:	4293      	cmp	r3, r2
 8002114:	d906      	bls.n	8002124 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002116:	2303      	movs	r3, #3
 8002118:	e122      	b.n	8002360 <HAL_RCC_OscConfig+0x7bc>
 800211a:	bf00      	nop
 800211c:	40021000 	.word	0x40021000
 8002120:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002124:	4b90      	ldr	r3, [pc, #576]	; (8002368 <HAL_RCC_OscConfig+0x7c4>)
 8002126:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800212a:	f003 0302 	and.w	r3, r3, #2
 800212e:	2b00      	cmp	r3, #0
 8002130:	d1e8      	bne.n	8002104 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002132:	7ffb      	ldrb	r3, [r7, #31]
 8002134:	2b01      	cmp	r3, #1
 8002136:	d105      	bne.n	8002144 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002138:	4b8b      	ldr	r3, [pc, #556]	; (8002368 <HAL_RCC_OscConfig+0x7c4>)
 800213a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800213c:	4a8a      	ldr	r2, [pc, #552]	; (8002368 <HAL_RCC_OscConfig+0x7c4>)
 800213e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002142:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002148:	2b00      	cmp	r3, #0
 800214a:	f000 8108 	beq.w	800235e <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002152:	2b02      	cmp	r3, #2
 8002154:	f040 80d0 	bne.w	80022f8 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002158:	4b83      	ldr	r3, [pc, #524]	; (8002368 <HAL_RCC_OscConfig+0x7c4>)
 800215a:	68db      	ldr	r3, [r3, #12]
 800215c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800215e:	697b      	ldr	r3, [r7, #20]
 8002160:	f003 0203 	and.w	r2, r3, #3
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002168:	429a      	cmp	r2, r3
 800216a:	d130      	bne.n	80021ce <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800216c:	697b      	ldr	r3, [r7, #20]
 800216e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002176:	3b01      	subs	r3, #1
 8002178:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800217a:	429a      	cmp	r2, r3
 800217c:	d127      	bne.n	80021ce <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800217e:	697b      	ldr	r3, [r7, #20]
 8002180:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002188:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800218a:	429a      	cmp	r2, r3
 800218c:	d11f      	bne.n	80021ce <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800218e:	697b      	ldr	r3, [r7, #20]
 8002190:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002194:	687a      	ldr	r2, [r7, #4]
 8002196:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002198:	2a07      	cmp	r2, #7
 800219a:	bf14      	ite	ne
 800219c:	2201      	movne	r2, #1
 800219e:	2200      	moveq	r2, #0
 80021a0:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d113      	bne.n	80021ce <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80021a6:	697b      	ldr	r3, [r7, #20]
 80021a8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021b0:	085b      	lsrs	r3, r3, #1
 80021b2:	3b01      	subs	r3, #1
 80021b4:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80021b6:	429a      	cmp	r2, r3
 80021b8:	d109      	bne.n	80021ce <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80021ba:	697b      	ldr	r3, [r7, #20]
 80021bc:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c4:	085b      	lsrs	r3, r3, #1
 80021c6:	3b01      	subs	r3, #1
 80021c8:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80021ca:	429a      	cmp	r2, r3
 80021cc:	d06e      	beq.n	80022ac <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80021ce:	69bb      	ldr	r3, [r7, #24]
 80021d0:	2b0c      	cmp	r3, #12
 80021d2:	d069      	beq.n	80022a8 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80021d4:	4b64      	ldr	r3, [pc, #400]	; (8002368 <HAL_RCC_OscConfig+0x7c4>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d105      	bne.n	80021ec <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80021e0:	4b61      	ldr	r3, [pc, #388]	; (8002368 <HAL_RCC_OscConfig+0x7c4>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d001      	beq.n	80021f0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80021ec:	2301      	movs	r3, #1
 80021ee:	e0b7      	b.n	8002360 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80021f0:	4b5d      	ldr	r3, [pc, #372]	; (8002368 <HAL_RCC_OscConfig+0x7c4>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4a5c      	ldr	r2, [pc, #368]	; (8002368 <HAL_RCC_OscConfig+0x7c4>)
 80021f6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80021fa:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80021fc:	f7fe fd96 	bl	8000d2c <HAL_GetTick>
 8002200:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002202:	e008      	b.n	8002216 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002204:	f7fe fd92 	bl	8000d2c <HAL_GetTick>
 8002208:	4602      	mov	r2, r0
 800220a:	693b      	ldr	r3, [r7, #16]
 800220c:	1ad3      	subs	r3, r2, r3
 800220e:	2b02      	cmp	r3, #2
 8002210:	d901      	bls.n	8002216 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002212:	2303      	movs	r3, #3
 8002214:	e0a4      	b.n	8002360 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002216:	4b54      	ldr	r3, [pc, #336]	; (8002368 <HAL_RCC_OscConfig+0x7c4>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800221e:	2b00      	cmp	r3, #0
 8002220:	d1f0      	bne.n	8002204 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002222:	4b51      	ldr	r3, [pc, #324]	; (8002368 <HAL_RCC_OscConfig+0x7c4>)
 8002224:	68da      	ldr	r2, [r3, #12]
 8002226:	4b51      	ldr	r3, [pc, #324]	; (800236c <HAL_RCC_OscConfig+0x7c8>)
 8002228:	4013      	ands	r3, r2
 800222a:	687a      	ldr	r2, [r7, #4]
 800222c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800222e:	687a      	ldr	r2, [r7, #4]
 8002230:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002232:	3a01      	subs	r2, #1
 8002234:	0112      	lsls	r2, r2, #4
 8002236:	4311      	orrs	r1, r2
 8002238:	687a      	ldr	r2, [r7, #4]
 800223a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800223c:	0212      	lsls	r2, r2, #8
 800223e:	4311      	orrs	r1, r2
 8002240:	687a      	ldr	r2, [r7, #4]
 8002242:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002244:	0852      	lsrs	r2, r2, #1
 8002246:	3a01      	subs	r2, #1
 8002248:	0552      	lsls	r2, r2, #21
 800224a:	4311      	orrs	r1, r2
 800224c:	687a      	ldr	r2, [r7, #4]
 800224e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002250:	0852      	lsrs	r2, r2, #1
 8002252:	3a01      	subs	r2, #1
 8002254:	0652      	lsls	r2, r2, #25
 8002256:	4311      	orrs	r1, r2
 8002258:	687a      	ldr	r2, [r7, #4]
 800225a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800225c:	0912      	lsrs	r2, r2, #4
 800225e:	0452      	lsls	r2, r2, #17
 8002260:	430a      	orrs	r2, r1
 8002262:	4941      	ldr	r1, [pc, #260]	; (8002368 <HAL_RCC_OscConfig+0x7c4>)
 8002264:	4313      	orrs	r3, r2
 8002266:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002268:	4b3f      	ldr	r3, [pc, #252]	; (8002368 <HAL_RCC_OscConfig+0x7c4>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4a3e      	ldr	r2, [pc, #248]	; (8002368 <HAL_RCC_OscConfig+0x7c4>)
 800226e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002272:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002274:	4b3c      	ldr	r3, [pc, #240]	; (8002368 <HAL_RCC_OscConfig+0x7c4>)
 8002276:	68db      	ldr	r3, [r3, #12]
 8002278:	4a3b      	ldr	r2, [pc, #236]	; (8002368 <HAL_RCC_OscConfig+0x7c4>)
 800227a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800227e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002280:	f7fe fd54 	bl	8000d2c <HAL_GetTick>
 8002284:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002286:	e008      	b.n	800229a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002288:	f7fe fd50 	bl	8000d2c <HAL_GetTick>
 800228c:	4602      	mov	r2, r0
 800228e:	693b      	ldr	r3, [r7, #16]
 8002290:	1ad3      	subs	r3, r2, r3
 8002292:	2b02      	cmp	r3, #2
 8002294:	d901      	bls.n	800229a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002296:	2303      	movs	r3, #3
 8002298:	e062      	b.n	8002360 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800229a:	4b33      	ldr	r3, [pc, #204]	; (8002368 <HAL_RCC_OscConfig+0x7c4>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d0f0      	beq.n	8002288 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80022a6:	e05a      	b.n	800235e <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80022a8:	2301      	movs	r3, #1
 80022aa:	e059      	b.n	8002360 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022ac:	4b2e      	ldr	r3, [pc, #184]	; (8002368 <HAL_RCC_OscConfig+0x7c4>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d152      	bne.n	800235e <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80022b8:	4b2b      	ldr	r3, [pc, #172]	; (8002368 <HAL_RCC_OscConfig+0x7c4>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a2a      	ldr	r2, [pc, #168]	; (8002368 <HAL_RCC_OscConfig+0x7c4>)
 80022be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80022c2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80022c4:	4b28      	ldr	r3, [pc, #160]	; (8002368 <HAL_RCC_OscConfig+0x7c4>)
 80022c6:	68db      	ldr	r3, [r3, #12]
 80022c8:	4a27      	ldr	r2, [pc, #156]	; (8002368 <HAL_RCC_OscConfig+0x7c4>)
 80022ca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80022ce:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80022d0:	f7fe fd2c 	bl	8000d2c <HAL_GetTick>
 80022d4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022d6:	e008      	b.n	80022ea <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022d8:	f7fe fd28 	bl	8000d2c <HAL_GetTick>
 80022dc:	4602      	mov	r2, r0
 80022de:	693b      	ldr	r3, [r7, #16]
 80022e0:	1ad3      	subs	r3, r2, r3
 80022e2:	2b02      	cmp	r3, #2
 80022e4:	d901      	bls.n	80022ea <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80022e6:	2303      	movs	r3, #3
 80022e8:	e03a      	b.n	8002360 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022ea:	4b1f      	ldr	r3, [pc, #124]	; (8002368 <HAL_RCC_OscConfig+0x7c4>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d0f0      	beq.n	80022d8 <HAL_RCC_OscConfig+0x734>
 80022f6:	e032      	b.n	800235e <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80022f8:	69bb      	ldr	r3, [r7, #24]
 80022fa:	2b0c      	cmp	r3, #12
 80022fc:	d02d      	beq.n	800235a <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022fe:	4b1a      	ldr	r3, [pc, #104]	; (8002368 <HAL_RCC_OscConfig+0x7c4>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4a19      	ldr	r2, [pc, #100]	; (8002368 <HAL_RCC_OscConfig+0x7c4>)
 8002304:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002308:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800230a:	4b17      	ldr	r3, [pc, #92]	; (8002368 <HAL_RCC_OscConfig+0x7c4>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8002312:	2b00      	cmp	r3, #0
 8002314:	d105      	bne.n	8002322 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002316:	4b14      	ldr	r3, [pc, #80]	; (8002368 <HAL_RCC_OscConfig+0x7c4>)
 8002318:	68db      	ldr	r3, [r3, #12]
 800231a:	4a13      	ldr	r2, [pc, #76]	; (8002368 <HAL_RCC_OscConfig+0x7c4>)
 800231c:	f023 0303 	bic.w	r3, r3, #3
 8002320:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002322:	4b11      	ldr	r3, [pc, #68]	; (8002368 <HAL_RCC_OscConfig+0x7c4>)
 8002324:	68db      	ldr	r3, [r3, #12]
 8002326:	4a10      	ldr	r2, [pc, #64]	; (8002368 <HAL_RCC_OscConfig+0x7c4>)
 8002328:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800232c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002330:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002332:	f7fe fcfb 	bl	8000d2c <HAL_GetTick>
 8002336:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002338:	e008      	b.n	800234c <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800233a:	f7fe fcf7 	bl	8000d2c <HAL_GetTick>
 800233e:	4602      	mov	r2, r0
 8002340:	693b      	ldr	r3, [r7, #16]
 8002342:	1ad3      	subs	r3, r2, r3
 8002344:	2b02      	cmp	r3, #2
 8002346:	d901      	bls.n	800234c <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8002348:	2303      	movs	r3, #3
 800234a:	e009      	b.n	8002360 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800234c:	4b06      	ldr	r3, [pc, #24]	; (8002368 <HAL_RCC_OscConfig+0x7c4>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002354:	2b00      	cmp	r3, #0
 8002356:	d1f0      	bne.n	800233a <HAL_RCC_OscConfig+0x796>
 8002358:	e001      	b.n	800235e <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800235a:	2301      	movs	r3, #1
 800235c:	e000      	b.n	8002360 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 800235e:	2300      	movs	r3, #0
}
 8002360:	4618      	mov	r0, r3
 8002362:	3720      	adds	r7, #32
 8002364:	46bd      	mov	sp, r7
 8002366:	bd80      	pop	{r7, pc}
 8002368:	40021000 	.word	0x40021000
 800236c:	f99d808c 	.word	0xf99d808c

08002370 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b084      	sub	sp, #16
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
 8002378:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2b00      	cmp	r3, #0
 800237e:	d101      	bne.n	8002384 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002380:	2301      	movs	r3, #1
 8002382:	e0c8      	b.n	8002516 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002384:	4b66      	ldr	r3, [pc, #408]	; (8002520 <HAL_RCC_ClockConfig+0x1b0>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f003 0307 	and.w	r3, r3, #7
 800238c:	683a      	ldr	r2, [r7, #0]
 800238e:	429a      	cmp	r2, r3
 8002390:	d910      	bls.n	80023b4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002392:	4b63      	ldr	r3, [pc, #396]	; (8002520 <HAL_RCC_ClockConfig+0x1b0>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f023 0207 	bic.w	r2, r3, #7
 800239a:	4961      	ldr	r1, [pc, #388]	; (8002520 <HAL_RCC_ClockConfig+0x1b0>)
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	4313      	orrs	r3, r2
 80023a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023a2:	4b5f      	ldr	r3, [pc, #380]	; (8002520 <HAL_RCC_ClockConfig+0x1b0>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f003 0307 	and.w	r3, r3, #7
 80023aa:	683a      	ldr	r2, [r7, #0]
 80023ac:	429a      	cmp	r2, r3
 80023ae:	d001      	beq.n	80023b4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80023b0:	2301      	movs	r3, #1
 80023b2:	e0b0      	b.n	8002516 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f003 0301 	and.w	r3, r3, #1
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d04c      	beq.n	800245a <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	2b03      	cmp	r3, #3
 80023c6:	d107      	bne.n	80023d8 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023c8:	4b56      	ldr	r3, [pc, #344]	; (8002524 <HAL_RCC_ClockConfig+0x1b4>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d121      	bne.n	8002418 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80023d4:	2301      	movs	r3, #1
 80023d6:	e09e      	b.n	8002516 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	2b02      	cmp	r3, #2
 80023de:	d107      	bne.n	80023f0 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80023e0:	4b50      	ldr	r3, [pc, #320]	; (8002524 <HAL_RCC_ClockConfig+0x1b4>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d115      	bne.n	8002418 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80023ec:	2301      	movs	r3, #1
 80023ee:	e092      	b.n	8002516 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d107      	bne.n	8002408 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80023f8:	4b4a      	ldr	r3, [pc, #296]	; (8002524 <HAL_RCC_ClockConfig+0x1b4>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f003 0302 	and.w	r3, r3, #2
 8002400:	2b00      	cmp	r3, #0
 8002402:	d109      	bne.n	8002418 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002404:	2301      	movs	r3, #1
 8002406:	e086      	b.n	8002516 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002408:	4b46      	ldr	r3, [pc, #280]	; (8002524 <HAL_RCC_ClockConfig+0x1b4>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002410:	2b00      	cmp	r3, #0
 8002412:	d101      	bne.n	8002418 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002414:	2301      	movs	r3, #1
 8002416:	e07e      	b.n	8002516 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002418:	4b42      	ldr	r3, [pc, #264]	; (8002524 <HAL_RCC_ClockConfig+0x1b4>)
 800241a:	689b      	ldr	r3, [r3, #8]
 800241c:	f023 0203 	bic.w	r2, r3, #3
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	493f      	ldr	r1, [pc, #252]	; (8002524 <HAL_RCC_ClockConfig+0x1b4>)
 8002426:	4313      	orrs	r3, r2
 8002428:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800242a:	f7fe fc7f 	bl	8000d2c <HAL_GetTick>
 800242e:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002430:	e00a      	b.n	8002448 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002432:	f7fe fc7b 	bl	8000d2c <HAL_GetTick>
 8002436:	4602      	mov	r2, r0
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	1ad3      	subs	r3, r2, r3
 800243c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002440:	4293      	cmp	r3, r2
 8002442:	d901      	bls.n	8002448 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8002444:	2303      	movs	r3, #3
 8002446:	e066      	b.n	8002516 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002448:	4b36      	ldr	r3, [pc, #216]	; (8002524 <HAL_RCC_ClockConfig+0x1b4>)
 800244a:	689b      	ldr	r3, [r3, #8]
 800244c:	f003 020c 	and.w	r2, r3, #12
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	009b      	lsls	r3, r3, #2
 8002456:	429a      	cmp	r2, r3
 8002458:	d1eb      	bne.n	8002432 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f003 0302 	and.w	r3, r3, #2
 8002462:	2b00      	cmp	r3, #0
 8002464:	d008      	beq.n	8002478 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002466:	4b2f      	ldr	r3, [pc, #188]	; (8002524 <HAL_RCC_ClockConfig+0x1b4>)
 8002468:	689b      	ldr	r3, [r3, #8]
 800246a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	689b      	ldr	r3, [r3, #8]
 8002472:	492c      	ldr	r1, [pc, #176]	; (8002524 <HAL_RCC_ClockConfig+0x1b4>)
 8002474:	4313      	orrs	r3, r2
 8002476:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002478:	4b29      	ldr	r3, [pc, #164]	; (8002520 <HAL_RCC_ClockConfig+0x1b0>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f003 0307 	and.w	r3, r3, #7
 8002480:	683a      	ldr	r2, [r7, #0]
 8002482:	429a      	cmp	r2, r3
 8002484:	d210      	bcs.n	80024a8 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002486:	4b26      	ldr	r3, [pc, #152]	; (8002520 <HAL_RCC_ClockConfig+0x1b0>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f023 0207 	bic.w	r2, r3, #7
 800248e:	4924      	ldr	r1, [pc, #144]	; (8002520 <HAL_RCC_ClockConfig+0x1b0>)
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	4313      	orrs	r3, r2
 8002494:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002496:	4b22      	ldr	r3, [pc, #136]	; (8002520 <HAL_RCC_ClockConfig+0x1b0>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f003 0307 	and.w	r3, r3, #7
 800249e:	683a      	ldr	r2, [r7, #0]
 80024a0:	429a      	cmp	r2, r3
 80024a2:	d001      	beq.n	80024a8 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80024a4:	2301      	movs	r3, #1
 80024a6:	e036      	b.n	8002516 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f003 0304 	and.w	r3, r3, #4
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d008      	beq.n	80024c6 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024b4:	4b1b      	ldr	r3, [pc, #108]	; (8002524 <HAL_RCC_ClockConfig+0x1b4>)
 80024b6:	689b      	ldr	r3, [r3, #8]
 80024b8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	68db      	ldr	r3, [r3, #12]
 80024c0:	4918      	ldr	r1, [pc, #96]	; (8002524 <HAL_RCC_ClockConfig+0x1b4>)
 80024c2:	4313      	orrs	r3, r2
 80024c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f003 0308 	and.w	r3, r3, #8
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d009      	beq.n	80024e6 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80024d2:	4b14      	ldr	r3, [pc, #80]	; (8002524 <HAL_RCC_ClockConfig+0x1b4>)
 80024d4:	689b      	ldr	r3, [r3, #8]
 80024d6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	691b      	ldr	r3, [r3, #16]
 80024de:	00db      	lsls	r3, r3, #3
 80024e0:	4910      	ldr	r1, [pc, #64]	; (8002524 <HAL_RCC_ClockConfig+0x1b4>)
 80024e2:	4313      	orrs	r3, r2
 80024e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80024e6:	f000 f825 	bl	8002534 <HAL_RCC_GetSysClockFreq>
 80024ea:	4601      	mov	r1, r0
 80024ec:	4b0d      	ldr	r3, [pc, #52]	; (8002524 <HAL_RCC_ClockConfig+0x1b4>)
 80024ee:	689b      	ldr	r3, [r3, #8]
 80024f0:	091b      	lsrs	r3, r3, #4
 80024f2:	f003 030f 	and.w	r3, r3, #15
 80024f6:	4a0c      	ldr	r2, [pc, #48]	; (8002528 <HAL_RCC_ClockConfig+0x1b8>)
 80024f8:	5cd3      	ldrb	r3, [r2, r3]
 80024fa:	f003 031f 	and.w	r3, r3, #31
 80024fe:	fa21 f303 	lsr.w	r3, r1, r3
 8002502:	4a0a      	ldr	r2, [pc, #40]	; (800252c <HAL_RCC_ClockConfig+0x1bc>)
 8002504:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002506:	4b0a      	ldr	r3, [pc, #40]	; (8002530 <HAL_RCC_ClockConfig+0x1c0>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4618      	mov	r0, r3
 800250c:	f7fe fbc2 	bl	8000c94 <HAL_InitTick>
 8002510:	4603      	mov	r3, r0
 8002512:	72fb      	strb	r3, [r7, #11]

  return status;
 8002514:	7afb      	ldrb	r3, [r7, #11]
}
 8002516:	4618      	mov	r0, r3
 8002518:	3710      	adds	r7, #16
 800251a:	46bd      	mov	sp, r7
 800251c:	bd80      	pop	{r7, pc}
 800251e:	bf00      	nop
 8002520:	40022000 	.word	0x40022000
 8002524:	40021000 	.word	0x40021000
 8002528:	08003cc4 	.word	0x08003cc4
 800252c:	20000000 	.word	0x20000000
 8002530:	20000004 	.word	0x20000004

08002534 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002534:	b480      	push	{r7}
 8002536:	b089      	sub	sp, #36	; 0x24
 8002538:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800253a:	2300      	movs	r3, #0
 800253c:	61fb      	str	r3, [r7, #28]
 800253e:	2300      	movs	r3, #0
 8002540:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002542:	4b3d      	ldr	r3, [pc, #244]	; (8002638 <HAL_RCC_GetSysClockFreq+0x104>)
 8002544:	689b      	ldr	r3, [r3, #8]
 8002546:	f003 030c 	and.w	r3, r3, #12
 800254a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800254c:	4b3a      	ldr	r3, [pc, #232]	; (8002638 <HAL_RCC_GetSysClockFreq+0x104>)
 800254e:	68db      	ldr	r3, [r3, #12]
 8002550:	f003 0303 	and.w	r3, r3, #3
 8002554:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002556:	693b      	ldr	r3, [r7, #16]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d005      	beq.n	8002568 <HAL_RCC_GetSysClockFreq+0x34>
 800255c:	693b      	ldr	r3, [r7, #16]
 800255e:	2b0c      	cmp	r3, #12
 8002560:	d121      	bne.n	80025a6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	2b01      	cmp	r3, #1
 8002566:	d11e      	bne.n	80025a6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002568:	4b33      	ldr	r3, [pc, #204]	; (8002638 <HAL_RCC_GetSysClockFreq+0x104>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f003 0308 	and.w	r3, r3, #8
 8002570:	2b00      	cmp	r3, #0
 8002572:	d107      	bne.n	8002584 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002574:	4b30      	ldr	r3, [pc, #192]	; (8002638 <HAL_RCC_GetSysClockFreq+0x104>)
 8002576:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800257a:	0a1b      	lsrs	r3, r3, #8
 800257c:	f003 030f 	and.w	r3, r3, #15
 8002580:	61fb      	str	r3, [r7, #28]
 8002582:	e005      	b.n	8002590 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002584:	4b2c      	ldr	r3, [pc, #176]	; (8002638 <HAL_RCC_GetSysClockFreq+0x104>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	091b      	lsrs	r3, r3, #4
 800258a:	f003 030f 	and.w	r3, r3, #15
 800258e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002590:	4a2a      	ldr	r2, [pc, #168]	; (800263c <HAL_RCC_GetSysClockFreq+0x108>)
 8002592:	69fb      	ldr	r3, [r7, #28]
 8002594:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002598:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800259a:	693b      	ldr	r3, [r7, #16]
 800259c:	2b00      	cmp	r3, #0
 800259e:	d10d      	bne.n	80025bc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80025a0:	69fb      	ldr	r3, [r7, #28]
 80025a2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80025a4:	e00a      	b.n	80025bc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80025a6:	693b      	ldr	r3, [r7, #16]
 80025a8:	2b04      	cmp	r3, #4
 80025aa:	d102      	bne.n	80025b2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80025ac:	4b24      	ldr	r3, [pc, #144]	; (8002640 <HAL_RCC_GetSysClockFreq+0x10c>)
 80025ae:	61bb      	str	r3, [r7, #24]
 80025b0:	e004      	b.n	80025bc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80025b2:	693b      	ldr	r3, [r7, #16]
 80025b4:	2b08      	cmp	r3, #8
 80025b6:	d101      	bne.n	80025bc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80025b8:	4b22      	ldr	r3, [pc, #136]	; (8002644 <HAL_RCC_GetSysClockFreq+0x110>)
 80025ba:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80025bc:	693b      	ldr	r3, [r7, #16]
 80025be:	2b0c      	cmp	r3, #12
 80025c0:	d133      	bne.n	800262a <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80025c2:	4b1d      	ldr	r3, [pc, #116]	; (8002638 <HAL_RCC_GetSysClockFreq+0x104>)
 80025c4:	68db      	ldr	r3, [r3, #12]
 80025c6:	f003 0303 	and.w	r3, r3, #3
 80025ca:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80025cc:	68bb      	ldr	r3, [r7, #8]
 80025ce:	2b02      	cmp	r3, #2
 80025d0:	d002      	beq.n	80025d8 <HAL_RCC_GetSysClockFreq+0xa4>
 80025d2:	2b03      	cmp	r3, #3
 80025d4:	d003      	beq.n	80025de <HAL_RCC_GetSysClockFreq+0xaa>
 80025d6:	e005      	b.n	80025e4 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80025d8:	4b19      	ldr	r3, [pc, #100]	; (8002640 <HAL_RCC_GetSysClockFreq+0x10c>)
 80025da:	617b      	str	r3, [r7, #20]
      break;
 80025dc:	e005      	b.n	80025ea <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80025de:	4b19      	ldr	r3, [pc, #100]	; (8002644 <HAL_RCC_GetSysClockFreq+0x110>)
 80025e0:	617b      	str	r3, [r7, #20]
      break;
 80025e2:	e002      	b.n	80025ea <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80025e4:	69fb      	ldr	r3, [r7, #28]
 80025e6:	617b      	str	r3, [r7, #20]
      break;
 80025e8:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80025ea:	4b13      	ldr	r3, [pc, #76]	; (8002638 <HAL_RCC_GetSysClockFreq+0x104>)
 80025ec:	68db      	ldr	r3, [r3, #12]
 80025ee:	091b      	lsrs	r3, r3, #4
 80025f0:	f003 0307 	and.w	r3, r3, #7
 80025f4:	3301      	adds	r3, #1
 80025f6:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80025f8:	4b0f      	ldr	r3, [pc, #60]	; (8002638 <HAL_RCC_GetSysClockFreq+0x104>)
 80025fa:	68db      	ldr	r3, [r3, #12]
 80025fc:	0a1b      	lsrs	r3, r3, #8
 80025fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002602:	697a      	ldr	r2, [r7, #20]
 8002604:	fb02 f203 	mul.w	r2, r2, r3
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	fbb2 f3f3 	udiv	r3, r2, r3
 800260e:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002610:	4b09      	ldr	r3, [pc, #36]	; (8002638 <HAL_RCC_GetSysClockFreq+0x104>)
 8002612:	68db      	ldr	r3, [r3, #12]
 8002614:	0e5b      	lsrs	r3, r3, #25
 8002616:	f003 0303 	and.w	r3, r3, #3
 800261a:	3301      	adds	r3, #1
 800261c:	005b      	lsls	r3, r3, #1
 800261e:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002620:	697a      	ldr	r2, [r7, #20]
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	fbb2 f3f3 	udiv	r3, r2, r3
 8002628:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800262a:	69bb      	ldr	r3, [r7, #24]
}
 800262c:	4618      	mov	r0, r3
 800262e:	3724      	adds	r7, #36	; 0x24
 8002630:	46bd      	mov	sp, r7
 8002632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002636:	4770      	bx	lr
 8002638:	40021000 	.word	0x40021000
 800263c:	08003cdc 	.word	0x08003cdc
 8002640:	00f42400 	.word	0x00f42400
 8002644:	007a1200 	.word	0x007a1200

08002648 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002648:	b480      	push	{r7}
 800264a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800264c:	4b03      	ldr	r3, [pc, #12]	; (800265c <HAL_RCC_GetHCLKFreq+0x14>)
 800264e:	681b      	ldr	r3, [r3, #0]
}
 8002650:	4618      	mov	r0, r3
 8002652:	46bd      	mov	sp, r7
 8002654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002658:	4770      	bx	lr
 800265a:	bf00      	nop
 800265c:	20000000 	.word	0x20000000

08002660 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002664:	f7ff fff0 	bl	8002648 <HAL_RCC_GetHCLKFreq>
 8002668:	4601      	mov	r1, r0
 800266a:	4b06      	ldr	r3, [pc, #24]	; (8002684 <HAL_RCC_GetPCLK1Freq+0x24>)
 800266c:	689b      	ldr	r3, [r3, #8]
 800266e:	0a1b      	lsrs	r3, r3, #8
 8002670:	f003 0307 	and.w	r3, r3, #7
 8002674:	4a04      	ldr	r2, [pc, #16]	; (8002688 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002676:	5cd3      	ldrb	r3, [r2, r3]
 8002678:	f003 031f 	and.w	r3, r3, #31
 800267c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002680:	4618      	mov	r0, r3
 8002682:	bd80      	pop	{r7, pc}
 8002684:	40021000 	.word	0x40021000
 8002688:	08003cd4 	.word	0x08003cd4

0800268c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002690:	f7ff ffda 	bl	8002648 <HAL_RCC_GetHCLKFreq>
 8002694:	4601      	mov	r1, r0
 8002696:	4b06      	ldr	r3, [pc, #24]	; (80026b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002698:	689b      	ldr	r3, [r3, #8]
 800269a:	0adb      	lsrs	r3, r3, #11
 800269c:	f003 0307 	and.w	r3, r3, #7
 80026a0:	4a04      	ldr	r2, [pc, #16]	; (80026b4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80026a2:	5cd3      	ldrb	r3, [r2, r3]
 80026a4:	f003 031f 	and.w	r3, r3, #31
 80026a8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80026ac:	4618      	mov	r0, r3
 80026ae:	bd80      	pop	{r7, pc}
 80026b0:	40021000 	.word	0x40021000
 80026b4:	08003cd4 	.word	0x08003cd4

080026b8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b086      	sub	sp, #24
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80026c0:	2300      	movs	r3, #0
 80026c2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80026c4:	4b2a      	ldr	r3, [pc, #168]	; (8002770 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80026c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d003      	beq.n	80026d8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80026d0:	f7ff fa04 	bl	8001adc <HAL_PWREx_GetVoltageRange>
 80026d4:	6178      	str	r0, [r7, #20]
 80026d6:	e014      	b.n	8002702 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80026d8:	4b25      	ldr	r3, [pc, #148]	; (8002770 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80026da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026dc:	4a24      	ldr	r2, [pc, #144]	; (8002770 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80026de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026e2:	6593      	str	r3, [r2, #88]	; 0x58
 80026e4:	4b22      	ldr	r3, [pc, #136]	; (8002770 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80026e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026ec:	60fb      	str	r3, [r7, #12]
 80026ee:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80026f0:	f7ff f9f4 	bl	8001adc <HAL_PWREx_GetVoltageRange>
 80026f4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80026f6:	4b1e      	ldr	r3, [pc, #120]	; (8002770 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80026f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026fa:	4a1d      	ldr	r2, [pc, #116]	; (8002770 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80026fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002700:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002702:	697b      	ldr	r3, [r7, #20]
 8002704:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002708:	d10b      	bne.n	8002722 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2b80      	cmp	r3, #128	; 0x80
 800270e:	d919      	bls.n	8002744 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2ba0      	cmp	r3, #160	; 0xa0
 8002714:	d902      	bls.n	800271c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002716:	2302      	movs	r3, #2
 8002718:	613b      	str	r3, [r7, #16]
 800271a:	e013      	b.n	8002744 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800271c:	2301      	movs	r3, #1
 800271e:	613b      	str	r3, [r7, #16]
 8002720:	e010      	b.n	8002744 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	2b80      	cmp	r3, #128	; 0x80
 8002726:	d902      	bls.n	800272e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002728:	2303      	movs	r3, #3
 800272a:	613b      	str	r3, [r7, #16]
 800272c:	e00a      	b.n	8002744 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2b80      	cmp	r3, #128	; 0x80
 8002732:	d102      	bne.n	800273a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002734:	2302      	movs	r3, #2
 8002736:	613b      	str	r3, [r7, #16]
 8002738:	e004      	b.n	8002744 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	2b70      	cmp	r3, #112	; 0x70
 800273e:	d101      	bne.n	8002744 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002740:	2301      	movs	r3, #1
 8002742:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002744:	4b0b      	ldr	r3, [pc, #44]	; (8002774 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f023 0207 	bic.w	r2, r3, #7
 800274c:	4909      	ldr	r1, [pc, #36]	; (8002774 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800274e:	693b      	ldr	r3, [r7, #16]
 8002750:	4313      	orrs	r3, r2
 8002752:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002754:	4b07      	ldr	r3, [pc, #28]	; (8002774 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f003 0307 	and.w	r3, r3, #7
 800275c:	693a      	ldr	r2, [r7, #16]
 800275e:	429a      	cmp	r2, r3
 8002760:	d001      	beq.n	8002766 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002762:	2301      	movs	r3, #1
 8002764:	e000      	b.n	8002768 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002766:	2300      	movs	r3, #0
}
 8002768:	4618      	mov	r0, r3
 800276a:	3718      	adds	r7, #24
 800276c:	46bd      	mov	sp, r7
 800276e:	bd80      	pop	{r7, pc}
 8002770:	40021000 	.word	0x40021000
 8002774:	40022000 	.word	0x40022000

08002778 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b086      	sub	sp, #24
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002780:	2300      	movs	r3, #0
 8002782:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002784:	2300      	movs	r3, #0
 8002786:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002790:	2b00      	cmp	r3, #0
 8002792:	d03f      	beq.n	8002814 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002798:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800279c:	d01c      	beq.n	80027d8 <HAL_RCCEx_PeriphCLKConfig+0x60>
 800279e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80027a2:	d802      	bhi.n	80027aa <HAL_RCCEx_PeriphCLKConfig+0x32>
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d00e      	beq.n	80027c6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 80027a8:	e01f      	b.n	80027ea <HAL_RCCEx_PeriphCLKConfig+0x72>
 80027aa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80027ae:	d003      	beq.n	80027b8 <HAL_RCCEx_PeriphCLKConfig+0x40>
 80027b0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80027b4:	d01c      	beq.n	80027f0 <HAL_RCCEx_PeriphCLKConfig+0x78>
 80027b6:	e018      	b.n	80027ea <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80027b8:	4b85      	ldr	r3, [pc, #532]	; (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80027ba:	68db      	ldr	r3, [r3, #12]
 80027bc:	4a84      	ldr	r2, [pc, #528]	; (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80027be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027c2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80027c4:	e015      	b.n	80027f2 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	3304      	adds	r3, #4
 80027ca:	2100      	movs	r1, #0
 80027cc:	4618      	mov	r0, r3
 80027ce:	f000 fab9 	bl	8002d44 <RCCEx_PLLSAI1_Config>
 80027d2:	4603      	mov	r3, r0
 80027d4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80027d6:	e00c      	b.n	80027f2 <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	3320      	adds	r3, #32
 80027dc:	2100      	movs	r1, #0
 80027de:	4618      	mov	r0, r3
 80027e0:	f000 fba0 	bl	8002f24 <RCCEx_PLLSAI2_Config>
 80027e4:	4603      	mov	r3, r0
 80027e6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80027e8:	e003      	b.n	80027f2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80027ea:	2301      	movs	r3, #1
 80027ec:	74fb      	strb	r3, [r7, #19]
      break;
 80027ee:	e000      	b.n	80027f2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 80027f0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80027f2:	7cfb      	ldrb	r3, [r7, #19]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d10b      	bne.n	8002810 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80027f8:	4b75      	ldr	r3, [pc, #468]	; (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80027fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027fe:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002806:	4972      	ldr	r1, [pc, #456]	; (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002808:	4313      	orrs	r3, r2
 800280a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800280e:	e001      	b.n	8002814 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002810:	7cfb      	ldrb	r3, [r7, #19]
 8002812:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800281c:	2b00      	cmp	r3, #0
 800281e:	d03f      	beq.n	80028a0 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002824:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002828:	d01c      	beq.n	8002864 <HAL_RCCEx_PeriphCLKConfig+0xec>
 800282a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800282e:	d802      	bhi.n	8002836 <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8002830:	2b00      	cmp	r3, #0
 8002832:	d00e      	beq.n	8002852 <HAL_RCCEx_PeriphCLKConfig+0xda>
 8002834:	e01f      	b.n	8002876 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8002836:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800283a:	d003      	beq.n	8002844 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 800283c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002840:	d01c      	beq.n	800287c <HAL_RCCEx_PeriphCLKConfig+0x104>
 8002842:	e018      	b.n	8002876 <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002844:	4b62      	ldr	r3, [pc, #392]	; (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002846:	68db      	ldr	r3, [r3, #12]
 8002848:	4a61      	ldr	r2, [pc, #388]	; (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800284a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800284e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002850:	e015      	b.n	800287e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	3304      	adds	r3, #4
 8002856:	2100      	movs	r1, #0
 8002858:	4618      	mov	r0, r3
 800285a:	f000 fa73 	bl	8002d44 <RCCEx_PLLSAI1_Config>
 800285e:	4603      	mov	r3, r0
 8002860:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002862:	e00c      	b.n	800287e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	3320      	adds	r3, #32
 8002868:	2100      	movs	r1, #0
 800286a:	4618      	mov	r0, r3
 800286c:	f000 fb5a 	bl	8002f24 <RCCEx_PLLSAI2_Config>
 8002870:	4603      	mov	r3, r0
 8002872:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002874:	e003      	b.n	800287e <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002876:	2301      	movs	r3, #1
 8002878:	74fb      	strb	r3, [r7, #19]
      break;
 800287a:	e000      	b.n	800287e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800287c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800287e:	7cfb      	ldrb	r3, [r7, #19]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d10b      	bne.n	800289c <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002884:	4b52      	ldr	r3, [pc, #328]	; (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002886:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800288a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002892:	494f      	ldr	r1, [pc, #316]	; (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002894:	4313      	orrs	r3, r2
 8002896:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800289a:	e001      	b.n	80028a0 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800289c:	7cfb      	ldrb	r3, [r7, #19]
 800289e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	f000 80a0 	beq.w	80029ee <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028ae:	2300      	movs	r3, #0
 80028b0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80028b2:	4b47      	ldr	r3, [pc, #284]	; (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80028b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d101      	bne.n	80028c2 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 80028be:	2301      	movs	r3, #1
 80028c0:	e000      	b.n	80028c4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 80028c2:	2300      	movs	r3, #0
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d00d      	beq.n	80028e4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028c8:	4b41      	ldr	r3, [pc, #260]	; (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80028ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028cc:	4a40      	ldr	r2, [pc, #256]	; (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80028ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028d2:	6593      	str	r3, [r2, #88]	; 0x58
 80028d4:	4b3e      	ldr	r3, [pc, #248]	; (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80028d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028dc:	60bb      	str	r3, [r7, #8]
 80028de:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028e0:	2301      	movs	r3, #1
 80028e2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80028e4:	4b3b      	ldr	r3, [pc, #236]	; (80029d4 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4a3a      	ldr	r2, [pc, #232]	; (80029d4 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80028ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028ee:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80028f0:	f7fe fa1c 	bl	8000d2c <HAL_GetTick>
 80028f4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80028f6:	e009      	b.n	800290c <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028f8:	f7fe fa18 	bl	8000d2c <HAL_GetTick>
 80028fc:	4602      	mov	r2, r0
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	1ad3      	subs	r3, r2, r3
 8002902:	2b02      	cmp	r3, #2
 8002904:	d902      	bls.n	800290c <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 8002906:	2303      	movs	r3, #3
 8002908:	74fb      	strb	r3, [r7, #19]
        break;
 800290a:	e005      	b.n	8002918 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800290c:	4b31      	ldr	r3, [pc, #196]	; (80029d4 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002914:	2b00      	cmp	r3, #0
 8002916:	d0ef      	beq.n	80028f8 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 8002918:	7cfb      	ldrb	r3, [r7, #19]
 800291a:	2b00      	cmp	r3, #0
 800291c:	d15c      	bne.n	80029d8 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800291e:	4b2c      	ldr	r3, [pc, #176]	; (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002920:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002924:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002928:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800292a:	697b      	ldr	r3, [r7, #20]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d01f      	beq.n	8002970 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002936:	697a      	ldr	r2, [r7, #20]
 8002938:	429a      	cmp	r2, r3
 800293a:	d019      	beq.n	8002970 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800293c:	4b24      	ldr	r3, [pc, #144]	; (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800293e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002942:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002946:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002948:	4b21      	ldr	r3, [pc, #132]	; (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800294a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800294e:	4a20      	ldr	r2, [pc, #128]	; (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002950:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002954:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002958:	4b1d      	ldr	r3, [pc, #116]	; (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800295a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800295e:	4a1c      	ldr	r2, [pc, #112]	; (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002960:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002964:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002968:	4a19      	ldr	r2, [pc, #100]	; (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800296a:	697b      	ldr	r3, [r7, #20]
 800296c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002970:	697b      	ldr	r3, [r7, #20]
 8002972:	f003 0301 	and.w	r3, r3, #1
 8002976:	2b00      	cmp	r3, #0
 8002978:	d016      	beq.n	80029a8 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800297a:	f7fe f9d7 	bl	8000d2c <HAL_GetTick>
 800297e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002980:	e00b      	b.n	800299a <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002982:	f7fe f9d3 	bl	8000d2c <HAL_GetTick>
 8002986:	4602      	mov	r2, r0
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	1ad3      	subs	r3, r2, r3
 800298c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002990:	4293      	cmp	r3, r2
 8002992:	d902      	bls.n	800299a <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 8002994:	2303      	movs	r3, #3
 8002996:	74fb      	strb	r3, [r7, #19]
            break;
 8002998:	e006      	b.n	80029a8 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800299a:	4b0d      	ldr	r3, [pc, #52]	; (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800299c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029a0:	f003 0302 	and.w	r3, r3, #2
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d0ec      	beq.n	8002982 <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 80029a8:	7cfb      	ldrb	r3, [r7, #19]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d10c      	bne.n	80029c8 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80029ae:	4b08      	ldr	r3, [pc, #32]	; (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80029b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029b4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80029be:	4904      	ldr	r1, [pc, #16]	; (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80029c0:	4313      	orrs	r3, r2
 80029c2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80029c6:	e009      	b.n	80029dc <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80029c8:	7cfb      	ldrb	r3, [r7, #19]
 80029ca:	74bb      	strb	r3, [r7, #18]
 80029cc:	e006      	b.n	80029dc <HAL_RCCEx_PeriphCLKConfig+0x264>
 80029ce:	bf00      	nop
 80029d0:	40021000 	.word	0x40021000
 80029d4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80029d8:	7cfb      	ldrb	r3, [r7, #19]
 80029da:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80029dc:	7c7b      	ldrb	r3, [r7, #17]
 80029de:	2b01      	cmp	r3, #1
 80029e0:	d105      	bne.n	80029ee <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029e2:	4b9e      	ldr	r3, [pc, #632]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80029e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029e6:	4a9d      	ldr	r2, [pc, #628]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80029e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80029ec:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f003 0301 	and.w	r3, r3, #1
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d00a      	beq.n	8002a10 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80029fa:	4b98      	ldr	r3, [pc, #608]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80029fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a00:	f023 0203 	bic.w	r2, r3, #3
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a08:	4994      	ldr	r1, [pc, #592]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f003 0302 	and.w	r3, r3, #2
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d00a      	beq.n	8002a32 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002a1c:	4b8f      	ldr	r3, [pc, #572]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002a1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a22:	f023 020c 	bic.w	r2, r3, #12
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a2a:	498c      	ldr	r1, [pc, #560]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002a2c:	4313      	orrs	r3, r2
 8002a2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f003 0304 	and.w	r3, r3, #4
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d00a      	beq.n	8002a54 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002a3e:	4b87      	ldr	r3, [pc, #540]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002a40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a44:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a4c:	4983      	ldr	r1, [pc, #524]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002a4e:	4313      	orrs	r3, r2
 8002a50:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f003 0308 	and.w	r3, r3, #8
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d00a      	beq.n	8002a76 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002a60:	4b7e      	ldr	r3, [pc, #504]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002a62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a66:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a6e:	497b      	ldr	r1, [pc, #492]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002a70:	4313      	orrs	r3, r2
 8002a72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f003 0310 	and.w	r3, r3, #16
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d00a      	beq.n	8002a98 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002a82:	4b76      	ldr	r3, [pc, #472]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002a84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a88:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a90:	4972      	ldr	r1, [pc, #456]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002a92:	4313      	orrs	r3, r2
 8002a94:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f003 0320 	and.w	r3, r3, #32
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d00a      	beq.n	8002aba <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002aa4:	4b6d      	ldr	r3, [pc, #436]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002aa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002aaa:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ab2:	496a      	ldr	r1, [pc, #424]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002ab4:	4313      	orrs	r3, r2
 8002ab6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d00a      	beq.n	8002adc <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002ac6:	4b65      	ldr	r3, [pc, #404]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002ac8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002acc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ad4:	4961      	ldr	r1, [pc, #388]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002ad6:	4313      	orrs	r3, r2
 8002ad8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d00a      	beq.n	8002afe <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002ae8:	4b5c      	ldr	r3, [pc, #368]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002aea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002aee:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002af6:	4959      	ldr	r1, [pc, #356]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002af8:	4313      	orrs	r3, r2
 8002afa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d00a      	beq.n	8002b20 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002b0a:	4b54      	ldr	r3, [pc, #336]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002b0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b10:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b18:	4950      	ldr	r1, [pc, #320]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d00a      	beq.n	8002b42 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002b2c:	4b4b      	ldr	r3, [pc, #300]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002b2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b32:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b3a:	4948      	ldr	r1, [pc, #288]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002b3c:	4313      	orrs	r3, r2
 8002b3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d00a      	beq.n	8002b64 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002b4e:	4b43      	ldr	r3, [pc, #268]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002b50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b54:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b5c:	493f      	ldr	r1, [pc, #252]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002b5e:	4313      	orrs	r3, r2
 8002b60:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d028      	beq.n	8002bc2 <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002b70:	4b3a      	ldr	r3, [pc, #232]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002b72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b76:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b7e:	4937      	ldr	r1, [pc, #220]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002b80:	4313      	orrs	r3, r2
 8002b82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b8a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002b8e:	d106      	bne.n	8002b9e <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b90:	4b32      	ldr	r3, [pc, #200]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002b92:	68db      	ldr	r3, [r3, #12]
 8002b94:	4a31      	ldr	r2, [pc, #196]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002b96:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002b9a:	60d3      	str	r3, [r2, #12]
 8002b9c:	e011      	b.n	8002bc2 <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ba2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002ba6:	d10c      	bne.n	8002bc2 <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	3304      	adds	r3, #4
 8002bac:	2101      	movs	r1, #1
 8002bae:	4618      	mov	r0, r3
 8002bb0:	f000 f8c8 	bl	8002d44 <RCCEx_PLLSAI1_Config>
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002bb8:	7cfb      	ldrb	r3, [r7, #19]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d001      	beq.n	8002bc2 <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 8002bbe:	7cfb      	ldrb	r3, [r7, #19]
 8002bc0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d028      	beq.n	8002c20 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002bce:	4b23      	ldr	r3, [pc, #140]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002bd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bd4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bdc:	491f      	ldr	r1, [pc, #124]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002bde:	4313      	orrs	r3, r2
 8002be0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002be8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002bec:	d106      	bne.n	8002bfc <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002bee:	4b1b      	ldr	r3, [pc, #108]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002bf0:	68db      	ldr	r3, [r3, #12]
 8002bf2:	4a1a      	ldr	r2, [pc, #104]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002bf4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002bf8:	60d3      	str	r3, [r2, #12]
 8002bfa:	e011      	b.n	8002c20 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c00:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002c04:	d10c      	bne.n	8002c20 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	3304      	adds	r3, #4
 8002c0a:	2101      	movs	r1, #1
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	f000 f899 	bl	8002d44 <RCCEx_PLLSAI1_Config>
 8002c12:	4603      	mov	r3, r0
 8002c14:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002c16:	7cfb      	ldrb	r3, [r7, #19]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d001      	beq.n	8002c20 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 8002c1c:	7cfb      	ldrb	r3, [r7, #19]
 8002c1e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d02b      	beq.n	8002c84 <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002c2c:	4b0b      	ldr	r3, [pc, #44]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002c2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c32:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c3a:	4908      	ldr	r1, [pc, #32]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002c3c:	4313      	orrs	r3, r2
 8002c3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c46:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002c4a:	d109      	bne.n	8002c60 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002c4c:	4b03      	ldr	r3, [pc, #12]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002c4e:	68db      	ldr	r3, [r3, #12]
 8002c50:	4a02      	ldr	r2, [pc, #8]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002c52:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002c56:	60d3      	str	r3, [r2, #12]
 8002c58:	e014      	b.n	8002c84 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8002c5a:	bf00      	nop
 8002c5c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c64:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002c68:	d10c      	bne.n	8002c84 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	3304      	adds	r3, #4
 8002c6e:	2101      	movs	r1, #1
 8002c70:	4618      	mov	r0, r3
 8002c72:	f000 f867 	bl	8002d44 <RCCEx_PLLSAI1_Config>
 8002c76:	4603      	mov	r3, r0
 8002c78:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002c7a:	7cfb      	ldrb	r3, [r7, #19]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d001      	beq.n	8002c84 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 8002c80:	7cfb      	ldrb	r3, [r7, #19]
 8002c82:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d02f      	beq.n	8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002c90:	4b2b      	ldr	r3, [pc, #172]	; (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002c92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c96:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002c9e:	4928      	ldr	r1, [pc, #160]	; (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002ca0:	4313      	orrs	r3, r2
 8002ca2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002caa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002cae:	d10d      	bne.n	8002ccc <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	3304      	adds	r3, #4
 8002cb4:	2102      	movs	r1, #2
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	f000 f844 	bl	8002d44 <RCCEx_PLLSAI1_Config>
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002cc0:	7cfb      	ldrb	r3, [r7, #19]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d014      	beq.n	8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8002cc6:	7cfb      	ldrb	r3, [r7, #19]
 8002cc8:	74bb      	strb	r3, [r7, #18]
 8002cca:	e011      	b.n	8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002cd0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002cd4:	d10c      	bne.n	8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	3320      	adds	r3, #32
 8002cda:	2102      	movs	r1, #2
 8002cdc:	4618      	mov	r0, r3
 8002cde:	f000 f921 	bl	8002f24 <RCCEx_PLLSAI2_Config>
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002ce6:	7cfb      	ldrb	r3, [r7, #19]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d001      	beq.n	8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8002cec:	7cfb      	ldrb	r3, [r7, #19]
 8002cee:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d00a      	beq.n	8002d12 <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002cfc:	4b10      	ldr	r3, [pc, #64]	; (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002cfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d02:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002d0a:	490d      	ldr	r1, [pc, #52]	; (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002d0c:	4313      	orrs	r3, r2
 8002d0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d00b      	beq.n	8002d36 <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002d1e:	4b08      	ldr	r3, [pc, #32]	; (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002d20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d24:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002d2e:	4904      	ldr	r1, [pc, #16]	; (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002d30:	4313      	orrs	r3, r2
 8002d32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002d36:	7cbb      	ldrb	r3, [r7, #18]
}
 8002d38:	4618      	mov	r0, r3
 8002d3a:	3718      	adds	r7, #24
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	bd80      	pop	{r7, pc}
 8002d40:	40021000 	.word	0x40021000

08002d44 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b084      	sub	sp, #16
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
 8002d4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002d4e:	2300      	movs	r3, #0
 8002d50:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002d52:	4b73      	ldr	r3, [pc, #460]	; (8002f20 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002d54:	68db      	ldr	r3, [r3, #12]
 8002d56:	f003 0303 	and.w	r3, r3, #3
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d018      	beq.n	8002d90 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002d5e:	4b70      	ldr	r3, [pc, #448]	; (8002f20 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002d60:	68db      	ldr	r3, [r3, #12]
 8002d62:	f003 0203 	and.w	r2, r3, #3
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	429a      	cmp	r2, r3
 8002d6c:	d10d      	bne.n	8002d8a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
       ||
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d009      	beq.n	8002d8a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002d76:	4b6a      	ldr	r3, [pc, #424]	; (8002f20 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002d78:	68db      	ldr	r3, [r3, #12]
 8002d7a:	091b      	lsrs	r3, r3, #4
 8002d7c:	f003 0307 	and.w	r3, r3, #7
 8002d80:	1c5a      	adds	r2, r3, #1
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	685b      	ldr	r3, [r3, #4]
       ||
 8002d86:	429a      	cmp	r2, r3
 8002d88:	d044      	beq.n	8002e14 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	73fb      	strb	r3, [r7, #15]
 8002d8e:	e041      	b.n	8002e14 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	2b02      	cmp	r3, #2
 8002d96:	d00c      	beq.n	8002db2 <RCCEx_PLLSAI1_Config+0x6e>
 8002d98:	2b03      	cmp	r3, #3
 8002d9a:	d013      	beq.n	8002dc4 <RCCEx_PLLSAI1_Config+0x80>
 8002d9c:	2b01      	cmp	r3, #1
 8002d9e:	d120      	bne.n	8002de2 <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002da0:	4b5f      	ldr	r3, [pc, #380]	; (8002f20 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f003 0302 	and.w	r3, r3, #2
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d11d      	bne.n	8002de8 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8002dac:	2301      	movs	r3, #1
 8002dae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002db0:	e01a      	b.n	8002de8 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002db2:	4b5b      	ldr	r3, [pc, #364]	; (8002f20 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d116      	bne.n	8002dec <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002dc2:	e013      	b.n	8002dec <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002dc4:	4b56      	ldr	r3, [pc, #344]	; (8002f20 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d10f      	bne.n	8002df0 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002dd0:	4b53      	ldr	r3, [pc, #332]	; (8002f20 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d109      	bne.n	8002df0 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8002ddc:	2301      	movs	r3, #1
 8002dde:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002de0:	e006      	b.n	8002df0 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8002de2:	2301      	movs	r3, #1
 8002de4:	73fb      	strb	r3, [r7, #15]
      break;
 8002de6:	e004      	b.n	8002df2 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002de8:	bf00      	nop
 8002dea:	e002      	b.n	8002df2 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002dec:	bf00      	nop
 8002dee:	e000      	b.n	8002df2 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002df0:	bf00      	nop
    }

    if(status == HAL_OK)
 8002df2:	7bfb      	ldrb	r3, [r7, #15]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d10d      	bne.n	8002e14 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002df8:	4b49      	ldr	r3, [pc, #292]	; (8002f20 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002dfa:	68db      	ldr	r3, [r3, #12]
 8002dfc:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6819      	ldr	r1, [r3, #0]
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	3b01      	subs	r3, #1
 8002e0a:	011b      	lsls	r3, r3, #4
 8002e0c:	430b      	orrs	r3, r1
 8002e0e:	4944      	ldr	r1, [pc, #272]	; (8002f20 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002e10:	4313      	orrs	r3, r2
 8002e12:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002e14:	7bfb      	ldrb	r3, [r7, #15]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d17d      	bne.n	8002f16 <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002e1a:	4b41      	ldr	r3, [pc, #260]	; (8002f20 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4a40      	ldr	r2, [pc, #256]	; (8002f20 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002e20:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002e24:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e26:	f7fd ff81 	bl	8000d2c <HAL_GetTick>
 8002e2a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002e2c:	e009      	b.n	8002e42 <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002e2e:	f7fd ff7d 	bl	8000d2c <HAL_GetTick>
 8002e32:	4602      	mov	r2, r0
 8002e34:	68bb      	ldr	r3, [r7, #8]
 8002e36:	1ad3      	subs	r3, r2, r3
 8002e38:	2b02      	cmp	r3, #2
 8002e3a:	d902      	bls.n	8002e42 <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8002e3c:	2303      	movs	r3, #3
 8002e3e:	73fb      	strb	r3, [r7, #15]
        break;
 8002e40:	e005      	b.n	8002e4e <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002e42:	4b37      	ldr	r3, [pc, #220]	; (8002f20 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d1ef      	bne.n	8002e2e <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8002e4e:	7bfb      	ldrb	r3, [r7, #15]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d160      	bne.n	8002f16 <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d111      	bne.n	8002e7e <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002e5a:	4b31      	ldr	r3, [pc, #196]	; (8002f20 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002e5c:	691b      	ldr	r3, [r3, #16]
 8002e5e:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002e62:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e66:	687a      	ldr	r2, [r7, #4]
 8002e68:	6892      	ldr	r2, [r2, #8]
 8002e6a:	0211      	lsls	r1, r2, #8
 8002e6c:	687a      	ldr	r2, [r7, #4]
 8002e6e:	68d2      	ldr	r2, [r2, #12]
 8002e70:	0912      	lsrs	r2, r2, #4
 8002e72:	0452      	lsls	r2, r2, #17
 8002e74:	430a      	orrs	r2, r1
 8002e76:	492a      	ldr	r1, [pc, #168]	; (8002f20 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002e78:	4313      	orrs	r3, r2
 8002e7a:	610b      	str	r3, [r1, #16]
 8002e7c:	e027      	b.n	8002ece <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	2b01      	cmp	r3, #1
 8002e82:	d112      	bne.n	8002eaa <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002e84:	4b26      	ldr	r3, [pc, #152]	; (8002f20 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002e86:	691b      	ldr	r3, [r3, #16]
 8002e88:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002e8c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002e90:	687a      	ldr	r2, [r7, #4]
 8002e92:	6892      	ldr	r2, [r2, #8]
 8002e94:	0211      	lsls	r1, r2, #8
 8002e96:	687a      	ldr	r2, [r7, #4]
 8002e98:	6912      	ldr	r2, [r2, #16]
 8002e9a:	0852      	lsrs	r2, r2, #1
 8002e9c:	3a01      	subs	r2, #1
 8002e9e:	0552      	lsls	r2, r2, #21
 8002ea0:	430a      	orrs	r2, r1
 8002ea2:	491f      	ldr	r1, [pc, #124]	; (8002f20 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002ea4:	4313      	orrs	r3, r2
 8002ea6:	610b      	str	r3, [r1, #16]
 8002ea8:	e011      	b.n	8002ece <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002eaa:	4b1d      	ldr	r3, [pc, #116]	; (8002f20 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002eac:	691b      	ldr	r3, [r3, #16]
 8002eae:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002eb2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002eb6:	687a      	ldr	r2, [r7, #4]
 8002eb8:	6892      	ldr	r2, [r2, #8]
 8002eba:	0211      	lsls	r1, r2, #8
 8002ebc:	687a      	ldr	r2, [r7, #4]
 8002ebe:	6952      	ldr	r2, [r2, #20]
 8002ec0:	0852      	lsrs	r2, r2, #1
 8002ec2:	3a01      	subs	r2, #1
 8002ec4:	0652      	lsls	r2, r2, #25
 8002ec6:	430a      	orrs	r2, r1
 8002ec8:	4915      	ldr	r1, [pc, #84]	; (8002f20 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002eca:	4313      	orrs	r3, r2
 8002ecc:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002ece:	4b14      	ldr	r3, [pc, #80]	; (8002f20 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4a13      	ldr	r2, [pc, #76]	; (8002f20 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002ed4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002ed8:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002eda:	f7fd ff27 	bl	8000d2c <HAL_GetTick>
 8002ede:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002ee0:	e009      	b.n	8002ef6 <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002ee2:	f7fd ff23 	bl	8000d2c <HAL_GetTick>
 8002ee6:	4602      	mov	r2, r0
 8002ee8:	68bb      	ldr	r3, [r7, #8]
 8002eea:	1ad3      	subs	r3, r2, r3
 8002eec:	2b02      	cmp	r3, #2
 8002eee:	d902      	bls.n	8002ef6 <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 8002ef0:	2303      	movs	r3, #3
 8002ef2:	73fb      	strb	r3, [r7, #15]
          break;
 8002ef4:	e005      	b.n	8002f02 <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002ef6:	4b0a      	ldr	r3, [pc, #40]	; (8002f20 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d0ef      	beq.n	8002ee2 <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 8002f02:	7bfb      	ldrb	r3, [r7, #15]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d106      	bne.n	8002f16 <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002f08:	4b05      	ldr	r3, [pc, #20]	; (8002f20 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002f0a:	691a      	ldr	r2, [r3, #16]
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	699b      	ldr	r3, [r3, #24]
 8002f10:	4903      	ldr	r1, [pc, #12]	; (8002f20 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002f12:	4313      	orrs	r3, r2
 8002f14:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002f16:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f18:	4618      	mov	r0, r3
 8002f1a:	3710      	adds	r7, #16
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	bd80      	pop	{r7, pc}
 8002f20:	40021000 	.word	0x40021000

08002f24 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b084      	sub	sp, #16
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
 8002f2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002f2e:	2300      	movs	r3, #0
 8002f30:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002f32:	4b68      	ldr	r3, [pc, #416]	; (80030d4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002f34:	68db      	ldr	r3, [r3, #12]
 8002f36:	f003 0303 	and.w	r3, r3, #3
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d018      	beq.n	8002f70 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002f3e:	4b65      	ldr	r3, [pc, #404]	; (80030d4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002f40:	68db      	ldr	r3, [r3, #12]
 8002f42:	f003 0203 	and.w	r2, r3, #3
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	429a      	cmp	r2, r3
 8002f4c:	d10d      	bne.n	8002f6a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
       ||
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d009      	beq.n	8002f6a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002f56:	4b5f      	ldr	r3, [pc, #380]	; (80030d4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002f58:	68db      	ldr	r3, [r3, #12]
 8002f5a:	091b      	lsrs	r3, r3, #4
 8002f5c:	f003 0307 	and.w	r3, r3, #7
 8002f60:	1c5a      	adds	r2, r3, #1
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	685b      	ldr	r3, [r3, #4]
       ||
 8002f66:	429a      	cmp	r2, r3
 8002f68:	d044      	beq.n	8002ff4 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	73fb      	strb	r3, [r7, #15]
 8002f6e:	e041      	b.n	8002ff4 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	2b02      	cmp	r3, #2
 8002f76:	d00c      	beq.n	8002f92 <RCCEx_PLLSAI2_Config+0x6e>
 8002f78:	2b03      	cmp	r3, #3
 8002f7a:	d013      	beq.n	8002fa4 <RCCEx_PLLSAI2_Config+0x80>
 8002f7c:	2b01      	cmp	r3, #1
 8002f7e:	d120      	bne.n	8002fc2 <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002f80:	4b54      	ldr	r3, [pc, #336]	; (80030d4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f003 0302 	and.w	r3, r3, #2
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d11d      	bne.n	8002fc8 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 8002f8c:	2301      	movs	r3, #1
 8002f8e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f90:	e01a      	b.n	8002fc8 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002f92:	4b50      	ldr	r3, [pc, #320]	; (80030d4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d116      	bne.n	8002fcc <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002fa2:	e013      	b.n	8002fcc <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002fa4:	4b4b      	ldr	r3, [pc, #300]	; (80030d4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d10f      	bne.n	8002fd0 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002fb0:	4b48      	ldr	r3, [pc, #288]	; (80030d4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d109      	bne.n	8002fd0 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 8002fbc:	2301      	movs	r3, #1
 8002fbe:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002fc0:	e006      	b.n	8002fd0 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	73fb      	strb	r3, [r7, #15]
      break;
 8002fc6:	e004      	b.n	8002fd2 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8002fc8:	bf00      	nop
 8002fca:	e002      	b.n	8002fd2 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8002fcc:	bf00      	nop
 8002fce:	e000      	b.n	8002fd2 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8002fd0:	bf00      	nop
    }

    if(status == HAL_OK)
 8002fd2:	7bfb      	ldrb	r3, [r7, #15]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d10d      	bne.n	8002ff4 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002fd8:	4b3e      	ldr	r3, [pc, #248]	; (80030d4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002fda:	68db      	ldr	r3, [r3, #12]
 8002fdc:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6819      	ldr	r1, [r3, #0]
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	3b01      	subs	r3, #1
 8002fea:	011b      	lsls	r3, r3, #4
 8002fec:	430b      	orrs	r3, r1
 8002fee:	4939      	ldr	r1, [pc, #228]	; (80030d4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002ff0:	4313      	orrs	r3, r2
 8002ff2:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002ff4:	7bfb      	ldrb	r3, [r7, #15]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d167      	bne.n	80030ca <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002ffa:	4b36      	ldr	r3, [pc, #216]	; (80030d4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4a35      	ldr	r2, [pc, #212]	; (80030d4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003000:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003004:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003006:	f7fd fe91 	bl	8000d2c <HAL_GetTick>
 800300a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800300c:	e009      	b.n	8003022 <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800300e:	f7fd fe8d 	bl	8000d2c <HAL_GetTick>
 8003012:	4602      	mov	r2, r0
 8003014:	68bb      	ldr	r3, [r7, #8]
 8003016:	1ad3      	subs	r3, r2, r3
 8003018:	2b02      	cmp	r3, #2
 800301a:	d902      	bls.n	8003022 <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 800301c:	2303      	movs	r3, #3
 800301e:	73fb      	strb	r3, [r7, #15]
        break;
 8003020:	e005      	b.n	800302e <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003022:	4b2c      	ldr	r3, [pc, #176]	; (80030d4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800302a:	2b00      	cmp	r3, #0
 800302c:	d1ef      	bne.n	800300e <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 800302e:	7bfb      	ldrb	r3, [r7, #15]
 8003030:	2b00      	cmp	r3, #0
 8003032:	d14a      	bne.n	80030ca <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d111      	bne.n	800305e <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800303a:	4b26      	ldr	r3, [pc, #152]	; (80030d4 <RCCEx_PLLSAI2_Config+0x1b0>)
 800303c:	695b      	ldr	r3, [r3, #20]
 800303e:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003042:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003046:	687a      	ldr	r2, [r7, #4]
 8003048:	6892      	ldr	r2, [r2, #8]
 800304a:	0211      	lsls	r1, r2, #8
 800304c:	687a      	ldr	r2, [r7, #4]
 800304e:	68d2      	ldr	r2, [r2, #12]
 8003050:	0912      	lsrs	r2, r2, #4
 8003052:	0452      	lsls	r2, r2, #17
 8003054:	430a      	orrs	r2, r1
 8003056:	491f      	ldr	r1, [pc, #124]	; (80030d4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003058:	4313      	orrs	r3, r2
 800305a:	614b      	str	r3, [r1, #20]
 800305c:	e011      	b.n	8003082 <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800305e:	4b1d      	ldr	r3, [pc, #116]	; (80030d4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003060:	695b      	ldr	r3, [r3, #20]
 8003062:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003066:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800306a:	687a      	ldr	r2, [r7, #4]
 800306c:	6892      	ldr	r2, [r2, #8]
 800306e:	0211      	lsls	r1, r2, #8
 8003070:	687a      	ldr	r2, [r7, #4]
 8003072:	6912      	ldr	r2, [r2, #16]
 8003074:	0852      	lsrs	r2, r2, #1
 8003076:	3a01      	subs	r2, #1
 8003078:	0652      	lsls	r2, r2, #25
 800307a:	430a      	orrs	r2, r1
 800307c:	4915      	ldr	r1, [pc, #84]	; (80030d4 <RCCEx_PLLSAI2_Config+0x1b0>)
 800307e:	4313      	orrs	r3, r2
 8003080:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003082:	4b14      	ldr	r3, [pc, #80]	; (80030d4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4a13      	ldr	r2, [pc, #76]	; (80030d4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003088:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800308c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800308e:	f7fd fe4d 	bl	8000d2c <HAL_GetTick>
 8003092:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003094:	e009      	b.n	80030aa <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003096:	f7fd fe49 	bl	8000d2c <HAL_GetTick>
 800309a:	4602      	mov	r2, r0
 800309c:	68bb      	ldr	r3, [r7, #8]
 800309e:	1ad3      	subs	r3, r2, r3
 80030a0:	2b02      	cmp	r3, #2
 80030a2:	d902      	bls.n	80030aa <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 80030a4:	2303      	movs	r3, #3
 80030a6:	73fb      	strb	r3, [r7, #15]
          break;
 80030a8:	e005      	b.n	80030b6 <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80030aa:	4b0a      	ldr	r3, [pc, #40]	; (80030d4 <RCCEx_PLLSAI2_Config+0x1b0>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d0ef      	beq.n	8003096 <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 80030b6:	7bfb      	ldrb	r3, [r7, #15]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d106      	bne.n	80030ca <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80030bc:	4b05      	ldr	r3, [pc, #20]	; (80030d4 <RCCEx_PLLSAI2_Config+0x1b0>)
 80030be:	695a      	ldr	r2, [r3, #20]
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	695b      	ldr	r3, [r3, #20]
 80030c4:	4903      	ldr	r1, [pc, #12]	; (80030d4 <RCCEx_PLLSAI2_Config+0x1b0>)
 80030c6:	4313      	orrs	r3, r2
 80030c8:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80030ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80030cc:	4618      	mov	r0, r3
 80030ce:	3710      	adds	r7, #16
 80030d0:	46bd      	mov	sp, r7
 80030d2:	bd80      	pop	{r7, pc}
 80030d4:	40021000 	.word	0x40021000

080030d8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b082      	sub	sp, #8
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d101      	bne.n	80030ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80030e6:	2301      	movs	r3, #1
 80030e8:	e040      	b.n	800316c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d106      	bne.n	8003100 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2200      	movs	r2, #0
 80030f6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80030fa:	6878      	ldr	r0, [r7, #4]
 80030fc:	f7fd fcc8 	bl	8000a90 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2224      	movs	r2, #36	; 0x24
 8003104:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	681a      	ldr	r2, [r3, #0]
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f022 0201 	bic.w	r2, r2, #1
 8003114:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003116:	6878      	ldr	r0, [r7, #4]
 8003118:	f000 f8c0 	bl	800329c <UART_SetConfig>
 800311c:	4603      	mov	r3, r0
 800311e:	2b01      	cmp	r3, #1
 8003120:	d101      	bne.n	8003126 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003122:	2301      	movs	r3, #1
 8003124:	e022      	b.n	800316c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800312a:	2b00      	cmp	r3, #0
 800312c:	d002      	beq.n	8003134 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800312e:	6878      	ldr	r0, [r7, #4]
 8003130:	f000 fc26 	bl	8003980 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	685a      	ldr	r2, [r3, #4]
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003142:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	689a      	ldr	r2, [r3, #8]
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003152:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	681a      	ldr	r2, [r3, #0]
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f042 0201 	orr.w	r2, r2, #1
 8003162:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003164:	6878      	ldr	r0, [r7, #4]
 8003166:	f000 fcad 	bl	8003ac4 <UART_CheckIdleState>
 800316a:	4603      	mov	r3, r0
}
 800316c:	4618      	mov	r0, r3
 800316e:	3708      	adds	r7, #8
 8003170:	46bd      	mov	sp, r7
 8003172:	bd80      	pop	{r7, pc}

08003174 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b08a      	sub	sp, #40	; 0x28
 8003178:	af02      	add	r7, sp, #8
 800317a:	60f8      	str	r0, [r7, #12]
 800317c:	60b9      	str	r1, [r7, #8]
 800317e:	603b      	str	r3, [r7, #0]
 8003180:	4613      	mov	r3, r2
 8003182:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003188:	2b20      	cmp	r3, #32
 800318a:	f040 8081 	bne.w	8003290 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 800318e:	68bb      	ldr	r3, [r7, #8]
 8003190:	2b00      	cmp	r3, #0
 8003192:	d002      	beq.n	800319a <HAL_UART_Transmit+0x26>
 8003194:	88fb      	ldrh	r3, [r7, #6]
 8003196:	2b00      	cmp	r3, #0
 8003198:	d101      	bne.n	800319e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800319a:	2301      	movs	r3, #1
 800319c:	e079      	b.n	8003292 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80031a4:	2b01      	cmp	r3, #1
 80031a6:	d101      	bne.n	80031ac <HAL_UART_Transmit+0x38>
 80031a8:	2302      	movs	r3, #2
 80031aa:	e072      	b.n	8003292 <HAL_UART_Transmit+0x11e>
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	2201      	movs	r2, #1
 80031b0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	2200      	movs	r2, #0
 80031b8:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	2221      	movs	r2, #33	; 0x21
 80031be:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80031c0:	f7fd fdb4 	bl	8000d2c <HAL_GetTick>
 80031c4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	88fa      	ldrh	r2, [r7, #6]
 80031ca:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	88fa      	ldrh	r2, [r7, #6]
 80031d2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	689b      	ldr	r3, [r3, #8]
 80031da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031de:	d108      	bne.n	80031f2 <HAL_UART_Transmit+0x7e>
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	691b      	ldr	r3, [r3, #16]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d104      	bne.n	80031f2 <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 80031e8:	2300      	movs	r3, #0
 80031ea:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80031ec:	68bb      	ldr	r3, [r7, #8]
 80031ee:	61bb      	str	r3, [r7, #24]
 80031f0:	e003      	b.n	80031fa <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 80031f2:	68bb      	ldr	r3, [r7, #8]
 80031f4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80031f6:	2300      	movs	r3, #0
 80031f8:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	2200      	movs	r2, #0
 80031fe:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 8003202:	e02d      	b.n	8003260 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	9300      	str	r3, [sp, #0]
 8003208:	697b      	ldr	r3, [r7, #20]
 800320a:	2200      	movs	r2, #0
 800320c:	2180      	movs	r1, #128	; 0x80
 800320e:	68f8      	ldr	r0, [r7, #12]
 8003210:	f000 fc9d 	bl	8003b4e <UART_WaitOnFlagUntilTimeout>
 8003214:	4603      	mov	r3, r0
 8003216:	2b00      	cmp	r3, #0
 8003218:	d001      	beq.n	800321e <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 800321a:	2303      	movs	r3, #3
 800321c:	e039      	b.n	8003292 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 800321e:	69fb      	ldr	r3, [r7, #28]
 8003220:	2b00      	cmp	r3, #0
 8003222:	d10b      	bne.n	800323c <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003224:	69bb      	ldr	r3, [r7, #24]
 8003226:	881a      	ldrh	r2, [r3, #0]
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003230:	b292      	uxth	r2, r2
 8003232:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003234:	69bb      	ldr	r3, [r7, #24]
 8003236:	3302      	adds	r3, #2
 8003238:	61bb      	str	r3, [r7, #24]
 800323a:	e008      	b.n	800324e <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800323c:	69fb      	ldr	r3, [r7, #28]
 800323e:	781a      	ldrb	r2, [r3, #0]
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	b292      	uxth	r2, r2
 8003246:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003248:	69fb      	ldr	r3, [r7, #28]
 800324a:	3301      	adds	r3, #1
 800324c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003254:	b29b      	uxth	r3, r3
 8003256:	3b01      	subs	r3, #1
 8003258:	b29a      	uxth	r2, r3
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003266:	b29b      	uxth	r3, r3
 8003268:	2b00      	cmp	r3, #0
 800326a:	d1cb      	bne.n	8003204 <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	9300      	str	r3, [sp, #0]
 8003270:	697b      	ldr	r3, [r7, #20]
 8003272:	2200      	movs	r2, #0
 8003274:	2140      	movs	r1, #64	; 0x40
 8003276:	68f8      	ldr	r0, [r7, #12]
 8003278:	f000 fc69 	bl	8003b4e <UART_WaitOnFlagUntilTimeout>
 800327c:	4603      	mov	r3, r0
 800327e:	2b00      	cmp	r3, #0
 8003280:	d001      	beq.n	8003286 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8003282:	2303      	movs	r3, #3
 8003284:	e005      	b.n	8003292 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	2220      	movs	r2, #32
 800328a:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 800328c:	2300      	movs	r3, #0
 800328e:	e000      	b.n	8003292 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8003290:	2302      	movs	r3, #2
  }
}
 8003292:	4618      	mov	r0, r3
 8003294:	3720      	adds	r7, #32
 8003296:	46bd      	mov	sp, r7
 8003298:	bd80      	pop	{r7, pc}
	...

0800329c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800329c:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 80032a0:	b08a      	sub	sp, #40	; 0x28
 80032a2:	af00      	add	r7, sp, #0
 80032a4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 80032a6:	2300      	movs	r3, #0
 80032a8:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef ret               = HAL_OK;
 80032aa:	2300      	movs	r3, #0
 80032ac:	76fb      	strb	r3, [r7, #27]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 80032ae:	2300      	movs	r3, #0
 80032b0:	617b      	str	r3, [r7, #20]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	689a      	ldr	r2, [r3, #8]
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	691b      	ldr	r3, [r3, #16]
 80032ba:	431a      	orrs	r2, r3
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	695b      	ldr	r3, [r3, #20]
 80032c0:	431a      	orrs	r2, r3
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	69db      	ldr	r3, [r3, #28]
 80032c6:	4313      	orrs	r3, r2
 80032c8:	627b      	str	r3, [r7, #36]	; 0x24
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	681a      	ldr	r2, [r3, #0]
 80032d0:	4bb8      	ldr	r3, [pc, #736]	; (80035b4 <UART_SetConfig+0x318>)
 80032d2:	4013      	ands	r3, r2
 80032d4:	687a      	ldr	r2, [r7, #4]
 80032d6:	6812      	ldr	r2, [r2, #0]
 80032d8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80032da:	430b      	orrs	r3, r1
 80032dc:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	685b      	ldr	r3, [r3, #4]
 80032e4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	68da      	ldr	r2, [r3, #12]
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	430a      	orrs	r2, r1
 80032f2:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	699b      	ldr	r3, [r3, #24]
 80032f8:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4aae      	ldr	r2, [pc, #696]	; (80035b8 <UART_SetConfig+0x31c>)
 8003300:	4293      	cmp	r3, r2
 8003302:	d004      	beq.n	800330e <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6a1b      	ldr	r3, [r3, #32]
 8003308:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800330a:	4313      	orrs	r3, r2
 800330c:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	689b      	ldr	r3, [r3, #8]
 8003314:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800331e:	430a      	orrs	r2, r1
 8003320:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4aa5      	ldr	r2, [pc, #660]	; (80035bc <UART_SetConfig+0x320>)
 8003328:	4293      	cmp	r3, r2
 800332a:	d126      	bne.n	800337a <UART_SetConfig+0xde>
 800332c:	4ba4      	ldr	r3, [pc, #656]	; (80035c0 <UART_SetConfig+0x324>)
 800332e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003332:	f003 0303 	and.w	r3, r3, #3
 8003336:	2b03      	cmp	r3, #3
 8003338:	d81a      	bhi.n	8003370 <UART_SetConfig+0xd4>
 800333a:	a201      	add	r2, pc, #4	; (adr r2, 8003340 <UART_SetConfig+0xa4>)
 800333c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003340:	08003351 	.word	0x08003351
 8003344:	08003361 	.word	0x08003361
 8003348:	08003359 	.word	0x08003359
 800334c:	08003369 	.word	0x08003369
 8003350:	2301      	movs	r3, #1
 8003352:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003356:	e105      	b.n	8003564 <UART_SetConfig+0x2c8>
 8003358:	2302      	movs	r3, #2
 800335a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800335e:	e101      	b.n	8003564 <UART_SetConfig+0x2c8>
 8003360:	2304      	movs	r3, #4
 8003362:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003366:	e0fd      	b.n	8003564 <UART_SetConfig+0x2c8>
 8003368:	2308      	movs	r3, #8
 800336a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800336e:	e0f9      	b.n	8003564 <UART_SetConfig+0x2c8>
 8003370:	2310      	movs	r3, #16
 8003372:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003376:	bf00      	nop
 8003378:	e0f4      	b.n	8003564 <UART_SetConfig+0x2c8>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4a91      	ldr	r2, [pc, #580]	; (80035c4 <UART_SetConfig+0x328>)
 8003380:	4293      	cmp	r3, r2
 8003382:	d138      	bne.n	80033f6 <UART_SetConfig+0x15a>
 8003384:	4b8e      	ldr	r3, [pc, #568]	; (80035c0 <UART_SetConfig+0x324>)
 8003386:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800338a:	f003 030c 	and.w	r3, r3, #12
 800338e:	2b0c      	cmp	r3, #12
 8003390:	d82c      	bhi.n	80033ec <UART_SetConfig+0x150>
 8003392:	a201      	add	r2, pc, #4	; (adr r2, 8003398 <UART_SetConfig+0xfc>)
 8003394:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003398:	080033cd 	.word	0x080033cd
 800339c:	080033ed 	.word	0x080033ed
 80033a0:	080033ed 	.word	0x080033ed
 80033a4:	080033ed 	.word	0x080033ed
 80033a8:	080033dd 	.word	0x080033dd
 80033ac:	080033ed 	.word	0x080033ed
 80033b0:	080033ed 	.word	0x080033ed
 80033b4:	080033ed 	.word	0x080033ed
 80033b8:	080033d5 	.word	0x080033d5
 80033bc:	080033ed 	.word	0x080033ed
 80033c0:	080033ed 	.word	0x080033ed
 80033c4:	080033ed 	.word	0x080033ed
 80033c8:	080033e5 	.word	0x080033e5
 80033cc:	2300      	movs	r3, #0
 80033ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80033d2:	e0c7      	b.n	8003564 <UART_SetConfig+0x2c8>
 80033d4:	2302      	movs	r3, #2
 80033d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80033da:	e0c3      	b.n	8003564 <UART_SetConfig+0x2c8>
 80033dc:	2304      	movs	r3, #4
 80033de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80033e2:	e0bf      	b.n	8003564 <UART_SetConfig+0x2c8>
 80033e4:	2308      	movs	r3, #8
 80033e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80033ea:	e0bb      	b.n	8003564 <UART_SetConfig+0x2c8>
 80033ec:	2310      	movs	r3, #16
 80033ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80033f2:	bf00      	nop
 80033f4:	e0b6      	b.n	8003564 <UART_SetConfig+0x2c8>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4a73      	ldr	r2, [pc, #460]	; (80035c8 <UART_SetConfig+0x32c>)
 80033fc:	4293      	cmp	r3, r2
 80033fe:	d125      	bne.n	800344c <UART_SetConfig+0x1b0>
 8003400:	4b6f      	ldr	r3, [pc, #444]	; (80035c0 <UART_SetConfig+0x324>)
 8003402:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003406:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800340a:	2b10      	cmp	r3, #16
 800340c:	d011      	beq.n	8003432 <UART_SetConfig+0x196>
 800340e:	2b10      	cmp	r3, #16
 8003410:	d802      	bhi.n	8003418 <UART_SetConfig+0x17c>
 8003412:	2b00      	cmp	r3, #0
 8003414:	d005      	beq.n	8003422 <UART_SetConfig+0x186>
 8003416:	e014      	b.n	8003442 <UART_SetConfig+0x1a6>
 8003418:	2b20      	cmp	r3, #32
 800341a:	d006      	beq.n	800342a <UART_SetConfig+0x18e>
 800341c:	2b30      	cmp	r3, #48	; 0x30
 800341e:	d00c      	beq.n	800343a <UART_SetConfig+0x19e>
 8003420:	e00f      	b.n	8003442 <UART_SetConfig+0x1a6>
 8003422:	2300      	movs	r3, #0
 8003424:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003428:	e09c      	b.n	8003564 <UART_SetConfig+0x2c8>
 800342a:	2302      	movs	r3, #2
 800342c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003430:	e098      	b.n	8003564 <UART_SetConfig+0x2c8>
 8003432:	2304      	movs	r3, #4
 8003434:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003438:	e094      	b.n	8003564 <UART_SetConfig+0x2c8>
 800343a:	2308      	movs	r3, #8
 800343c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003440:	e090      	b.n	8003564 <UART_SetConfig+0x2c8>
 8003442:	2310      	movs	r3, #16
 8003444:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003448:	bf00      	nop
 800344a:	e08b      	b.n	8003564 <UART_SetConfig+0x2c8>
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4a5e      	ldr	r2, [pc, #376]	; (80035cc <UART_SetConfig+0x330>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d125      	bne.n	80034a2 <UART_SetConfig+0x206>
 8003456:	4b5a      	ldr	r3, [pc, #360]	; (80035c0 <UART_SetConfig+0x324>)
 8003458:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800345c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003460:	2b40      	cmp	r3, #64	; 0x40
 8003462:	d011      	beq.n	8003488 <UART_SetConfig+0x1ec>
 8003464:	2b40      	cmp	r3, #64	; 0x40
 8003466:	d802      	bhi.n	800346e <UART_SetConfig+0x1d2>
 8003468:	2b00      	cmp	r3, #0
 800346a:	d005      	beq.n	8003478 <UART_SetConfig+0x1dc>
 800346c:	e014      	b.n	8003498 <UART_SetConfig+0x1fc>
 800346e:	2b80      	cmp	r3, #128	; 0x80
 8003470:	d006      	beq.n	8003480 <UART_SetConfig+0x1e4>
 8003472:	2bc0      	cmp	r3, #192	; 0xc0
 8003474:	d00c      	beq.n	8003490 <UART_SetConfig+0x1f4>
 8003476:	e00f      	b.n	8003498 <UART_SetConfig+0x1fc>
 8003478:	2300      	movs	r3, #0
 800347a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800347e:	e071      	b.n	8003564 <UART_SetConfig+0x2c8>
 8003480:	2302      	movs	r3, #2
 8003482:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003486:	e06d      	b.n	8003564 <UART_SetConfig+0x2c8>
 8003488:	2304      	movs	r3, #4
 800348a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800348e:	e069      	b.n	8003564 <UART_SetConfig+0x2c8>
 8003490:	2308      	movs	r3, #8
 8003492:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003496:	e065      	b.n	8003564 <UART_SetConfig+0x2c8>
 8003498:	2310      	movs	r3, #16
 800349a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800349e:	bf00      	nop
 80034a0:	e060      	b.n	8003564 <UART_SetConfig+0x2c8>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4a4a      	ldr	r2, [pc, #296]	; (80035d0 <UART_SetConfig+0x334>)
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d129      	bne.n	8003500 <UART_SetConfig+0x264>
 80034ac:	4b44      	ldr	r3, [pc, #272]	; (80035c0 <UART_SetConfig+0x324>)
 80034ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80034ba:	d014      	beq.n	80034e6 <UART_SetConfig+0x24a>
 80034bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80034c0:	d802      	bhi.n	80034c8 <UART_SetConfig+0x22c>
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d007      	beq.n	80034d6 <UART_SetConfig+0x23a>
 80034c6:	e016      	b.n	80034f6 <UART_SetConfig+0x25a>
 80034c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80034cc:	d007      	beq.n	80034de <UART_SetConfig+0x242>
 80034ce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80034d2:	d00c      	beq.n	80034ee <UART_SetConfig+0x252>
 80034d4:	e00f      	b.n	80034f6 <UART_SetConfig+0x25a>
 80034d6:	2300      	movs	r3, #0
 80034d8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80034dc:	e042      	b.n	8003564 <UART_SetConfig+0x2c8>
 80034de:	2302      	movs	r3, #2
 80034e0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80034e4:	e03e      	b.n	8003564 <UART_SetConfig+0x2c8>
 80034e6:	2304      	movs	r3, #4
 80034e8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80034ec:	e03a      	b.n	8003564 <UART_SetConfig+0x2c8>
 80034ee:	2308      	movs	r3, #8
 80034f0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80034f4:	e036      	b.n	8003564 <UART_SetConfig+0x2c8>
 80034f6:	2310      	movs	r3, #16
 80034f8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80034fc:	bf00      	nop
 80034fe:	e031      	b.n	8003564 <UART_SetConfig+0x2c8>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4a2c      	ldr	r2, [pc, #176]	; (80035b8 <UART_SetConfig+0x31c>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d129      	bne.n	800355e <UART_SetConfig+0x2c2>
 800350a:	4b2d      	ldr	r3, [pc, #180]	; (80035c0 <UART_SetConfig+0x324>)
 800350c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003510:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003514:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003518:	d014      	beq.n	8003544 <UART_SetConfig+0x2a8>
 800351a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800351e:	d802      	bhi.n	8003526 <UART_SetConfig+0x28a>
 8003520:	2b00      	cmp	r3, #0
 8003522:	d007      	beq.n	8003534 <UART_SetConfig+0x298>
 8003524:	e016      	b.n	8003554 <UART_SetConfig+0x2b8>
 8003526:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800352a:	d007      	beq.n	800353c <UART_SetConfig+0x2a0>
 800352c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003530:	d00c      	beq.n	800354c <UART_SetConfig+0x2b0>
 8003532:	e00f      	b.n	8003554 <UART_SetConfig+0x2b8>
 8003534:	2300      	movs	r3, #0
 8003536:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800353a:	e013      	b.n	8003564 <UART_SetConfig+0x2c8>
 800353c:	2302      	movs	r3, #2
 800353e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003542:	e00f      	b.n	8003564 <UART_SetConfig+0x2c8>
 8003544:	2304      	movs	r3, #4
 8003546:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800354a:	e00b      	b.n	8003564 <UART_SetConfig+0x2c8>
 800354c:	2308      	movs	r3, #8
 800354e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003552:	e007      	b.n	8003564 <UART_SetConfig+0x2c8>
 8003554:	2310      	movs	r3, #16
 8003556:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800355a:	bf00      	nop
 800355c:	e002      	b.n	8003564 <UART_SetConfig+0x2c8>
 800355e:	2310      	movs	r3, #16
 8003560:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	4a13      	ldr	r2, [pc, #76]	; (80035b8 <UART_SetConfig+0x31c>)
 800356a:	4293      	cmp	r3, r2
 800356c:	f040 80fe 	bne.w	800376c <UART_SetConfig+0x4d0>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003570:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003574:	2b08      	cmp	r3, #8
 8003576:	d837      	bhi.n	80035e8 <UART_SetConfig+0x34c>
 8003578:	a201      	add	r2, pc, #4	; (adr r2, 8003580 <UART_SetConfig+0x2e4>)
 800357a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800357e:	bf00      	nop
 8003580:	080035a5 	.word	0x080035a5
 8003584:	080035e9 	.word	0x080035e9
 8003588:	080035ad 	.word	0x080035ad
 800358c:	080035e9 	.word	0x080035e9
 8003590:	080035d9 	.word	0x080035d9
 8003594:	080035e9 	.word	0x080035e9
 8003598:	080035e9 	.word	0x080035e9
 800359c:	080035e9 	.word	0x080035e9
 80035a0:	080035e1 	.word	0x080035e1
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 80035a4:	f7ff f85c 	bl	8002660 <HAL_RCC_GetPCLK1Freq>
 80035a8:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80035aa:	e020      	b.n	80035ee <UART_SetConfig+0x352>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 80035ac:	4b09      	ldr	r3, [pc, #36]	; (80035d4 <UART_SetConfig+0x338>)
 80035ae:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80035b0:	e01d      	b.n	80035ee <UART_SetConfig+0x352>
 80035b2:	bf00      	nop
 80035b4:	efff69f3 	.word	0xefff69f3
 80035b8:	40008000 	.word	0x40008000
 80035bc:	40013800 	.word	0x40013800
 80035c0:	40021000 	.word	0x40021000
 80035c4:	40004400 	.word	0x40004400
 80035c8:	40004800 	.word	0x40004800
 80035cc:	40004c00 	.word	0x40004c00
 80035d0:	40005000 	.word	0x40005000
 80035d4:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 80035d8:	f7fe ffac 	bl	8002534 <HAL_RCC_GetSysClockFreq>
 80035dc:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80035de:	e006      	b.n	80035ee <UART_SetConfig+0x352>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 80035e0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80035e4:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80035e6:	e002      	b.n	80035ee <UART_SetConfig+0x352>
      default:
        ret = HAL_ERROR;
 80035e8:	2301      	movs	r3, #1
 80035ea:	76fb      	strb	r3, [r7, #27]
        break;
 80035ec:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 80035ee:	697b      	ldr	r3, [r7, #20]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	f000 81b9 	beq.w	8003968 <UART_SetConfig+0x6cc>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	685a      	ldr	r2, [r3, #4]
 80035fa:	4613      	mov	r3, r2
 80035fc:	005b      	lsls	r3, r3, #1
 80035fe:	4413      	add	r3, r2
 8003600:	697a      	ldr	r2, [r7, #20]
 8003602:	429a      	cmp	r2, r3
 8003604:	d305      	bcc.n	8003612 <UART_SetConfig+0x376>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	685b      	ldr	r3, [r3, #4]
 800360a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800360c:	697a      	ldr	r2, [r7, #20]
 800360e:	429a      	cmp	r2, r3
 8003610:	d902      	bls.n	8003618 <UART_SetConfig+0x37c>
      {
        ret = HAL_ERROR;
 8003612:	2301      	movs	r3, #1
 8003614:	76fb      	strb	r3, [r7, #27]
 8003616:	e1a7      	b.n	8003968 <UART_SetConfig+0x6cc>
      }
      else
      {
        switch (clocksource)
 8003618:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800361c:	2b08      	cmp	r3, #8
 800361e:	f200 8092 	bhi.w	8003746 <UART_SetConfig+0x4aa>
 8003622:	a201      	add	r2, pc, #4	; (adr r2, 8003628 <UART_SetConfig+0x38c>)
 8003624:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003628:	0800364d 	.word	0x0800364d
 800362c:	08003747 	.word	0x08003747
 8003630:	0800369b 	.word	0x0800369b
 8003634:	08003747 	.word	0x08003747
 8003638:	080036cf 	.word	0x080036cf
 800363c:	08003747 	.word	0x08003747
 8003640:	08003747 	.word	0x08003747
 8003644:	08003747 	.word	0x08003747
 8003648:	0800371d 	.word	0x0800371d
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 800364c:	f7ff f808 	bl	8002660 <HAL_RCC_GetPCLK1Freq>
 8003650:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003652:	693b      	ldr	r3, [r7, #16]
 8003654:	4619      	mov	r1, r3
 8003656:	f04f 0200 	mov.w	r2, #0
 800365a:	f04f 0300 	mov.w	r3, #0
 800365e:	f04f 0400 	mov.w	r4, #0
 8003662:	0214      	lsls	r4, r2, #8
 8003664:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8003668:	020b      	lsls	r3, r1, #8
 800366a:	687a      	ldr	r2, [r7, #4]
 800366c:	6852      	ldr	r2, [r2, #4]
 800366e:	0852      	lsrs	r2, r2, #1
 8003670:	4611      	mov	r1, r2
 8003672:	f04f 0200 	mov.w	r2, #0
 8003676:	eb13 0b01 	adds.w	fp, r3, r1
 800367a:	eb44 0c02 	adc.w	ip, r4, r2
 800367e:	4658      	mov	r0, fp
 8003680:	4661      	mov	r1, ip
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	685b      	ldr	r3, [r3, #4]
 8003686:	f04f 0400 	mov.w	r4, #0
 800368a:	461a      	mov	r2, r3
 800368c:	4623      	mov	r3, r4
 800368e:	f7fc fda3 	bl	80001d8 <__aeabi_uldivmod>
 8003692:	4603      	mov	r3, r0
 8003694:	460c      	mov	r4, r1
 8003696:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8003698:	e058      	b.n	800374c <UART_SetConfig+0x4b0>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	685b      	ldr	r3, [r3, #4]
 800369e:	085b      	lsrs	r3, r3, #1
 80036a0:	f04f 0400 	mov.w	r4, #0
 80036a4:	49ae      	ldr	r1, [pc, #696]	; (8003960 <UART_SetConfig+0x6c4>)
 80036a6:	f04f 0200 	mov.w	r2, #0
 80036aa:	eb13 0b01 	adds.w	fp, r3, r1
 80036ae:	eb44 0c02 	adc.w	ip, r4, r2
 80036b2:	4658      	mov	r0, fp
 80036b4:	4661      	mov	r1, ip
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	685b      	ldr	r3, [r3, #4]
 80036ba:	f04f 0400 	mov.w	r4, #0
 80036be:	461a      	mov	r2, r3
 80036c0:	4623      	mov	r3, r4
 80036c2:	f7fc fd89 	bl	80001d8 <__aeabi_uldivmod>
 80036c6:	4603      	mov	r3, r0
 80036c8:	460c      	mov	r4, r1
 80036ca:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 80036cc:	e03e      	b.n	800374c <UART_SetConfig+0x4b0>
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 80036ce:	f7fe ff31 	bl	8002534 <HAL_RCC_GetSysClockFreq>
 80036d2:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80036d4:	693b      	ldr	r3, [r7, #16]
 80036d6:	4619      	mov	r1, r3
 80036d8:	f04f 0200 	mov.w	r2, #0
 80036dc:	f04f 0300 	mov.w	r3, #0
 80036e0:	f04f 0400 	mov.w	r4, #0
 80036e4:	0214      	lsls	r4, r2, #8
 80036e6:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80036ea:	020b      	lsls	r3, r1, #8
 80036ec:	687a      	ldr	r2, [r7, #4]
 80036ee:	6852      	ldr	r2, [r2, #4]
 80036f0:	0852      	lsrs	r2, r2, #1
 80036f2:	4611      	mov	r1, r2
 80036f4:	f04f 0200 	mov.w	r2, #0
 80036f8:	eb13 0b01 	adds.w	fp, r3, r1
 80036fc:	eb44 0c02 	adc.w	ip, r4, r2
 8003700:	4658      	mov	r0, fp
 8003702:	4661      	mov	r1, ip
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	685b      	ldr	r3, [r3, #4]
 8003708:	f04f 0400 	mov.w	r4, #0
 800370c:	461a      	mov	r2, r3
 800370e:	4623      	mov	r3, r4
 8003710:	f7fc fd62 	bl	80001d8 <__aeabi_uldivmod>
 8003714:	4603      	mov	r3, r0
 8003716:	460c      	mov	r4, r1
 8003718:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 800371a:	e017      	b.n	800374c <UART_SetConfig+0x4b0>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	685b      	ldr	r3, [r3, #4]
 8003720:	085b      	lsrs	r3, r3, #1
 8003722:	f04f 0400 	mov.w	r4, #0
 8003726:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 800372a:	f144 0100 	adc.w	r1, r4, #0
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	685b      	ldr	r3, [r3, #4]
 8003732:	f04f 0400 	mov.w	r4, #0
 8003736:	461a      	mov	r2, r3
 8003738:	4623      	mov	r3, r4
 800373a:	f7fc fd4d 	bl	80001d8 <__aeabi_uldivmod>
 800373e:	4603      	mov	r3, r0
 8003740:	460c      	mov	r4, r1
 8003742:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8003744:	e002      	b.n	800374c <UART_SetConfig+0x4b0>
          default:
            ret = HAL_ERROR;
 8003746:	2301      	movs	r3, #1
 8003748:	76fb      	strb	r3, [r7, #27]
            break;
 800374a:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800374c:	69fb      	ldr	r3, [r7, #28]
 800374e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003752:	d308      	bcc.n	8003766 <UART_SetConfig+0x4ca>
 8003754:	69fb      	ldr	r3, [r7, #28]
 8003756:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800375a:	d204      	bcs.n	8003766 <UART_SetConfig+0x4ca>
        {
          huart->Instance->BRR = usartdiv;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	69fa      	ldr	r2, [r7, #28]
 8003762:	60da      	str	r2, [r3, #12]
 8003764:	e100      	b.n	8003968 <UART_SetConfig+0x6cc>
        }
        else
        {
          ret = HAL_ERROR;
 8003766:	2301      	movs	r3, #1
 8003768:	76fb      	strb	r3, [r7, #27]
 800376a:	e0fd      	b.n	8003968 <UART_SetConfig+0x6cc>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	69db      	ldr	r3, [r3, #28]
 8003770:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003774:	f040 8084 	bne.w	8003880 <UART_SetConfig+0x5e4>
  {
    switch (clocksource)
 8003778:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800377c:	2b08      	cmp	r3, #8
 800377e:	d85f      	bhi.n	8003840 <UART_SetConfig+0x5a4>
 8003780:	a201      	add	r2, pc, #4	; (adr r2, 8003788 <UART_SetConfig+0x4ec>)
 8003782:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003786:	bf00      	nop
 8003788:	080037ad 	.word	0x080037ad
 800378c:	080037cd 	.word	0x080037cd
 8003790:	080037ed 	.word	0x080037ed
 8003794:	08003841 	.word	0x08003841
 8003798:	08003809 	.word	0x08003809
 800379c:	08003841 	.word	0x08003841
 80037a0:	08003841 	.word	0x08003841
 80037a4:	08003841 	.word	0x08003841
 80037a8:	08003829 	.word	0x08003829
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80037ac:	f7fe ff58 	bl	8002660 <HAL_RCC_GetPCLK1Freq>
 80037b0:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80037b2:	693b      	ldr	r3, [r7, #16]
 80037b4:	005a      	lsls	r2, r3, #1
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	685b      	ldr	r3, [r3, #4]
 80037ba:	085b      	lsrs	r3, r3, #1
 80037bc:	441a      	add	r2, r3
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	685b      	ldr	r3, [r3, #4]
 80037c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80037c6:	b29b      	uxth	r3, r3
 80037c8:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80037ca:	e03c      	b.n	8003846 <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80037cc:	f7fe ff5e 	bl	800268c <HAL_RCC_GetPCLK2Freq>
 80037d0:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80037d2:	693b      	ldr	r3, [r7, #16]
 80037d4:	005a      	lsls	r2, r3, #1
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	685b      	ldr	r3, [r3, #4]
 80037da:	085b      	lsrs	r3, r3, #1
 80037dc:	441a      	add	r2, r3
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	685b      	ldr	r3, [r3, #4]
 80037e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80037e6:	b29b      	uxth	r3, r3
 80037e8:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80037ea:	e02c      	b.n	8003846 <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	685b      	ldr	r3, [r3, #4]
 80037f0:	085b      	lsrs	r3, r3, #1
 80037f2:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 80037f6:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 80037fa:	687a      	ldr	r2, [r7, #4]
 80037fc:	6852      	ldr	r2, [r2, #4]
 80037fe:	fbb3 f3f2 	udiv	r3, r3, r2
 8003802:	b29b      	uxth	r3, r3
 8003804:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003806:	e01e      	b.n	8003846 <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003808:	f7fe fe94 	bl	8002534 <HAL_RCC_GetSysClockFreq>
 800380c:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800380e:	693b      	ldr	r3, [r7, #16]
 8003810:	005a      	lsls	r2, r3, #1
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	685b      	ldr	r3, [r3, #4]
 8003816:	085b      	lsrs	r3, r3, #1
 8003818:	441a      	add	r2, r3
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	685b      	ldr	r3, [r3, #4]
 800381e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003822:	b29b      	uxth	r3, r3
 8003824:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003826:	e00e      	b.n	8003846 <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	685b      	ldr	r3, [r3, #4]
 800382c:	085b      	lsrs	r3, r3, #1
 800382e:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	fbb2 f3f3 	udiv	r3, r2, r3
 800383a:	b29b      	uxth	r3, r3
 800383c:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800383e:	e002      	b.n	8003846 <UART_SetConfig+0x5aa>
      default:
        ret = HAL_ERROR;
 8003840:	2301      	movs	r3, #1
 8003842:	76fb      	strb	r3, [r7, #27]
        break;
 8003844:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003846:	69fb      	ldr	r3, [r7, #28]
 8003848:	2b0f      	cmp	r3, #15
 800384a:	d916      	bls.n	800387a <UART_SetConfig+0x5de>
 800384c:	69fb      	ldr	r3, [r7, #28]
 800384e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003852:	d212      	bcs.n	800387a <UART_SetConfig+0x5de>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003854:	69fb      	ldr	r3, [r7, #28]
 8003856:	b29b      	uxth	r3, r3
 8003858:	f023 030f 	bic.w	r3, r3, #15
 800385c:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800385e:	69fb      	ldr	r3, [r7, #28]
 8003860:	085b      	lsrs	r3, r3, #1
 8003862:	b29b      	uxth	r3, r3
 8003864:	f003 0307 	and.w	r3, r3, #7
 8003868:	b29a      	uxth	r2, r3
 800386a:	89fb      	ldrh	r3, [r7, #14]
 800386c:	4313      	orrs	r3, r2
 800386e:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	89fa      	ldrh	r2, [r7, #14]
 8003876:	60da      	str	r2, [r3, #12]
 8003878:	e076      	b.n	8003968 <UART_SetConfig+0x6cc>
    }
    else
    {
      ret = HAL_ERROR;
 800387a:	2301      	movs	r3, #1
 800387c:	76fb      	strb	r3, [r7, #27]
 800387e:	e073      	b.n	8003968 <UART_SetConfig+0x6cc>
    }
  }
  else
  {
    switch (clocksource)
 8003880:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003884:	2b08      	cmp	r3, #8
 8003886:	d85c      	bhi.n	8003942 <UART_SetConfig+0x6a6>
 8003888:	a201      	add	r2, pc, #4	; (adr r2, 8003890 <UART_SetConfig+0x5f4>)
 800388a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800388e:	bf00      	nop
 8003890:	080038b5 	.word	0x080038b5
 8003894:	080038d3 	.word	0x080038d3
 8003898:	080038f1 	.word	0x080038f1
 800389c:	08003943 	.word	0x08003943
 80038a0:	0800390d 	.word	0x0800390d
 80038a4:	08003943 	.word	0x08003943
 80038a8:	08003943 	.word	0x08003943
 80038ac:	08003943 	.word	0x08003943
 80038b0:	0800392b 	.word	0x0800392b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80038b4:	f7fe fed4 	bl	8002660 <HAL_RCC_GetPCLK1Freq>
 80038b8:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	685b      	ldr	r3, [r3, #4]
 80038be:	085a      	lsrs	r2, r3, #1
 80038c0:	693b      	ldr	r3, [r7, #16]
 80038c2:	441a      	add	r2, r3
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	685b      	ldr	r3, [r3, #4]
 80038c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80038cc:	b29b      	uxth	r3, r3
 80038ce:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80038d0:	e03a      	b.n	8003948 <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80038d2:	f7fe fedb 	bl	800268c <HAL_RCC_GetPCLK2Freq>
 80038d6:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	685b      	ldr	r3, [r3, #4]
 80038dc:	085a      	lsrs	r2, r3, #1
 80038de:	693b      	ldr	r3, [r7, #16]
 80038e0:	441a      	add	r2, r3
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	685b      	ldr	r3, [r3, #4]
 80038e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80038ea:	b29b      	uxth	r3, r3
 80038ec:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80038ee:	e02b      	b.n	8003948 <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	685b      	ldr	r3, [r3, #4]
 80038f4:	085b      	lsrs	r3, r3, #1
 80038f6:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 80038fa:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 80038fe:	687a      	ldr	r2, [r7, #4]
 8003900:	6852      	ldr	r2, [r2, #4]
 8003902:	fbb3 f3f2 	udiv	r3, r3, r2
 8003906:	b29b      	uxth	r3, r3
 8003908:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800390a:	e01d      	b.n	8003948 <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800390c:	f7fe fe12 	bl	8002534 <HAL_RCC_GetSysClockFreq>
 8003910:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	685b      	ldr	r3, [r3, #4]
 8003916:	085a      	lsrs	r2, r3, #1
 8003918:	693b      	ldr	r3, [r7, #16]
 800391a:	441a      	add	r2, r3
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	685b      	ldr	r3, [r3, #4]
 8003920:	fbb2 f3f3 	udiv	r3, r2, r3
 8003924:	b29b      	uxth	r3, r3
 8003926:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003928:	e00e      	b.n	8003948 <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	685b      	ldr	r3, [r3, #4]
 800392e:	085b      	lsrs	r3, r3, #1
 8003930:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	685b      	ldr	r3, [r3, #4]
 8003938:	fbb2 f3f3 	udiv	r3, r2, r3
 800393c:	b29b      	uxth	r3, r3
 800393e:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003940:	e002      	b.n	8003948 <UART_SetConfig+0x6ac>
      default:
        ret = HAL_ERROR;
 8003942:	2301      	movs	r3, #1
 8003944:	76fb      	strb	r3, [r7, #27]
        break;
 8003946:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003948:	69fb      	ldr	r3, [r7, #28]
 800394a:	2b0f      	cmp	r3, #15
 800394c:	d90a      	bls.n	8003964 <UART_SetConfig+0x6c8>
 800394e:	69fb      	ldr	r3, [r7, #28]
 8003950:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003954:	d206      	bcs.n	8003964 <UART_SetConfig+0x6c8>
    {
      huart->Instance->BRR = usartdiv;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	69fa      	ldr	r2, [r7, #28]
 800395c:	60da      	str	r2, [r3, #12]
 800395e:	e003      	b.n	8003968 <UART_SetConfig+0x6cc>
 8003960:	f4240000 	.word	0xf4240000
    }
    else
    {
      ret = HAL_ERROR;
 8003964:	2301      	movs	r3, #1
 8003966:	76fb      	strb	r3, [r7, #27]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2200      	movs	r2, #0
 800396c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2200      	movs	r2, #0
 8003972:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8003974:	7efb      	ldrb	r3, [r7, #27]
}
 8003976:	4618      	mov	r0, r3
 8003978:	3728      	adds	r7, #40	; 0x28
 800397a:	46bd      	mov	sp, r7
 800397c:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

08003980 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003980:	b480      	push	{r7}
 8003982:	b083      	sub	sp, #12
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800398c:	f003 0301 	and.w	r3, r3, #1
 8003990:	2b00      	cmp	r3, #0
 8003992:	d00a      	beq.n	80039aa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	685b      	ldr	r3, [r3, #4]
 800399a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	430a      	orrs	r2, r1
 80039a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ae:	f003 0302 	and.w	r3, r3, #2
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d00a      	beq.n	80039cc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	685b      	ldr	r3, [r3, #4]
 80039bc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	430a      	orrs	r2, r1
 80039ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039d0:	f003 0304 	and.w	r3, r3, #4
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d00a      	beq.n	80039ee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	685b      	ldr	r3, [r3, #4]
 80039de:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	430a      	orrs	r2, r1
 80039ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039f2:	f003 0308 	and.w	r3, r3, #8
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d00a      	beq.n	8003a10 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	685b      	ldr	r3, [r3, #4]
 8003a00:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	430a      	orrs	r2, r1
 8003a0e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a14:	f003 0310 	and.w	r3, r3, #16
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d00a      	beq.n	8003a32 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	689b      	ldr	r3, [r3, #8]
 8003a22:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	430a      	orrs	r2, r1
 8003a30:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a36:	f003 0320 	and.w	r3, r3, #32
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d00a      	beq.n	8003a54 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	689b      	ldr	r3, [r3, #8]
 8003a44:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	430a      	orrs	r2, r1
 8003a52:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d01a      	beq.n	8003a96 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	685b      	ldr	r3, [r3, #4]
 8003a66:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	430a      	orrs	r2, r1
 8003a74:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a7a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003a7e:	d10a      	bne.n	8003a96 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	685b      	ldr	r3, [r3, #4]
 8003a86:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	430a      	orrs	r2, r1
 8003a94:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d00a      	beq.n	8003ab8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	685b      	ldr	r3, [r3, #4]
 8003aa8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	430a      	orrs	r2, r1
 8003ab6:	605a      	str	r2, [r3, #4]
  }
}
 8003ab8:	bf00      	nop
 8003aba:	370c      	adds	r7, #12
 8003abc:	46bd      	mov	sp, r7
 8003abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac2:	4770      	bx	lr

08003ac4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b086      	sub	sp, #24
 8003ac8:	af02      	add	r7, sp, #8
 8003aca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2200      	movs	r2, #0
 8003ad0:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8003ad2:	f7fd f92b 	bl	8000d2c <HAL_GetTick>
 8003ad6:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f003 0308 	and.w	r3, r3, #8
 8003ae2:	2b08      	cmp	r3, #8
 8003ae4:	d10e      	bne.n	8003b04 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003ae6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003aea:	9300      	str	r3, [sp, #0]
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	2200      	movs	r2, #0
 8003af0:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003af4:	6878      	ldr	r0, [r7, #4]
 8003af6:	f000 f82a 	bl	8003b4e <UART_WaitOnFlagUntilTimeout>
 8003afa:	4603      	mov	r3, r0
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d001      	beq.n	8003b04 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003b00:	2303      	movs	r3, #3
 8003b02:	e020      	b.n	8003b46 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f003 0304 	and.w	r3, r3, #4
 8003b0e:	2b04      	cmp	r3, #4
 8003b10:	d10e      	bne.n	8003b30 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003b12:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003b16:	9300      	str	r3, [sp, #0]
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003b20:	6878      	ldr	r0, [r7, #4]
 8003b22:	f000 f814 	bl	8003b4e <UART_WaitOnFlagUntilTimeout>
 8003b26:	4603      	mov	r3, r0
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d001      	beq.n	8003b30 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003b2c:	2303      	movs	r3, #3
 8003b2e:	e00a      	b.n	8003b46 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2220      	movs	r2, #32
 8003b34:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2220      	movs	r2, #32
 8003b3a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2200      	movs	r2, #0
 8003b40:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8003b44:	2300      	movs	r3, #0
}
 8003b46:	4618      	mov	r0, r3
 8003b48:	3710      	adds	r7, #16
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	bd80      	pop	{r7, pc}

08003b4e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003b4e:	b580      	push	{r7, lr}
 8003b50:	b084      	sub	sp, #16
 8003b52:	af00      	add	r7, sp, #0
 8003b54:	60f8      	str	r0, [r7, #12]
 8003b56:	60b9      	str	r1, [r7, #8]
 8003b58:	603b      	str	r3, [r7, #0]
 8003b5a:	4613      	mov	r3, r2
 8003b5c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b5e:	e05d      	b.n	8003c1c <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b60:	69bb      	ldr	r3, [r7, #24]
 8003b62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b66:	d059      	beq.n	8003c1c <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b68:	f7fd f8e0 	bl	8000d2c <HAL_GetTick>
 8003b6c:	4602      	mov	r2, r0
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	1ad3      	subs	r3, r2, r3
 8003b72:	69ba      	ldr	r2, [r7, #24]
 8003b74:	429a      	cmp	r2, r3
 8003b76:	d302      	bcc.n	8003b7e <UART_WaitOnFlagUntilTimeout+0x30>
 8003b78:	69bb      	ldr	r3, [r7, #24]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d11b      	bne.n	8003bb6 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	681a      	ldr	r2, [r3, #0]
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003b8c:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	689a      	ldr	r2, [r3, #8]
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f022 0201 	bic.w	r2, r2, #1
 8003b9c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	2220      	movs	r2, #32
 8003ba2:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	2220      	movs	r2, #32
 8003ba8:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	2200      	movs	r2, #0
 8003bae:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8003bb2:	2303      	movs	r3, #3
 8003bb4:	e042      	b.n	8003c3c <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f003 0304 	and.w	r3, r3, #4
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d02b      	beq.n	8003c1c <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	69db      	ldr	r3, [r3, #28]
 8003bca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003bce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003bd2:	d123      	bne.n	8003c1c <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003bdc:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	681a      	ldr	r2, [r3, #0]
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003bec:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	689a      	ldr	r2, [r3, #8]
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f022 0201 	bic.w	r2, r2, #1
 8003bfc:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	2220      	movs	r2, #32
 8003c02:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	2220      	movs	r2, #32
 8003c08:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	2220      	movs	r2, #32
 8003c0e:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	2200      	movs	r2, #0
 8003c14:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8003c18:	2303      	movs	r3, #3
 8003c1a:	e00f      	b.n	8003c3c <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	69da      	ldr	r2, [r3, #28]
 8003c22:	68bb      	ldr	r3, [r7, #8]
 8003c24:	4013      	ands	r3, r2
 8003c26:	68ba      	ldr	r2, [r7, #8]
 8003c28:	429a      	cmp	r2, r3
 8003c2a:	bf0c      	ite	eq
 8003c2c:	2301      	moveq	r3, #1
 8003c2e:	2300      	movne	r3, #0
 8003c30:	b2db      	uxtb	r3, r3
 8003c32:	461a      	mov	r2, r3
 8003c34:	79fb      	ldrb	r3, [r7, #7]
 8003c36:	429a      	cmp	r2, r3
 8003c38:	d092      	beq.n	8003b60 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003c3a:	2300      	movs	r3, #0
}
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	3710      	adds	r7, #16
 8003c40:	46bd      	mov	sp, r7
 8003c42:	bd80      	pop	{r7, pc}

08003c44 <__libc_init_array>:
 8003c44:	b570      	push	{r4, r5, r6, lr}
 8003c46:	4e0d      	ldr	r6, [pc, #52]	; (8003c7c <__libc_init_array+0x38>)
 8003c48:	4c0d      	ldr	r4, [pc, #52]	; (8003c80 <__libc_init_array+0x3c>)
 8003c4a:	1ba4      	subs	r4, r4, r6
 8003c4c:	10a4      	asrs	r4, r4, #2
 8003c4e:	2500      	movs	r5, #0
 8003c50:	42a5      	cmp	r5, r4
 8003c52:	d109      	bne.n	8003c68 <__libc_init_array+0x24>
 8003c54:	4e0b      	ldr	r6, [pc, #44]	; (8003c84 <__libc_init_array+0x40>)
 8003c56:	4c0c      	ldr	r4, [pc, #48]	; (8003c88 <__libc_init_array+0x44>)
 8003c58:	f000 f820 	bl	8003c9c <_init>
 8003c5c:	1ba4      	subs	r4, r4, r6
 8003c5e:	10a4      	asrs	r4, r4, #2
 8003c60:	2500      	movs	r5, #0
 8003c62:	42a5      	cmp	r5, r4
 8003c64:	d105      	bne.n	8003c72 <__libc_init_array+0x2e>
 8003c66:	bd70      	pop	{r4, r5, r6, pc}
 8003c68:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003c6c:	4798      	blx	r3
 8003c6e:	3501      	adds	r5, #1
 8003c70:	e7ee      	b.n	8003c50 <__libc_init_array+0xc>
 8003c72:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003c76:	4798      	blx	r3
 8003c78:	3501      	adds	r5, #1
 8003c7a:	e7f2      	b.n	8003c62 <__libc_init_array+0x1e>
 8003c7c:	08003d14 	.word	0x08003d14
 8003c80:	08003d14 	.word	0x08003d14
 8003c84:	08003d14 	.word	0x08003d14
 8003c88:	08003d18 	.word	0x08003d18

08003c8c <memset>:
 8003c8c:	4402      	add	r2, r0
 8003c8e:	4603      	mov	r3, r0
 8003c90:	4293      	cmp	r3, r2
 8003c92:	d100      	bne.n	8003c96 <memset+0xa>
 8003c94:	4770      	bx	lr
 8003c96:	f803 1b01 	strb.w	r1, [r3], #1
 8003c9a:	e7f9      	b.n	8003c90 <memset+0x4>

08003c9c <_init>:
 8003c9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c9e:	bf00      	nop
 8003ca0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ca2:	bc08      	pop	{r3}
 8003ca4:	469e      	mov	lr, r3
 8003ca6:	4770      	bx	lr

08003ca8 <_fini>:
 8003ca8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003caa:	bf00      	nop
 8003cac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003cae:	bc08      	pop	{r3}
 8003cb0:	469e      	mov	lr, r3
 8003cb2:	4770      	bx	lr
